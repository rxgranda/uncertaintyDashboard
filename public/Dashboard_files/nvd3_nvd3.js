//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var nv;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/nvd3_nvd3/packages/nvd3_nvd3.js                          //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {                                                       // 1
                                                                     // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/nvd3:nvd3/build/nv.d3.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* nvd3 version 1.8.1-dev (https://github.com/novus/nvd3) 2015-07-14 */                                                // 1
(function(){                                                                                                           // 2
                                                                                                                       // 3
// set up main nv object                                                                                               // 4
var nv = {};                                                                                                           // 5
                                                                                                                       // 6
// the major global objects under the nv namespace                                                                     // 7
nv.dev = false; //set false when in production                                                                         // 8
nv.tooltip = nv.tooltip || {}; // For the tooltip system                                                               // 9
nv.utils = nv.utils || {}; // Utility subsystem                                                                        // 10
nv.models = nv.models || {}; //stores all the possible models/components                                               // 11
nv.charts = {}; //stores all the ready to use charts                                                                   // 12
nv.logs = {}; //stores some statistics and potential error messages                                                    // 13
nv.dom = {}; //DOM manipulation functions                                                                              // 14
                                                                                                                       // 15
nv.dispatch = d3.dispatch('render_start', 'render_end');                                                               // 16
                                                                                                                       // 17
// Function bind polyfill                                                                                              // 18
// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment                  // 19
// https://github.com/ariya/phantomjs/issues/10522                                                                     // 20
// http://kangax.github.io/compat-table/es5/#Function.prototype.bind                                                   // 21
// phantomJS is used for running the test suite                                                                        // 22
if (!Function.prototype.bind) {                                                                                        // 23
    Function.prototype.bind = function (oThis) {                                                                       // 24
        if (typeof this !== "function") {                                                                              // 25
            // closest thing possible to the ECMAScript 5 internal IsCallable function                                 // 26
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");               // 27
        }                                                                                                              // 28
                                                                                                                       // 29
        var aArgs = Array.prototype.slice.call(arguments, 1),                                                          // 30
            fToBind = this,                                                                                            // 31
            fNOP = function () {},                                                                                     // 32
            fBound = function () {                                                                                     // 33
                return fToBind.apply(this instanceof fNOP && oThis                                                     // 34
                        ? this                                                                                         // 35
                        : oThis,                                                                                       // 36
                    aArgs.concat(Array.prototype.slice.call(arguments)));                                              // 37
            };                                                                                                         // 38
                                                                                                                       // 39
        fNOP.prototype = this.prototype;                                                                               // 40
        fBound.prototype = new fNOP();                                                                                 // 41
        return fBound;                                                                                                 // 42
    };                                                                                                                 // 43
}                                                                                                                      // 44
                                                                                                                       // 45
//  Development render timers - disabled if dev = false                                                                // 46
if (nv.dev) {                                                                                                          // 47
    nv.dispatch.on('render_start', function(e) {                                                                       // 48
        nv.logs.startTime = +new Date();                                                                               // 49
    });                                                                                                                // 50
                                                                                                                       // 51
    nv.dispatch.on('render_end', function(e) {                                                                         // 52
        nv.logs.endTime = +new Date();                                                                                 // 53
        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;                                                       // 54
        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times           // 55
    });                                                                                                                // 56
}                                                                                                                      // 57
                                                                                                                       // 58
// Logs all arguments, and returns the last so you can test things in place                                            // 59
// Note: in IE8 console.log is an object not a function, and if modernizr is used                                      // 60
// then calling Function.prototype.bind with with anything other than a function                                       // 61
// causes a TypeError to be thrown.                                                                                    // 62
nv.log = function() {                                                                                                  // 63
    if (nv.dev && window.console && console.log && console.log.apply)                                                  // 64
        console.log.apply(console, arguments);                                                                         // 65
    else if (nv.dev && window.console && typeof console.log == "function" && Function.prototype.bind) {                // 66
        var log = Function.prototype.bind.call(console.log, console);                                                  // 67
        log.apply(console, arguments);                                                                                 // 68
    }                                                                                                                  // 69
    return arguments[arguments.length - 1];                                                                            // 70
};                                                                                                                     // 71
                                                                                                                       // 72
// print console warning, should be used by deprecated functions                                                       // 73
nv.deprecated = function(name, info) {                                                                                 // 74
    if (console && console.warn) {                                                                                     // 75
        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');                                // 76
    }                                                                                                                  // 77
};                                                                                                                     // 78
                                                                                                                       // 79
// The nv.render function is used to queue up chart rendering                                                          // 80
// in non-blocking async functions.                                                                                    // 81
// When all queued charts are done rendering, nv.dispatch.render_end is invoked.                                       // 82
nv.render = function render(step) {                                                                                    // 83
    // number of graphs to generate in each timeout loop                                                               // 84
    step = step || 1;                                                                                                  // 85
                                                                                                                       // 86
    nv.render.active = true;                                                                                           // 87
    nv.dispatch.render_start();                                                                                        // 88
                                                                                                                       // 89
    var renderLoop = function() {                                                                                      // 90
        var chart, graph;                                                                                              // 91
                                                                                                                       // 92
        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {                                               // 93
            chart = graph.generate();                                                                                  // 94
            if (typeof graph.callback == typeof(Function)) graph.callback(chart);                                      // 95
        }                                                                                                              // 96
                                                                                                                       // 97
        nv.render.queue.splice(0, i);                                                                                  // 98
                                                                                                                       // 99
        if (nv.render.queue.length) {                                                                                  // 100
            setTimeout(renderLoop);                                                                                    // 101
        }                                                                                                              // 102
        else {                                                                                                         // 103
            nv.dispatch.render_end();                                                                                  // 104
            nv.render.active = false;                                                                                  // 105
        }                                                                                                              // 106
    };                                                                                                                 // 107
                                                                                                                       // 108
    setTimeout(renderLoop);                                                                                            // 109
};                                                                                                                     // 110
                                                                                                                       // 111
nv.render.active = false;                                                                                              // 112
nv.render.queue = [];                                                                                                  // 113
                                                                                                                       // 114
/*                                                                                                                     // 115
Adds a chart to the async rendering queue. This method can take arguments in two forms:                                // 116
nv.addGraph({                                                                                                          // 117
    generate: <Function>                                                                                               // 118
    callback: <Function>                                                                                               // 119
})                                                                                                                     // 120
                                                                                                                       // 121
or                                                                                                                     // 122
                                                                                                                       // 123
nv.addGraph(<generate Function>, <callback Function>)                                                                  // 124
                                                                                                                       // 125
The generate function should contain code that creates the NVD3 model, sets options                                    // 126
on it, adds data to an SVG element, and invokes the chart model. The generate function                                 // 127
should return the chart model.  See examples/lineChart.html for a usage example.                                       // 128
                                                                                                                       // 129
The callback function is optional, and it is called when the generate function completes.                              // 130
*/                                                                                                                     // 131
nv.addGraph = function(obj) {                                                                                          // 132
    if (typeof arguments[0] === typeof(Function)) {                                                                    // 133
        obj = {generate: arguments[0], callback: arguments[1]};                                                        // 134
    }                                                                                                                  // 135
                                                                                                                       // 136
    nv.render.queue.push(obj);                                                                                         // 137
                                                                                                                       // 138
    if (!nv.render.active) {                                                                                           // 139
        nv.render();                                                                                                   // 140
    }                                                                                                                  // 141
};                                                                                                                     // 142
                                                                                                                       // 143
// Node/CommonJS exports                                                                                               // 144
if (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined') {                                               // 145
  module.exports = nv;                                                                                                 // 146
}                                                                                                                      // 147
                                                                                                                       // 148
if (typeof(window) !== 'undefined') {                                                                                  // 149
  window.nv = nv;                                                                                                      // 150
}                                                                                                                      // 151
/* Facade for queueing DOM write operations                                                                            // 152
 * with Fastdom (https://github.com/wilsonpage/fastdom)                                                                // 153
 * if available.                                                                                                       // 154
 * This could easily be extended to support alternate                                                                  // 155
 * implementations in the future.                                                                                      // 156
 */                                                                                                                    // 157
nv.dom.write = function(callback) {                                                                                    // 158
	if (window.fastdom !== undefined) {                                                                                   // 159
		return fastdom.write(callback);                                                                                      // 160
	}                                                                                                                     // 161
	return callback();                                                                                                    // 162
};                                                                                                                     // 163
                                                                                                                       // 164
/* Facade for queueing DOM read operations                                                                             // 165
 * with Fastdom (https://github.com/wilsonpage/fastdom)                                                                // 166
 * if available.                                                                                                       // 167
 * This could easily be extended to support alternate                                                                  // 168
 * implementations in the future.                                                                                      // 169
 */                                                                                                                    // 170
nv.dom.read = function(callback) {                                                                                     // 171
	if (window.fastdom !== undefined) {                                                                                   // 172
		return fastdom.read(callback);                                                                                       // 173
	}                                                                                                                     // 174
	return callback();                                                                                                    // 175
};/* Utility class to handle creation of an interactive layer.                                                         // 176
 This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch                         // 177
 containing the X-coordinate. It can also render a vertical line where the mouse is located.                           // 178
                                                                                                                       // 179
 dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over            // 180
 the rectangle. The dispatch is given one object which contains the mouseX/Y location.                                 // 181
 It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.                                     // 182
 */                                                                                                                    // 183
nv.interactiveGuideline = function() {                                                                                 // 184
    "use strict";                                                                                                      // 185
                                                                                                                       // 186
    var tooltip = nv.models.tooltip();                                                                                 // 187
    tooltip.duration(0).hideDelay(0)._isInteractiveLayer(true).hidden(false);                                          // 188
                                                                                                                       // 189
    //Public settings                                                                                                  // 190
    var width = null;                                                                                                  // 191
    var height = null;                                                                                                 // 192
                                                                                                                       // 193
    //Please pass in the bounding chart's top and left margins                                                         // 194
    //This is important for calculating the correct mouseX/Y positions.                                                // 195
    var margin = {left: 0, top: 0}                                                                                     // 196
        , xScale = d3.scale.linear()                                                                                   // 197
        , dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick')             // 198
        , showGuideLine = true;                                                                                        // 199
    //Must pass in the bounding chart's <svg> container.                                                               // 200
    //The mousemove event is attached to this container.                                                               // 201
    var svgContainer = null;                                                                                           // 202
                                                                                                                       // 203
    // check if IE by looking for activeX                                                                              // 204
    var isMSIE = "ActiveXObject" in window;                                                                            // 205
                                                                                                                       // 206
                                                                                                                       // 207
    function layer(selection) {                                                                                        // 208
        selection.each(function(data) {                                                                                // 209
            var container = d3.select(this);                                                                           // 210
            var availableWidth = (width || 960), availableHeight = (height || 400);                                    // 211
            var wrap = container.selectAll("g.nv-wrap.nv-interactiveLineLayer")                                        // 212
                .data([data]);                                                                                         // 213
            var wrapEnter = wrap.enter()                                                                               // 214
                .append("g").attr("class", " nv-wrap nv-interactiveLineLayer");                                        // 215
            wrapEnter.append("g").attr("class","nv-interactiveGuideLine");                                             // 216
                                                                                                                       // 217
            if (!svgContainer) {                                                                                       // 218
                return;                                                                                                // 219
            }                                                                                                          // 220
                                                                                                                       // 221
            function mouseHandler() {                                                                                  // 222
                var d3mouse = d3.mouse(this);                                                                          // 223
                var mouseX = d3mouse[0];                                                                               // 224
                var mouseY = d3mouse[1];                                                                               // 225
                var subtractMargin = true;                                                                             // 226
                var mouseOutAnyReason = false;                                                                         // 227
                if (isMSIE) {                                                                                          // 228
                    /*                                                                                                 // 229
                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.                        // 230
                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving                              // 231
                     over a rect in IE 10.                                                                             // 232
                     However, d3.event.offsetX/Y also returns the mouse coordinates                                    // 233
                     relative to the triggering <rect>. So we use offsetX/Y on IE.                                     // 234
                     */                                                                                                // 235
                    mouseX = d3.event.offsetX;                                                                         // 236
                    mouseY = d3.event.offsetY;                                                                         // 237
                                                                                                                       // 238
                    /*                                                                                                 // 239
                     On IE, if you attach a mouse event listener to the <svg> container,                               // 240
                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).              // 241
                     When this happens on IE, the offsetX/Y is set to where ever the child element                     // 242
                     is located.                                                                                       // 243
                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y                       // 244
                     position under this scenario. Removing the line below *will* cause                                // 245
                     the interactive layer to not work right on IE.                                                    // 246
                     */                                                                                                // 247
                    if(d3.event.target.tagName !== "svg") {                                                            // 248
                        subtractMargin = false;                                                                        // 249
                    }                                                                                                  // 250
                                                                                                                       // 251
                    if (d3.event.target.className.baseVal.match("nv-legend")) {                                        // 252
                        mouseOutAnyReason = true;                                                                      // 253
                    }                                                                                                  // 254
                                                                                                                       // 255
                }                                                                                                      // 256
                                                                                                                       // 257
                if(subtractMargin) {                                                                                   // 258
                    mouseX -= margin.left;                                                                             // 259
                    mouseY -= margin.top;                                                                              // 260
                }                                                                                                      // 261
                                                                                                                       // 262
                /* If mouseX/Y is outside of the chart's bounds,                                                       // 263
                 trigger a mouseOut event.                                                                             // 264
                 */                                                                                                    // 265
                if (mouseX < 0 || mouseY < 0                                                                           // 266
                    || mouseX > availableWidth || mouseY > availableHeight                                             // 267
                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)                // 268
                    || mouseOutAnyReason                                                                               // 269
                    ) {                                                                                                // 270
                                                                                                                       // 271
                    if (isMSIE) {                                                                                      // 272
                        if (d3.event.relatedTarget                                                                     // 273
                            && d3.event.relatedTarget.ownerSVGElement === undefined                                    // 274
                            && (d3.event.relatedTarget.className === undefined                                         // 275
                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {            // 276
                                                                                                                       // 277
                            return;                                                                                    // 278
                        }                                                                                              // 279
                    }                                                                                                  // 280
                    dispatch.elementMouseout({                                                                         // 281
                        mouseX: mouseX,                                                                                // 282
                        mouseY: mouseY                                                                                 // 283
                    });                                                                                                // 284
                    layer.renderGuideLine(null); //hide the guideline                                                  // 285
                    tooltip.hidden(true);                                                                              // 286
                    return;                                                                                            // 287
                } else {                                                                                               // 288
                    tooltip.hidden(false);                                                                             // 289
                }                                                                                                      // 290
                                                                                                                       // 291
                var pointXValue = xScale.invert(mouseX);                                                               // 292
                dispatch.elementMousemove({                                                                            // 293
                    mouseX: mouseX,                                                                                    // 294
                    mouseY: mouseY,                                                                                    // 295
                    pointXValue: pointXValue                                                                           // 296
                });                                                                                                    // 297
                                                                                                                       // 298
                //If user double clicks the layer, fire a elementDblclick                                              // 299
                if (d3.event.type === "dblclick") {                                                                    // 300
                    dispatch.elementDblclick({                                                                         // 301
                        mouseX: mouseX,                                                                                // 302
                        mouseY: mouseY,                                                                                // 303
                        pointXValue: pointXValue                                                                       // 304
                    });                                                                                                // 305
                }                                                                                                      // 306
                                                                                                                       // 307
                // if user single clicks the layer, fire elementClick                                                  // 308
                if (d3.event.type === 'click') {                                                                       // 309
                    dispatch.elementClick({                                                                            // 310
                        mouseX: mouseX,                                                                                // 311
                        mouseY: mouseY,                                                                                // 312
                        pointXValue: pointXValue                                                                       // 313
                    });                                                                                                // 314
                }                                                                                                      // 315
            }                                                                                                          // 316
                                                                                                                       // 317
            svgContainer                                                                                               // 318
                .on("touchmove",mouseHandler)                                                                          // 319
                .on("mousemove",mouseHandler, true)                                                                    // 320
                .on("mouseout" ,mouseHandler,true)                                                                     // 321
                .on("dblclick" ,mouseHandler)                                                                          // 322
                .on("click", mouseHandler)                                                                             // 323
            ;                                                                                                          // 324
                                                                                                                       // 325
            layer.guideLine = null;                                                                                    // 326
            //Draws a vertical guideline at the given X postion.                                                       // 327
            layer.renderGuideLine = function(x) {                                                                      // 328
                if (!showGuideLine) return;                                                                            // 329
                if (layer.guideLine && layer.guideLine.attr("x1") === x) return;                                       // 330
                nv.dom.write(function() {                                                                              // 331
                    var line = wrap.select(".nv-interactiveGuideLine")                                                 // 332
                        .selectAll("line")                                                                             // 333
                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);                                     // 334
                    line.enter()                                                                                       // 335
                        .append("line")                                                                                // 336
                        .attr("class", "nv-guideline")                                                                 // 337
                        .attr("x1", function(d) { return d;})                                                          // 338
                        .attr("x2", function(d) { return d;})                                                          // 339
                        .attr("y1", availableHeight)                                                                   // 340
                        .attr("y2",0);                                                                                 // 341
                    line.exit().remove();                                                                              // 342
                });                                                                                                    // 343
            }                                                                                                          // 344
        });                                                                                                            // 345
    }                                                                                                                  // 346
                                                                                                                       // 347
    layer.dispatch = dispatch;                                                                                         // 348
    layer.tooltip = tooltip;                                                                                           // 349
                                                                                                                       // 350
    layer.margin = function(_) {                                                                                       // 351
        if (!arguments.length) return margin;                                                                          // 352
        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;                                        // 353
        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;                                       // 354
        return layer;                                                                                                  // 355
    };                                                                                                                 // 356
                                                                                                                       // 357
    layer.width = function(_) {                                                                                        // 358
        if (!arguments.length) return width;                                                                           // 359
        width = _;                                                                                                     // 360
        return layer;                                                                                                  // 361
    };                                                                                                                 // 362
                                                                                                                       // 363
    layer.height = function(_) {                                                                                       // 364
        if (!arguments.length) return height;                                                                          // 365
        height = _;                                                                                                    // 366
        return layer;                                                                                                  // 367
    };                                                                                                                 // 368
                                                                                                                       // 369
    layer.xScale = function(_) {                                                                                       // 370
        if (!arguments.length) return xScale;                                                                          // 371
        xScale = _;                                                                                                    // 372
        return layer;                                                                                                  // 373
    };                                                                                                                 // 374
                                                                                                                       // 375
    layer.showGuideLine = function(_) {                                                                                // 376
        if (!arguments.length) return showGuideLine;                                                                   // 377
        showGuideLine = _;                                                                                             // 378
        return layer;                                                                                                  // 379
    };                                                                                                                 // 380
                                                                                                                       // 381
    layer.svgContainer = function(_) {                                                                                 // 382
        if (!arguments.length) return svgContainer;                                                                    // 383
        svgContainer = _;                                                                                              // 384
        return layer;                                                                                                  // 385
    };                                                                                                                 // 386
                                                                                                                       // 387
    return layer;                                                                                                      // 388
};                                                                                                                     // 389
                                                                                                                       // 390
/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.         // 391
 This is different from normal bisectLeft; this function finds the nearest index to insert the search value.           // 392
                                                                                                                       // 393
 For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.                                          // 394
 Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5  // 395
 because 28 is closer to 30 than 10.                                                                                   // 396
                                                                                                                       // 397
 Unit tests can be found in: interactiveBisectTest.html                                                                // 398
                                                                                                                       // 399
 Has the following known issues:                                                                                       // 400
 * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.      // 401
 * Won't work if there are duplicate x coordinate values.                                                              // 402
 */                                                                                                                    // 403
nv.interactiveBisect = function (values, searchVal, xAccessor) {                                                       // 404
    "use strict";                                                                                                      // 405
    if (! (values instanceof Array)) {                                                                                 // 406
        return null;                                                                                                   // 407
    }                                                                                                                  // 408
    var _xAccessor;                                                                                                    // 409
    if (typeof xAccessor !== 'function') {                                                                             // 410
        _xAccessor = function(d) {                                                                                     // 411
            return d.x;                                                                                                // 412
        }                                                                                                              // 413
    } else {                                                                                                           // 414
        _xAccessor = xAccessor;                                                                                        // 415
    }                                                                                                                  // 416
    var _cmp = function(d, v) {                                                                                        // 417
        // Accessors are no longer passed the index of the element along with                                          // 418
        // the element itself when invoked by d3.bisector.                                                             // 419
        //                                                                                                             // 420
        // Starting at D3 v3.4.4, d3.bisector() started inspecting the                                                 // 421
        // function passed to determine if it should consider it an accessor                                           // 422
        // or a comparator. This meant that accessors that take two arguments                                          // 423
        // (expecting an index as the second parameter) are treated as                                                 // 424
        // comparators where the second argument is the search value against                                           // 425
        // which the first argument is compared.                                                                       // 426
        return _xAccessor(d) - v;                                                                                      // 427
    };                                                                                                                 // 428
                                                                                                                       // 429
    var bisect = d3.bisector(_cmp).left;                                                                               // 430
    var index = d3.max([0, bisect(values,searchVal) - 1]);                                                             // 431
    var currentValue = _xAccessor(values[index]);                                                                      // 432
                                                                                                                       // 433
    if (typeof currentValue === 'undefined') {                                                                         // 434
        currentValue = index;                                                                                          // 435
    }                                                                                                                  // 436
                                                                                                                       // 437
    if (currentValue === searchVal) {                                                                                  // 438
        return index; //found exact match                                                                              // 439
    }                                                                                                                  // 440
                                                                                                                       // 441
    var nextIndex = d3.min([index+1, values.length - 1]);                                                              // 442
    var nextValue = _xAccessor(values[nextIndex]);                                                                     // 443
                                                                                                                       // 444
    if (typeof nextValue === 'undefined') {                                                                            // 445
        nextValue = nextIndex;                                                                                         // 446
    }                                                                                                                  // 447
                                                                                                                       // 448
    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {                                       // 449
        return index;                                                                                                  // 450
    } else {                                                                                                           // 451
        return nextIndex                                                                                               // 452
    }                                                                                                                  // 453
};                                                                                                                     // 454
                                                                                                                       // 455
/*                                                                                                                     // 456
 Returns the index in the array "values" that is closest to searchVal.                                                 // 457
 Only returns an index if searchVal is within some "threshold".                                                        // 458
 Otherwise, returns null.                                                                                              // 459
 */                                                                                                                    // 460
nv.nearestValueIndex = function (values, searchVal, threshold) {                                                       // 461
    "use strict";                                                                                                      // 462
    var yDistMax = Infinity, indexToHighlight = null;                                                                  // 463
    values.forEach(function(d,i) {                                                                                     // 464
        var delta = Math.abs(searchVal - d);                                                                           // 465
        if ( d != null && delta <= yDistMax && delta < threshold) {                                                    // 466
            yDistMax = delta;                                                                                          // 467
            indexToHighlight = i;                                                                                      // 468
        }                                                                                                              // 469
    });                                                                                                                // 470
    return indexToHighlight;                                                                                           // 471
};                                                                                                                     // 472
/* Tooltip rendering model for nvd3 charts.                                                                            // 473
 window.nv.models.tooltip is the updated,new way to render tooltips.                                                   // 474
                                                                                                                       // 475
 window.nv.tooltip.show is the old tooltip code.                                                                       // 476
 window.nv.tooltip.* also has various helper methods.                                                                  // 477
 */                                                                                                                    // 478
(function() {                                                                                                          // 479
    "use strict";                                                                                                      // 480
                                                                                                                       // 481
    /* Model which can be instantiated to handle tooltip rendering.                                                    // 482
     Example usage:                                                                                                    // 483
     var tip = nv.models.tooltip().gravity('w').distance(23)                                                           // 484
     .data(myDataObject);                                                                                              // 485
                                                                                                                       // 486
     tip();    //just invoke the returned function to render tooltip.                                                  // 487
     */                                                                                                                // 488
    nv.models.tooltip = function() {                                                                                   // 489
                                                                                                                       // 490
        /*                                                                                                             // 491
        Tooltip data. If data is given in the proper format, a consistent tooltip is generated.                        // 492
        Example Format of data:                                                                                        // 493
        {                                                                                                              // 494
            key: "Date",                                                                                               // 495
            value: "August 2009",                                                                                      // 496
            series: [                                                                                                  // 497
                {key: "Series 1", value: "Value 1", color: "#000"},                                                    // 498
                {key: "Series 2", value: "Value 2", color: "#00f"}                                                     // 499
            ]                                                                                                          // 500
        }                                                                                                              // 501
        */                                                                                                             // 502
        var data = null;                                                                                               // 503
        var gravity = 'w'   //Can be 'n','s','e','w'. Determines how tooltip is positioned.                            // 504
            ,   distance = 25   //Distance to offset tooltip from the mouse location.                                  // 505
            ,   snapDistance = 0   //Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)
            ,   fixedTop = null //If not null, this fixes the top position of the tooltip.                             // 507
            ,   classes = null  //Attaches additional CSS classes to the tooltip DIV that is created.                  // 508
            ,   chartContainer = null   //Parent dom element of the SVG that holds the chart.                          // 509
            ,   hidden = true  // start off hidden, toggle with hide/show functions below                              // 510
            ,   hideDelay = 400  // delay before the tooltip hides after calling hide()                                // 511
            ,   tooltip = null // d3 select of tooltipElem below                                                       // 512
            ,   tooltipElem = null  //actual DOM element representing the tooltip.                                     // 513
            ,   position = {left: null, top: null}   //Relative position of the tooltip inside chartContainer.         // 514
            ,   offset = {left: 0, top: 0}   //Offset of tooltip against the pointer                                   // 515
            ,   enabled = true  //True -> tooltips are rendered. False -> don't render tooltips.                       // 516
            ,   duration = 100 // duration for tooltip movement                                                        // 517
            ,   headerEnabled = true                                                                                   // 518
        ;                                                                                                              // 519
                                                                                                                       // 520
        // set to true by interactive layer to adjust tooltip positions                                                // 521
        // eventually we should probably fix interactive layer to get the position better.                             // 522
        // for now this is needed if you want to set chartContainer for normal tooltips, else it "fixes" it to broken  // 523
        var isInteractiveLayer = false;                                                                                // 524
                                                                                                                       // 525
        //Generates a unique id when you create a new tooltip() object                                                 // 526
        var id = "nvtooltip-" + Math.floor(Math.random() * 100000);                                                    // 527
                                                                                                                       // 528
        //CSS class to specify whether element should not have mouse events.                                           // 529
        var  nvPointerEventsClass = "nv-pointer-events-none";                                                          // 530
                                                                                                                       // 531
        //Format function for the tooltip values column                                                                // 532
        var valueFormatter = function(d,i) {                                                                           // 533
            return d;                                                                                                  // 534
        };                                                                                                             // 535
                                                                                                                       // 536
        //Format function for the tooltip header value.                                                                // 537
        var headerFormatter = function(d) {                                                                            // 538
            return d;                                                                                                  // 539
        };                                                                                                             // 540
                                                                                                                       // 541
        var keyFormatter = function(d, i) {                                                                            // 542
            return d;                                                                                                  // 543
        };                                                                                                             // 544
                                                                                                                       // 545
        //By default, the tooltip model renders a beautiful table inside a DIV.                                        // 546
        //You can override this function if a custom tooltip is desired.                                               // 547
        var contentGenerator = function(d) {                                                                           // 548
            if (d === null) {                                                                                          // 549
                return '';                                                                                             // 550
            }                                                                                                          // 551
                                                                                                                       // 552
            var table = d3.select(document.createElement("table"));                                                    // 553
            if (headerEnabled) {                                                                                       // 554
                var theadEnter = table.selectAll("thead")                                                              // 555
                    .data([d])                                                                                         // 556
                    .enter().append("thead");                                                                          // 557
                                                                                                                       // 558
                theadEnter.append("tr")                                                                                // 559
                    .append("td")                                                                                      // 560
                    .attr("colspan", 3)                                                                                // 561
                    .append("strong")                                                                                  // 562
                    .classed("x-value", true)                                                                          // 563
                    .html(headerFormatter(d.value));                                                                   // 564
            }                                                                                                          // 565
                                                                                                                       // 566
            var tbodyEnter = table.selectAll("tbody")                                                                  // 567
                .data([d])                                                                                             // 568
                .enter().append("tbody");                                                                              // 569
                                                                                                                       // 570
            var trowEnter = tbodyEnter.selectAll("tr")                                                                 // 571
                    .data(function(p) { return p.series})                                                              // 572
                    .enter()                                                                                           // 573
                    .append("tr")                                                                                      // 574
                    .classed("highlight", function(p) { return p.highlight});                                          // 575
                                                                                                                       // 576
            trowEnter.append("td")                                                                                     // 577
                .classed("legend-color-guide",true)                                                                    // 578
                .append("div")                                                                                         // 579
                .style("background-color", function(p) { return p.color});                                             // 580
                                                                                                                       // 581
            trowEnter.append("td")                                                                                     // 582
                .classed("key",true)                                                                                   // 583
                .classed("total",function(p) { return !!p.total})                                                      // 584
                .html(function(p, i) { return keyFormatter(p.key, i)});                                                // 585
                                                                                                                       // 586
            trowEnter.append("td")                                                                                     // 587
                .classed("value",true)                                                                                 // 588
                .html(function(p, i) { return valueFormatter(p.value, i) });                                           // 589
                                                                                                                       // 590
                                                                                                                       // 591
            trowEnter.selectAll("td").each(function(p) {                                                               // 592
                if (p.highlight) {                                                                                     // 593
                    var opacityScale = d3.scale.linear().domain([0,1]).range(["#fff",p.color]);                        // 594
                    var opacity = 0.6;                                                                                 // 595
                    d3.select(this)                                                                                    // 596
                        .style("border-bottom-color", opacityScale(opacity))                                           // 597
                        .style("border-top-color", opacityScale(opacity))                                              // 598
                    ;                                                                                                  // 599
                }                                                                                                      // 600
            });                                                                                                        // 601
                                                                                                                       // 602
            var html = table.node().outerHTML;                                                                         // 603
            if (d.footer !== undefined)                                                                                // 604
                html += "<div class='footer'>" + d.footer + "</div>";                                                  // 605
            return html;                                                                                               // 606
                                                                                                                       // 607
        };                                                                                                             // 608
                                                                                                                       // 609
        var dataSeriesExists = function(d) {                                                                           // 610
            if (d && d.series) {                                                                                       // 611
                if (d.series instanceof Array) {                                                                       // 612
                    return !!d.series.length;                                                                          // 613
                }                                                                                                      // 614
                // if object, it's okay just convert to array of the object                                            // 615
                if (d.series instanceof Object) {                                                                      // 616
                    d.series = [d.series];                                                                             // 617
                    return true;                                                                                       // 618
                }                                                                                                      // 619
            }                                                                                                          // 620
            return false;                                                                                              // 621
        };                                                                                                             // 622
                                                                                                                       // 623
        var calcTooltipPosition = function(pos) {                                                                      // 624
            if (!tooltipElem) return;                                                                                  // 625
                                                                                                                       // 626
            nv.dom.read(function() {                                                                                   // 627
                var height = parseInt(tooltipElem.offsetHeight, 10),                                                   // 628
                    width = parseInt(tooltipElem.offsetWidth, 10),                                                     // 629
                    windowWidth = nv.utils.windowSize().width,                                                         // 630
                    windowHeight = nv.utils.windowSize().height,                                                       // 631
                    scrollTop = window.pageYOffset,                                                                    // 632
                    scrollLeft = window.pageXOffset,                                                                   // 633
                    left, top;                                                                                         // 634
                                                                                                                       // 635
                windowHeight = window.innerWidth >= document.body.scrollWidth ? windowHeight : windowHeight - 16;      // 636
                windowWidth = window.innerHeight >= document.body.scrollHeight ? windowWidth : windowWidth - 16;       // 637
                                                                                                                       // 638
                                                                                                                       // 639
                //Helper functions to find the total offsets of a given DOM element.                                   // 640
                //Looks up the entire ancestry of an element, up to the first relatively positioned element.           // 641
                var tooltipTop = function ( Elem ) {                                                                   // 642
                    var offsetTop = top;                                                                               // 643
                    do {                                                                                               // 644
                        if( !isNaN( Elem.offsetTop ) ) {                                                               // 645
                            offsetTop += (Elem.offsetTop);                                                             // 646
                        }                                                                                              // 647
                        Elem = Elem.offsetParent;                                                                      // 648
                    } while( Elem );                                                                                   // 649
                    return offsetTop;                                                                                  // 650
                };                                                                                                     // 651
                var tooltipLeft = function ( Elem ) {                                                                  // 652
                    var offsetLeft = left;                                                                             // 653
                    do {                                                                                               // 654
                        if( !isNaN( Elem.offsetLeft ) ) {                                                              // 655
                            offsetLeft += (Elem.offsetLeft);                                                           // 656
                        }                                                                                              // 657
                        Elem = Elem.offsetParent;                                                                      // 658
                    } while( Elem );                                                                                   // 659
                    return offsetLeft;                                                                                 // 660
                };                                                                                                     // 661
                                                                                                                       // 662
                // calculate position based on gravity                                                                 // 663
                var tLeft, tTop;                                                                                       // 664
                switch (gravity) {                                                                                     // 665
                    case 'e':                                                                                          // 666
                        left = pos[0] - width - distance;                                                              // 667
                        top = pos[1] - (height / 2);                                                                   // 668
                        tLeft = tooltipLeft(tooltipElem);                                                              // 669
                        tTop = tooltipTop(tooltipElem);                                                                // 670
                        if (tLeft < scrollLeft) left = pos[0] + distance > scrollLeft ? pos[0] + distance : scrollLeft - tLeft + left;
                        if (tTop < scrollTop) top = scrollTop - tTop + top;                                            // 672
                        if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;
                        break;                                                                                         // 674
                    case 'w':                                                                                          // 675
                        left = pos[0] + distance;                                                                      // 676
                        top = pos[1] - (height / 2);                                                                   // 677
                        tLeft = tooltipLeft(tooltipElem);                                                              // 678
                        tTop = tooltipTop(tooltipElem);                                                                // 679
                        if (tLeft + width > windowWidth) left = pos[0] - width - distance;                             // 680
                        if (tTop < scrollTop) top = scrollTop + 5;                                                     // 681
                        if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;
                        break;                                                                                         // 683
                    case 'n':                                                                                          // 684
                        left = pos[0] - (width / 2) - 5;                                                               // 685
                        top = pos[1] + distance;                                                                       // 686
                        tLeft = tooltipLeft(tooltipElem);                                                              // 687
                        tTop = tooltipTop(tooltipElem);                                                                // 688
                        if (tLeft < scrollLeft) left = scrollLeft + 5;                                                 // 689
                        if (tLeft + width > windowWidth) left = left - width/2 + 5;                                    // 690
                        if (tTop + height > scrollTop + windowHeight) top = scrollTop + windowHeight - tTop + top - height;
                        break;                                                                                         // 692
                    case 's':                                                                                          // 693
                        left = pos[0] - (width / 2);                                                                   // 694
                        top = pos[1] - height - distance;                                                              // 695
                        tLeft = tooltipLeft(tooltipElem);                                                              // 696
                        tTop = tooltipTop(tooltipElem);                                                                // 697
                        if (tLeft < scrollLeft) left = scrollLeft + 5;                                                 // 698
                        if (tLeft + width > windowWidth) left = left - width/2 + 5;                                    // 699
                        if (scrollTop > tTop) top = scrollTop;                                                         // 700
                        break;                                                                                         // 701
                    case 'none':                                                                                       // 702
                        left = pos[0];                                                                                 // 703
                        top = pos[1] - distance;                                                                       // 704
                        tLeft = tooltipLeft(tooltipElem);                                                              // 705
                        tTop = tooltipTop(tooltipElem);                                                                // 706
                        break;                                                                                         // 707
                }                                                                                                      // 708
                                                                                                                       // 709
                // adjust tooltip offsets                                                                              // 710
                left -= offset.left;                                                                                   // 711
                top -= offset.top;                                                                                     // 712
                                                                                                                       // 713
                // using tooltip.style('transform') returns values un-usable for tween                                 // 714
                var box = tooltipElem.getBoundingClientRect();                                                         // 715
                var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;                             // 716
                var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;                            // 717
                var old_translate = 'translate(' + (box.left + scrollLeft) + 'px, ' + (box.top + scrollTop) + 'px)';   // 718
                var new_translate = 'translate(' + left + 'px, ' + top + 'px)';                                        // 719
                var translateInterpolator = d3.interpolateString(old_translate, new_translate);                        // 720
                                                                                                                       // 721
                var is_hidden = tooltip.style('opacity') < 0.1;                                                        // 722
                                                                                                                       // 723
                // delay hiding a bit to avoid flickering                                                              // 724
                if (hidden) {                                                                                          // 725
                    tooltip                                                                                            // 726
                        .transition()                                                                                  // 727
                        .delay(hideDelay)                                                                              // 728
                        .duration(0)                                                                                   // 729
                        .style('opacity', 0);                                                                          // 730
                } else {                                                                                               // 731
                    tooltip                                                                                            // 732
                        .interrupt() // cancel running transitions                                                     // 733
                        .transition()                                                                                  // 734
                        .duration(is_hidden ? 0 : duration)                                                            // 735
                        // using tween since some versions of d3 can't auto-tween a translate on a div                 // 736
                        .styleTween('transform', function (d) {                                                        // 737
                            return translateInterpolator;                                                              // 738
                        }, 'important')                                                                                // 739
                        // Safari has its own `-webkit-transform` and does not support `transform`                     // 740
                        // transform tooltip without transition only in Safari                                         // 741
                        .style('-webkit-transform', new_translate)                                                     // 742
                        .style('-ms-transform', new_translate)                                                         // 743
                        .style('opacity', 1);                                                                          // 744
                }                                                                                                      // 745
                                                                                                                       // 746
                                                                                                                       // 747
                                                                                                                       // 748
            });                                                                                                        // 749
        };                                                                                                             // 750
                                                                                                                       // 751
        //In situations where the chart is in a 'viewBox', re-position the tooltip based on how far chart is zoomed.   // 752
        function convertViewBoxRatio() {                                                                               // 753
            if (chartContainer) {                                                                                      // 754
                var svg = d3.select(chartContainer);                                                                   // 755
                if (svg.node().tagName !== "svg") {                                                                    // 756
                    svg = svg.select("svg");                                                                           // 757
                }                                                                                                      // 758
                var viewBox = (svg.node()) ? svg.attr('viewBox') : null;                                               // 759
                if (viewBox) {                                                                                         // 760
                    viewBox = viewBox.split(' ');                                                                      // 761
                    var ratio = parseInt(svg.style('width'), 10) / viewBox[2];                                         // 762
                                                                                                                       // 763
                    position.left = position.left * ratio;                                                             // 764
                    position.top  = position.top * ratio;                                                              // 765
                }                                                                                                      // 766
            }                                                                                                          // 767
        }                                                                                                              // 768
                                                                                                                       // 769
        //Creates new tooltip container, or uses existing one on DOM.                                                  // 770
        function initTooltip() {                                                                                       // 771
            if (!tooltip) {                                                                                            // 772
                var body;                                                                                              // 773
                if (chartContainer) {                                                                                  // 774
                    body = chartContainer;                                                                             // 775
                } else {                                                                                               // 776
                    body = document.body;                                                                              // 777
                }                                                                                                      // 778
                //Create new tooltip div if it doesn't exist on DOM.                                                   // 779
                tooltip = d3.select(body).append("div")                                                                // 780
                    .attr("class", "nvtooltip " + (classes ? classes : "xy-tooltip"))                                  // 781
                    .attr("id", id);                                                                                   // 782
                tooltip.style("top", 0).style("left", 0);                                                              // 783
                tooltip.style('opacity', 0);                                                                           // 784
                tooltip.selectAll("div, table, td, tr").classed(nvPointerEventsClass, true);                           // 785
                tooltip.classed(nvPointerEventsClass, true);                                                           // 786
                tooltipElem = tooltip.node();                                                                          // 787
            }                                                                                                          // 788
        }                                                                                                              // 789
                                                                                                                       // 790
        //Draw the tooltip onto the DOM.                                                                               // 791
        function nvtooltip() {                                                                                         // 792
            if (!enabled) return;                                                                                      // 793
            if (!dataSeriesExists(data)) return;                                                                       // 794
                                                                                                                       // 795
            convertViewBoxRatio();                                                                                     // 796
                                                                                                                       // 797
            var left = position.left;                                                                                  // 798
            var top = (fixedTop !== null) ? fixedTop : position.top;                                                   // 799
                                                                                                                       // 800
            nv.dom.write(function () {                                                                                 // 801
                initTooltip();                                                                                         // 802
                // generate data and set it into tooltip                                                               // 803
                // Bonus - If you override contentGenerator and return falsey you can use something like               // 804
                //         React or Knockout to bind the data for your tooltip                                         // 805
                var newContent = contentGenerator(data);                                                               // 806
                if (newContent) {                                                                                      // 807
                    tooltipElem.innerHTML = newContent;                                                                // 808
                }                                                                                                      // 809
                                                                                                                       // 810
                if (chartContainer && isInteractiveLayer) {                                                            // 811
                    nv.dom.read(function() {                                                                           // 812
                        var svgComp = chartContainer.getElementsByTagName("svg")[0];                                   // 813
                        var svgOffset = {left:0,top:0};                                                                // 814
                        if (svgComp) {                                                                                 // 815
                            var svgBound = svgComp.getBoundingClientRect();                                            // 816
                            var chartBound = chartContainer.getBoundingClientRect();                                   // 817
                            var svgBoundTop = svgBound.top;                                                            // 818
                                                                                                                       // 819
                            //Defensive code. Sometimes, svgBoundTop can be a really negative                          // 820
                            //  number, like -134254. That's a bug.                                                    // 821
                            //  If such a number is found, use zero instead. FireFox bug only                          // 822
                            if (svgBoundTop < 0) {                                                                     // 823
                                var containerBound = chartContainer.getBoundingClientRect();                           // 824
                                svgBoundTop = (Math.abs(svgBoundTop) > containerBound.height) ? 0 : svgBoundTop;       // 825
                            }                                                                                          // 826
                            svgOffset.top = Math.abs(svgBoundTop - chartBound.top);                                    // 827
                            svgOffset.left = Math.abs(svgBound.left - chartBound.left);                                // 828
                        }                                                                                              // 829
                        //If the parent container is an overflow <div> with scrollbars, subtract the scroll offsets.   // 830
                        //You need to also add any offset between the <svg> element and its containing <div>           // 831
                        //Finally, add any offset of the containing <div> on the whole page.                           // 832
                        left += chartContainer.offsetLeft + svgOffset.left - 2*chartContainer.scrollLeft;              // 833
                        top += chartContainer.offsetTop + svgOffset.top - 2*chartContainer.scrollTop;                  // 834
                                                                                                                       // 835
                        if (snapDistance && snapDistance > 0) {                                                        // 836
                            top = Math.floor(top/snapDistance) * snapDistance;                                         // 837
                        }                                                                                              // 838
                        calcTooltipPosition([left,top]);                                                               // 839
                    });                                                                                                // 840
                } else {                                                                                               // 841
                    calcTooltipPosition([left,top]);                                                                   // 842
                }                                                                                                      // 843
            });                                                                                                        // 844
                                                                                                                       // 845
            return nvtooltip;                                                                                          // 846
        }                                                                                                              // 847
                                                                                                                       // 848
        nvtooltip.nvPointerEventsClass = nvPointerEventsClass;                                                         // 849
        nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);                                                      // 850
                                                                                                                       // 851
        nvtooltip._options = Object.create({}, {                                                                       // 852
            // simple read/write options                                                                               // 853
            duration: {get: function(){return duration;}, set: function(_){duration=_;}},                              // 854
            gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},                                 // 855
            distance: {get: function(){return distance;}, set: function(_){distance=_;}},                              // 856
            snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},                  // 857
            classes: {get: function(){return classes;}, set: function(_){classes=_;}},                                 // 858
            chartContainer: {get: function(){return chartContainer;}, set: function(_){chartContainer=_;}},            // 859
            fixedTop: {get: function(){return fixedTop;}, set: function(_){fixedTop=_;}},                              // 860
            enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},                                 // 861
            hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},                           // 862
            contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},      // 863
            valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},            // 864
            headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},         // 865
            keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},                  // 866
            headerEnabled:   {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},             // 867
                                                                                                                       // 868
            // internal use only, set by interactive layer to adjust position.                                         // 869
            _isInteractiveLayer: {get: function(){return isInteractiveLayer;}, set: function(_){isInteractiveLayer=!!_;}},
                                                                                                                       // 871
            // options with extra logic                                                                                // 872
            position: {get: function(){return position;}, set: function(_){                                            // 873
                position.left = _.left !== undefined ? _.left : position.left;                                         // 874
                position.top  = _.top  !== undefined ? _.top  : position.top;                                          // 875
            }},                                                                                                        // 876
            offset: {get: function(){return offset;}, set: function(_){                                                // 877
                offset.left = _.left !== undefined ? _.left : offset.left;                                             // 878
                offset.top  = _.top  !== undefined ? _.top  : offset.top;                                              // 879
            }},                                                                                                        // 880
            hidden: {get: function(){return hidden;}, set: function(_){                                                // 881
                if (hidden != _) {                                                                                     // 882
                    hidden = !!_;                                                                                      // 883
                    nvtooltip();                                                                                       // 884
                }                                                                                                      // 885
            }},                                                                                                        // 886
            data: {get: function(){return data;}, set: function(_){                                                    // 887
                // if showing a single data point, adjust data format with that                                        // 888
                if (_.point) {                                                                                         // 889
                    _.value = _.point.x;                                                                               // 890
                    _.series = _.series || {};                                                                         // 891
                    _.series.value = _.point.y;                                                                        // 892
                    _.series.color = _.point.color || _.series.color;                                                  // 893
                }                                                                                                      // 894
                data = _;                                                                                              // 895
            }},                                                                                                        // 896
                                                                                                                       // 897
            // read only properties                                                                                    // 898
            tooltipElem: {get: function(){return tooltipElem;}, set: function(_){}},                                   // 899
            id: {get: function(){return id;}, set: function(_){}}                                                      // 900
        });                                                                                                            // 901
                                                                                                                       // 902
        nv.utils.initOptions(nvtooltip);                                                                               // 903
        return nvtooltip;                                                                                              // 904
    };                                                                                                                 // 905
                                                                                                                       // 906
})();                                                                                                                  // 907
                                                                                                                       // 908
                                                                                                                       // 909
/*                                                                                                                     // 910
Gets the browser window size                                                                                           // 911
                                                                                                                       // 912
Returns object with height and width properties                                                                        // 913
 */                                                                                                                    // 914
nv.utils.windowSize = function() {                                                                                     // 915
    // Sane defaults                                                                                                   // 916
    var size = {width: 640, height: 480};                                                                              // 917
                                                                                                                       // 918
    // Most recent browsers use                                                                                        // 919
    if (window.innerWidth && window.innerHeight) {                                                                     // 920
        size.width = window.innerWidth;                                                                                // 921
        size.height = window.innerHeight;                                                                              // 922
        return (size);                                                                                                 // 923
    }                                                                                                                  // 924
                                                                                                                       // 925
    // IE can use depending on mode it is in                                                                           // 926
    if (document.compatMode=='CSS1Compat' &&                                                                           // 927
        document.documentElement &&                                                                                    // 928
        document.documentElement.offsetWidth ) {                                                                       // 929
                                                                                                                       // 930
        size.width = document.documentElement.offsetWidth;                                                             // 931
        size.height = document.documentElement.offsetHeight;                                                           // 932
        return (size);                                                                                                 // 933
    }                                                                                                                  // 934
                                                                                                                       // 935
    // Earlier IE uses Doc.body                                                                                        // 936
    if (document.body && document.body.offsetWidth) {                                                                  // 937
        size.width = document.body.offsetWidth;                                                                        // 938
        size.height = document.body.offsetHeight;                                                                      // 939
        return (size);                                                                                                 // 940
    }                                                                                                                  // 941
                                                                                                                       // 942
    return (size);                                                                                                     // 943
};                                                                                                                     // 944
                                                                                                                       // 945
/*                                                                                                                     // 946
Binds callback function to run when window is resized                                                                  // 947
 */                                                                                                                    // 948
nv.utils.windowResize = function(handler) {                                                                            // 949
    if (window.addEventListener) {                                                                                     // 950
        window.addEventListener('resize', handler);                                                                    // 951
    } else {                                                                                                           // 952
        nv.log("ERROR: Failed to bind to window.resize with: ", handler);                                              // 953
    }                                                                                                                  // 954
    // return object with clear function to remove the single added callback.                                          // 955
    return {                                                                                                           // 956
        callback: handler,                                                                                             // 957
        clear: function() {                                                                                            // 958
            window.removeEventListener('resize', handler);                                                             // 959
        }                                                                                                              // 960
    }                                                                                                                  // 961
};                                                                                                                     // 962
                                                                                                                       // 963
                                                                                                                       // 964
/*                                                                                                                     // 965
Backwards compatible way to implement more d3-like coloring of graphs.                                                 // 966
Can take in nothing, an array, or a function/scale                                                                     // 967
To use a normal scale, get the range and pass that because we must be able                                             // 968
to take two arguments and use the index to keep backward compatibility                                                 // 969
*/                                                                                                                     // 970
nv.utils.getColor = function(color) {                                                                                  // 971
    //if you pass in nothing, get default colors back                                                                  // 972
    if (color === undefined) {                                                                                         // 973
        return nv.utils.defaultColor();                                                                                // 974
                                                                                                                       // 975
    //if passed an array, turn it into a color scale                                                                   // 976
    // use isArray, instanceof fails if d3 range is created in an iframe                                               // 977
    } else if(Array.isArray(color)) {                                                                                  // 978
        var color_scale = d3.scale.ordinal().range(color);                                                             // 979
        return function(d, i) {                                                                                        // 980
            var key = i === undefined ? d : i;                                                                         // 981
            return d.color || color_scale(key);                                                                        // 982
        };                                                                                                             // 983
                                                                                                                       // 984
    //if passed a function or scale, return it, or whatever it may be                                                  // 985
    //external libs, such as angularjs-nvd3-directives use this                                                        // 986
    } else {                                                                                                           // 987
        //can't really help it if someone passes rubbish as color                                                      // 988
        return color;                                                                                                  // 989
    }                                                                                                                  // 990
};                                                                                                                     // 991
                                                                                                                       // 992
                                                                                                                       // 993
/*                                                                                                                     // 994
Default color chooser uses a color scale of 20 colors from D3                                                          // 995
 https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors                                                 // 996
 */                                                                                                                    // 997
nv.utils.defaultColor = function() {                                                                                   // 998
    // get range of the scale so we'll turn it into our own function.                                                  // 999
    return nv.utils.getColor(d3.scale.category20().range());                                                           // 1000
};                                                                                                                     // 1001
                                                                                                                       // 1002
                                                                                                                       // 1003
/*                                                                                                                     // 1004
Returns a color function that takes the result of 'getKey' for each series and                                         // 1005
looks for a corresponding color from the dictionary                                                                    // 1006
*/                                                                                                                     // 1007
nv.utils.customTheme = function(dictionary, getKey, defaultColors) {                                                   // 1008
    // use default series.key if getKey is undefined                                                                   // 1009
    getKey = getKey || function(series) { return series.key };                                                         // 1010
    defaultColors = defaultColors || d3.scale.category20().range();                                                    // 1011
                                                                                                                       // 1012
    // start at end of default color list and walk back to index 0                                                     // 1013
    var defIndex = defaultColors.length;                                                                               // 1014
                                                                                                                       // 1015
    return function(series, index) {                                                                                   // 1016
        var key = getKey(series);                                                                                      // 1017
        if (typeof dictionary[key] === 'function') {                                                                   // 1018
            return dictionary[key]();                                                                                  // 1019
        } else if (dictionary[key] !== undefined) {                                                                    // 1020
            return dictionary[key];                                                                                    // 1021
        } else {                                                                                                       // 1022
            // no match in dictionary, use a default color                                                             // 1023
            if (!defIndex) {                                                                                           // 1024
                // used all the default colors, start over                                                             // 1025
                defIndex = defaultColors.length;                                                                       // 1026
            }                                                                                                          // 1027
            defIndex = defIndex - 1;                                                                                   // 1028
            return defaultColors[defIndex];                                                                            // 1029
        }                                                                                                              // 1030
    };                                                                                                                 // 1031
};                                                                                                                     // 1032
                                                                                                                       // 1033
                                                                                                                       // 1034
/*                                                                                                                     // 1035
From the PJAX example on d3js.org, while this is not really directly needed                                            // 1036
it's a very cool method for doing pjax, I may expand upon it a little bit,                                             // 1037
open to suggestions on anything that may be useful                                                                     // 1038
*/                                                                                                                     // 1039
nv.utils.pjax = function(links, content) {                                                                             // 1040
                                                                                                                       // 1041
    var load = function(href) {                                                                                        // 1042
        d3.html(href, function(fragment) {                                                                             // 1043
            var target = d3.select(content).node();                                                                    // 1044
            target.parentNode.replaceChild(                                                                            // 1045
                d3.select(fragment).select(content).node(),                                                            // 1046
                target);                                                                                               // 1047
            nv.utils.pjax(links, content);                                                                             // 1048
        });                                                                                                            // 1049
    };                                                                                                                 // 1050
                                                                                                                       // 1051
    d3.selectAll(links).on("click", function() {                                                                       // 1052
        history.pushState(this.href, this.textContent, this.href);                                                     // 1053
        load(this.href);                                                                                               // 1054
        d3.event.preventDefault();                                                                                     // 1055
    });                                                                                                                // 1056
                                                                                                                       // 1057
    d3.select(window).on("popstate", function() {                                                                      // 1058
        if (d3.event.state) {                                                                                          // 1059
            load(d3.event.state);                                                                                      // 1060
        }                                                                                                              // 1061
    });                                                                                                                // 1062
};                                                                                                                     // 1063
                                                                                                                       // 1064
                                                                                                                       // 1065
/*                                                                                                                     // 1066
For when we want to approximate the width in pixels for an SVG:text element.                                           // 1067
Most common instance is when the element is in a display:none; container.                                              // 1068
Forumla is : text.length * font-size * constant_factor                                                                 // 1069
*/                                                                                                                     // 1070
nv.utils.calcApproxTextWidth = function (svgTextElem) {                                                                // 1071
    if (typeof svgTextElem.style === 'function'                                                                        // 1072
        && typeof svgTextElem.text === 'function') {                                                                   // 1073
                                                                                                                       // 1074
        var fontSize = parseInt(svgTextElem.style("font-size").replace("px",""), 10);                                  // 1075
        var textLength = svgTextElem.text().length;                                                                    // 1076
        return textLength * fontSize * 0.5;                                                                            // 1077
    }                                                                                                                  // 1078
    return 0;                                                                                                          // 1079
};                                                                                                                     // 1080
                                                                                                                       // 1081
                                                                                                                       // 1082
/*                                                                                                                     // 1083
Numbers that are undefined, null or NaN, convert them to zeros.                                                        // 1084
*/                                                                                                                     // 1085
nv.utils.NaNtoZero = function(n) {                                                                                     // 1086
    if (typeof n !== 'number'                                                                                          // 1087
        || isNaN(n)                                                                                                    // 1088
        || n === null                                                                                                  // 1089
        || n === Infinity                                                                                              // 1090
        || n === -Infinity) {                                                                                          // 1091
                                                                                                                       // 1092
        return 0;                                                                                                      // 1093
    }                                                                                                                  // 1094
    return n;                                                                                                          // 1095
};                                                                                                                     // 1096
                                                                                                                       // 1097
/*                                                                                                                     // 1098
Add a way to watch for d3 transition ends to d3                                                                        // 1099
*/                                                                                                                     // 1100
d3.selection.prototype.watchTransition = function(renderWatch){                                                        // 1101
    var args = [this].concat([].slice.call(arguments, 1));                                                             // 1102
    return renderWatch.transition.apply(renderWatch, args);                                                            // 1103
};                                                                                                                     // 1104
                                                                                                                       // 1105
                                                                                                                       // 1106
/*                                                                                                                     // 1107
Helper object to watch when d3 has rendered something                                                                  // 1108
*/                                                                                                                     // 1109
nv.utils.renderWatch = function(dispatch, duration) {                                                                  // 1110
    if (!(this instanceof nv.utils.renderWatch)) {                                                                     // 1111
        return new nv.utils.renderWatch(dispatch, duration);                                                           // 1112
    }                                                                                                                  // 1113
                                                                                                                       // 1114
    var _duration = duration !== undefined ? duration : 250;                                                           // 1115
    var renderStack = [];                                                                                              // 1116
    var self = this;                                                                                                   // 1117
                                                                                                                       // 1118
    this.models = function(models) {                                                                                   // 1119
        models = [].slice.call(arguments, 0);                                                                          // 1120
        models.forEach(function(model){                                                                                // 1121
            model.__rendered = false;                                                                                  // 1122
            (function(m){                                                                                              // 1123
                m.dispatch.on('renderEnd', function(arg){                                                              // 1124
                    m.__rendered = true;                                                                               // 1125
                    self.renderEnd('model');                                                                           // 1126
                });                                                                                                    // 1127
            })(model);                                                                                                 // 1128
                                                                                                                       // 1129
            if (renderStack.indexOf(model) < 0) {                                                                      // 1130
                renderStack.push(model);                                                                               // 1131
            }                                                                                                          // 1132
        });                                                                                                            // 1133
    return this;                                                                                                       // 1134
    };                                                                                                                 // 1135
                                                                                                                       // 1136
    this.reset = function(duration) {                                                                                  // 1137
        if (duration !== undefined) {                                                                                  // 1138
            _duration = duration;                                                                                      // 1139
        }                                                                                                              // 1140
        renderStack = [];                                                                                              // 1141
    };                                                                                                                 // 1142
                                                                                                                       // 1143
    this.transition = function(selection, args, duration) {                                                            // 1144
        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];                                                // 1145
                                                                                                                       // 1146
        if (args.length > 1) {                                                                                         // 1147
            duration = args.pop();                                                                                     // 1148
        } else {                                                                                                       // 1149
            duration = _duration !== undefined ? _duration : 250;                                                      // 1150
        }                                                                                                              // 1151
        selection.__rendered = false;                                                                                  // 1152
                                                                                                                       // 1153
        if (renderStack.indexOf(selection) < 0) {                                                                      // 1154
            renderStack.push(selection);                                                                               // 1155
        }                                                                                                              // 1156
                                                                                                                       // 1157
        if (duration === 0) {                                                                                          // 1158
            selection.__rendered = true;                                                                               // 1159
            selection.delay = function() { return this; };                                                             // 1160
            selection.duration = function() { return this; };                                                          // 1161
            return selection;                                                                                          // 1162
        } else {                                                                                                       // 1163
            if (selection.length === 0) {                                                                              // 1164
                selection.__rendered = true;                                                                           // 1165
            } else if (selection.every( function(d){ return !d.length; } )) {                                          // 1166
                selection.__rendered = true;                                                                           // 1167
            } else {                                                                                                   // 1168
                selection.__rendered = false;                                                                          // 1169
            }                                                                                                          // 1170
                                                                                                                       // 1171
            var n = 0;                                                                                                 // 1172
            return selection                                                                                           // 1173
                .transition()                                                                                          // 1174
                .duration(duration)                                                                                    // 1175
                .each(function(){ ++n; })                                                                              // 1176
                .each('end', function(d, i) {                                                                          // 1177
                    if (--n === 0) {                                                                                   // 1178
                        selection.__rendered = true;                                                                   // 1179
                        self.renderEnd.apply(this, args);                                                              // 1180
                    }                                                                                                  // 1181
                });                                                                                                    // 1182
        }                                                                                                              // 1183
    };                                                                                                                 // 1184
                                                                                                                       // 1185
    this.renderEnd = function() {                                                                                      // 1186
        if (renderStack.every( function(d){ return d.__rendered; } )) {                                                // 1187
            renderStack.forEach( function(d){ d.__rendered = false; });                                                // 1188
            dispatch.renderEnd.apply(this, arguments);                                                                 // 1189
        }                                                                                                              // 1190
    }                                                                                                                  // 1191
                                                                                                                       // 1192
};                                                                                                                     // 1193
                                                                                                                       // 1194
                                                                                                                       // 1195
/*                                                                                                                     // 1196
Takes multiple objects and combines them into the first one (dst)                                                      // 1197
example:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});                                                           // 1198
gives:  {a: 2, b: 3, c: 4}                                                                                             // 1199
*/                                                                                                                     // 1200
nv.utils.deepExtend = function(dst){                                                                                   // 1201
    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];                                             // 1202
    sources.forEach(function(source) {                                                                                 // 1203
        for (var key in source) {                                                                                      // 1204
            var isArray = dst[key] instanceof Array;                                                                   // 1205
            var isObject = typeof dst[key] === 'object';                                                               // 1206
            var srcObj = typeof source[key] === 'object';                                                              // 1207
                                                                                                                       // 1208
            if (isObject && !isArray && srcObj) {                                                                      // 1209
                nv.utils.deepExtend(dst[key], source[key]);                                                            // 1210
            } else {                                                                                                   // 1211
                dst[key] = source[key];                                                                                // 1212
            }                                                                                                          // 1213
        }                                                                                                              // 1214
    });                                                                                                                // 1215
};                                                                                                                     // 1216
                                                                                                                       // 1217
                                                                                                                       // 1218
/*                                                                                                                     // 1219
state utility object, used to track d3 states in the models                                                            // 1220
*/                                                                                                                     // 1221
nv.utils.state = function(){                                                                                           // 1222
    if (!(this instanceof nv.utils.state)) {                                                                           // 1223
        return new nv.utils.state();                                                                                   // 1224
    }                                                                                                                  // 1225
    var state = {};                                                                                                    // 1226
    var _self = this;                                                                                                  // 1227
    var _setState = function(){};                                                                                      // 1228
    var _getState = function(){ return {}; };                                                                          // 1229
    var init = null;                                                                                                   // 1230
    var changed = null;                                                                                                // 1231
                                                                                                                       // 1232
    this.dispatch = d3.dispatch('change', 'set');                                                                      // 1233
                                                                                                                       // 1234
    this.dispatch.on('set', function(state){                                                                           // 1235
        _setState(state, true);                                                                                        // 1236
    });                                                                                                                // 1237
                                                                                                                       // 1238
    this.getter = function(fn){                                                                                        // 1239
        _getState = fn;                                                                                                // 1240
        return this;                                                                                                   // 1241
    };                                                                                                                 // 1242
                                                                                                                       // 1243
    this.setter = function(fn, callback) {                                                                             // 1244
        if (!callback) {                                                                                               // 1245
            callback = function(){};                                                                                   // 1246
        }                                                                                                              // 1247
        _setState = function(state, update){                                                                           // 1248
            fn(state);                                                                                                 // 1249
            if (update) {                                                                                              // 1250
                callback();                                                                                            // 1251
            }                                                                                                          // 1252
        };                                                                                                             // 1253
        return this;                                                                                                   // 1254
    };                                                                                                                 // 1255
                                                                                                                       // 1256
    this.init = function(state){                                                                                       // 1257
        init = init || {};                                                                                             // 1258
        nv.utils.deepExtend(init, state);                                                                              // 1259
    };                                                                                                                 // 1260
                                                                                                                       // 1261
    var _set = function(){                                                                                             // 1262
        var settings = _getState();                                                                                    // 1263
                                                                                                                       // 1264
        if (JSON.stringify(settings) === JSON.stringify(state)) {                                                      // 1265
            return false;                                                                                              // 1266
        }                                                                                                              // 1267
                                                                                                                       // 1268
        for (var key in settings) {                                                                                    // 1269
            if (state[key] === undefined) {                                                                            // 1270
                state[key] = {};                                                                                       // 1271
            }                                                                                                          // 1272
            state[key] = settings[key];                                                                                // 1273
            changed = true;                                                                                            // 1274
        }                                                                                                              // 1275
        return true;                                                                                                   // 1276
    };                                                                                                                 // 1277
                                                                                                                       // 1278
    this.update = function(){                                                                                          // 1279
        if (init) {                                                                                                    // 1280
            _setState(init, false);                                                                                    // 1281
            init = null;                                                                                               // 1282
        }                                                                                                              // 1283
        if (_set.call(this)) {                                                                                         // 1284
            this.dispatch.change(state);                                                                               // 1285
        }                                                                                                              // 1286
    };                                                                                                                 // 1287
                                                                                                                       // 1288
};                                                                                                                     // 1289
                                                                                                                       // 1290
                                                                                                                       // 1291
/*                                                                                                                     // 1292
Snippet of code you can insert into each nv.models.* to give you the ability to                                        // 1293
do things like:                                                                                                        // 1294
chart.options({                                                                                                        // 1295
  showXAxis: true,                                                                                                     // 1296
  tooltips: true                                                                                                       // 1297
});                                                                                                                    // 1298
                                                                                                                       // 1299
To enable in the chart:                                                                                                // 1300
chart.options = nv.utils.optionsFunc.bind(chart);                                                                      // 1301
*/                                                                                                                     // 1302
nv.utils.optionsFunc = function(args) {                                                                                // 1303
    if (args) {                                                                                                        // 1304
        d3.map(args).forEach((function(key,value) {                                                                    // 1305
            if (typeof this[key] === "function") {                                                                     // 1306
                this[key](value);                                                                                      // 1307
            }                                                                                                          // 1308
        }).bind(this));                                                                                                // 1309
    }                                                                                                                  // 1310
    return this;                                                                                                       // 1311
};                                                                                                                     // 1312
                                                                                                                       // 1313
                                                                                                                       // 1314
/*                                                                                                                     // 1315
numTicks:  requested number of ticks                                                                                   // 1316
data:  the chart data                                                                                                  // 1317
                                                                                                                       // 1318
returns the number of ticks to actually use on X axis, based on chart data                                             // 1319
to avoid duplicate ticks with the same value                                                                           // 1320
*/                                                                                                                     // 1321
nv.utils.calcTicksX = function(numTicks, data) {                                                                       // 1322
    // find max number of values from all data streams                                                                 // 1323
    var numValues = 1;                                                                                                 // 1324
    var i = 0;                                                                                                         // 1325
    for (i; i < data.length; i += 1) {                                                                                 // 1326
        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;                                        // 1327
        numValues = stream_len > numValues ? stream_len : numValues;                                                   // 1328
    }                                                                                                                  // 1329
    nv.log("Requested number of ticks: ", numTicks);                                                                   // 1330
    nv.log("Calculated max values to be: ", numValues);                                                                // 1331
    // make sure we don't have more ticks than values to avoid duplicates                                              // 1332
    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;                                             // 1333
    // make sure we have at least one tick                                                                             // 1334
    numTicks = numTicks < 1 ? 1 : numTicks;                                                                            // 1335
    // make sure it's an integer                                                                                       // 1336
    numTicks = Math.floor(numTicks);                                                                                   // 1337
    nv.log("Calculating tick count as: ", numTicks);                                                                   // 1338
    return numTicks;                                                                                                   // 1339
};                                                                                                                     // 1340
                                                                                                                       // 1341
                                                                                                                       // 1342
/*                                                                                                                     // 1343
returns number of ticks to actually use on Y axis, based on chart data                                                 // 1344
*/                                                                                                                     // 1345
nv.utils.calcTicksY = function(numTicks, data) {                                                                       // 1346
    // currently uses the same logic but we can adjust here if needed later                                            // 1347
    return nv.utils.calcTicksX(numTicks, data);                                                                        // 1348
};                                                                                                                     // 1349
                                                                                                                       // 1350
                                                                                                                       // 1351
/*                                                                                                                     // 1352
Add a particular option from an options object onto chart                                                              // 1353
Options exposed on a chart are a getter/setter function that returns chart                                             // 1354
on set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');                                        // 1355
                                                                                                                       // 1356
option objects should be generated via Object.create() to provide                                                      // 1357
the option of manipulating data via get/set functions.                                                                 // 1358
*/                                                                                                                     // 1359
nv.utils.initOption = function(chart, name) {                                                                          // 1360
    // if it's a call option, just call it directly, otherwise do get/set                                              // 1361
    if (chart._calls && chart._calls[name]) {                                                                          // 1362
        chart[name] = chart._calls[name];                                                                              // 1363
    } else {                                                                                                           // 1364
        chart[name] = function (_) {                                                                                   // 1365
            if (!arguments.length) return chart._options[name];                                                        // 1366
            chart._overrides[name] = true;                                                                             // 1367
            chart._options[name] = _;                                                                                  // 1368
            return chart;                                                                                              // 1369
        };                                                                                                             // 1370
        // calling the option as _option will ignore if set by option already                                          // 1371
        // so nvd3 can set options internally but the stop if set manually                                             // 1372
        chart['_' + name] = function(_) {                                                                              // 1373
            if (!arguments.length) return chart._options[name];                                                        // 1374
            if (!chart._overrides[name]) {                                                                             // 1375
                chart._options[name] = _;                                                                              // 1376
            }                                                                                                          // 1377
            return chart;                                                                                              // 1378
        }                                                                                                              // 1379
    }                                                                                                                  // 1380
};                                                                                                                     // 1381
                                                                                                                       // 1382
                                                                                                                       // 1383
/*                                                                                                                     // 1384
Add all options in an options object to the chart                                                                      // 1385
*/                                                                                                                     // 1386
nv.utils.initOptions = function(chart) {                                                                               // 1387
    chart._overrides = chart._overrides || {};                                                                         // 1388
    var ops = Object.getOwnPropertyNames(chart._options || {});                                                        // 1389
    var calls = Object.getOwnPropertyNames(chart._calls || {});                                                        // 1390
    ops = ops.concat(calls);                                                                                           // 1391
    for (var i in ops) {                                                                                               // 1392
        nv.utils.initOption(chart, ops[i]);                                                                            // 1393
    }                                                                                                                  // 1394
};                                                                                                                     // 1395
                                                                                                                       // 1396
                                                                                                                       // 1397
/*                                                                                                                     // 1398
Inherit options from a D3 object                                                                                       // 1399
d3.rebind makes calling the function on target actually call it on source                                              // 1400
Also use _d3options so we can track what we inherit for documentation and chained inheritance                          // 1401
*/                                                                                                                     // 1402
nv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {                                                      // 1403
    target._d3options = oplist.concat(target._d3options || []);                                                        // 1404
    oplist.unshift(d3_source);                                                                                         // 1405
    oplist.unshift(target);                                                                                            // 1406
    d3.rebind.apply(this, oplist);                                                                                     // 1407
};                                                                                                                     // 1408
                                                                                                                       // 1409
                                                                                                                       // 1410
/*                                                                                                                     // 1411
Remove duplicates from an array                                                                                        // 1412
*/                                                                                                                     // 1413
nv.utils.arrayUnique = function(a) {                                                                                   // 1414
    return a.sort().filter(function(item, pos) {                                                                       // 1415
        return !pos || item != a[pos - 1];                                                                             // 1416
    });                                                                                                                // 1417
};                                                                                                                     // 1418
                                                                                                                       // 1419
                                                                                                                       // 1420
/*                                                                                                                     // 1421
Keeps a list of custom symbols to draw from in addition to d3.svg.symbol                                               // 1422
Necessary since d3 doesn't let you extend its list -_-                                                                 // 1423
Add new symbols by doing nv.utils.symbols.set('name', function(size){...});                                            // 1424
*/                                                                                                                     // 1425
nv.utils.symbolMap = d3.map();                                                                                         // 1426
                                                                                                                       // 1427
                                                                                                                       // 1428
/*                                                                                                                     // 1429
Replaces d3.svg.symbol so that we can look both there and our own map                                                  // 1430
 */                                                                                                                    // 1431
nv.utils.symbol = function() {                                                                                         // 1432
    var type,                                                                                                          // 1433
        size = 64;                                                                                                     // 1434
    function symbol(d,i) {                                                                                             // 1435
        var t = type.call(this,d,i);                                                                                   // 1436
        var s = size.call(this,d,i);                                                                                   // 1437
        if (d3.svg.symbolTypes.indexOf(t) !== -1) {                                                                    // 1438
            return d3.svg.symbol().type(t).size(s)();                                                                  // 1439
        } else {                                                                                                       // 1440
            return nv.utils.symbolMap.get(t)(s);                                                                       // 1441
        }                                                                                                              // 1442
    }                                                                                                                  // 1443
    symbol.type = function(_) {                                                                                        // 1444
        if (!arguments.length) return type;                                                                            // 1445
        type = d3.functor(_);                                                                                          // 1446
        return symbol;                                                                                                 // 1447
    };                                                                                                                 // 1448
    symbol.size = function(_) {                                                                                        // 1449
        if (!arguments.length) return size;                                                                            // 1450
        size = d3.functor(_);                                                                                          // 1451
        return symbol;                                                                                                 // 1452
    };                                                                                                                 // 1453
    return symbol;                                                                                                     // 1454
};                                                                                                                     // 1455
                                                                                                                       // 1456
                                                                                                                       // 1457
/*                                                                                                                     // 1458
Inherit option getter/setter functions from source to target                                                           // 1459
d3.rebind makes calling the function on target actually call it on source                                              // 1460
Also track via _inherited and _d3options so we can track what we inherit                                               // 1461
for documentation generation purposes and chained inheritance                                                          // 1462
*/                                                                                                                     // 1463
nv.utils.inheritOptions = function(target, source) {                                                                   // 1464
    // inherit all the things                                                                                          // 1465
    var ops = Object.getOwnPropertyNames(source._options || {});                                                       // 1466
    var calls = Object.getOwnPropertyNames(source._calls || {});                                                       // 1467
    var inherited = source._inherited || [];                                                                           // 1468
    var d3ops = source._d3options || [];                                                                               // 1469
    var args = ops.concat(calls).concat(inherited).concat(d3ops);                                                      // 1470
    args.unshift(source);                                                                                              // 1471
    args.unshift(target);                                                                                              // 1472
    d3.rebind.apply(this, args);                                                                                       // 1473
    // pass along the lists to keep track of them, don't allow duplicates                                              // 1474
    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));
    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));                                   // 1476
};                                                                                                                     // 1477
                                                                                                                       // 1478
                                                                                                                       // 1479
/*                                                                                                                     // 1480
Runs common initialize code on the svg before the chart builds                                                         // 1481
*/                                                                                                                     // 1482
nv.utils.initSVG = function(svg) {                                                                                     // 1483
    svg.classed({'nvd3-svg':true});                                                                                    // 1484
};                                                                                                                     // 1485
                                                                                                                       // 1486
                                                                                                                       // 1487
/*                                                                                                                     // 1488
Sanitize and provide default for the container height.                                                                 // 1489
*/                                                                                                                     // 1490
nv.utils.sanitizeHeight = function(height, container) {                                                                // 1491
    return (height || parseInt(container.style('height'), 10) || 400);                                                 // 1492
};                                                                                                                     // 1493
                                                                                                                       // 1494
                                                                                                                       // 1495
/*                                                                                                                     // 1496
Sanitize and provide default for the container width.                                                                  // 1497
*/                                                                                                                     // 1498
nv.utils.sanitizeWidth = function(width, container) {                                                                  // 1499
    return (width || parseInt(container.style('width'), 10) || 960);                                                   // 1500
};                                                                                                                     // 1501
                                                                                                                       // 1502
                                                                                                                       // 1503
/*                                                                                                                     // 1504
Calculate the available height for a chart.                                                                            // 1505
*/                                                                                                                     // 1506
nv.utils.availableHeight = function(height, container, margin) {                                                       // 1507
    return nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom;                                    // 1508
};                                                                                                                     // 1509
                                                                                                                       // 1510
/*                                                                                                                     // 1511
Calculate the available width for a chart.                                                                             // 1512
*/                                                                                                                     // 1513
nv.utils.availableWidth = function(width, container, margin) {                                                         // 1514
    return nv.utils.sanitizeWidth(width, container) - margin.left - margin.right;                                      // 1515
};                                                                                                                     // 1516
                                                                                                                       // 1517
/*                                                                                                                     // 1518
Clear any rendered chart components and display a chart's 'noData' message                                             // 1519
*/                                                                                                                     // 1520
nv.utils.noData = function(chart, container) {                                                                         // 1521
    var opt = chart.options(),                                                                                         // 1522
        margin = opt.margin(),                                                                                         // 1523
        noData = opt.noData(),                                                                                         // 1524
        data = (noData == null) ? ["No Data Available."] : [noData],                                                   // 1525
        height = nv.utils.availableHeight(null, container, margin),                                                    // 1526
        width = nv.utils.availableWidth(null, container, margin),                                                      // 1527
        x = margin.left + width/2,                                                                                     // 1528
        y = margin.top + height/2;                                                                                     // 1529
                                                                                                                       // 1530
    //Remove any previously created chart components                                                                   // 1531
    container.selectAll('g').remove();                                                                                 // 1532
                                                                                                                       // 1533
    var noDataText = container.selectAll('.nv-noData').data(data);                                                     // 1534
                                                                                                                       // 1535
    noDataText.enter().append('text')                                                                                  // 1536
        .attr('class', 'nvd3 nv-noData')                                                                               // 1537
        .attr('dy', '-.7em')                                                                                           // 1538
        .style('text-anchor', 'middle');                                                                               // 1539
                                                                                                                       // 1540
    noDataText                                                                                                         // 1541
        .attr('x', x)                                                                                                  // 1542
        .attr('y', y)                                                                                                  // 1543
        .text(function(t){ return t; });                                                                               // 1544
};                                                                                                                     // 1545
nv.models.axis = function() {                                                                                          // 1546
    "use strict";                                                                                                      // 1547
                                                                                                                       // 1548
    //============================================================                                                     // 1549
    // Public Variables with Default Settings                                                                          // 1550
    //------------------------------------------------------------                                                     // 1551
                                                                                                                       // 1552
    var axis = d3.svg.axis();                                                                                          // 1553
    var scale = d3.scale.linear();                                                                                     // 1554
                                                                                                                       // 1555
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 1556
        , width = 75 //only used for tickLabel currently                                                               // 1557
        , height = 60 //only used for tickLabel currently                                                              // 1558
        , axisLabelText = null                                                                                         // 1559
        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes                           // 1560
        , rotateLabels = 0                                                                                             // 1561
        , rotateYLabel = true                                                                                          // 1562
        , staggerLabels = false                                                                                        // 1563
        , isOrdinal = false                                                                                            // 1564
        , ticks = null                                                                                                 // 1565
        , axisLabelDistance = 0                                                                                        // 1566
        , duration = 250                                                                                               // 1567
        , dispatch = d3.dispatch('renderEnd')                                                                          // 1568
        ;                                                                                                              // 1569
    axis                                                                                                               // 1570
        .scale(scale)                                                                                                  // 1571
        .orient('bottom')                                                                                              // 1572
        .tickFormat(function(d) { return d })                                                                          // 1573
    ;                                                                                                                  // 1574
                                                                                                                       // 1575
    //============================================================                                                     // 1576
    // Private Variables                                                                                               // 1577
    //------------------------------------------------------------                                                     // 1578
                                                                                                                       // 1579
    var scale0;                                                                                                        // 1580
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 1581
                                                                                                                       // 1582
    function chart(selection) {                                                                                        // 1583
        renderWatch.reset();                                                                                           // 1584
        selection.each(function(data) {                                                                                // 1585
            var container = d3.select(this);                                                                           // 1586
            nv.utils.initSVG(container);                                                                               // 1587
                                                                                                                       // 1588
            // Setup containers and skeleton of chart                                                                  // 1589
            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);                                          // 1590
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');                            // 1591
            var gEnter = wrapEnter.append('g');                                                                        // 1592
            var g = wrap.select('g');                                                                                  // 1593
                                                                                                                       // 1594
            if (ticks !== null)                                                                                        // 1595
                axis.ticks(ticks);                                                                                     // 1596
            else if (axis.orient() == 'top' || axis.orient() == 'bottom')                                              // 1597
                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);                                       // 1598
                                                                                                                       // 1599
            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component
            g.watchTransition(renderWatch, 'axis').call(axis);                                                         // 1601
                                                                                                                       // 1602
            scale0 = scale0 || axis.scale();                                                                           // 1603
                                                                                                                       // 1604
            var fmt = axis.tickFormat();                                                                               // 1605
            if (fmt == null) {                                                                                         // 1606
                fmt = scale0.tickFormat();                                                                             // 1607
            }                                                                                                          // 1608
                                                                                                                       // 1609
            var axisLabel = g.selectAll('text.nv-axislabel')                                                           // 1610
                .data([axisLabelText || null]);                                                                        // 1611
            axisLabel.exit().remove();                                                                                 // 1612
                                                                                                                       // 1613
            var xLabelMargin;                                                                                          // 1614
            var axisMaxMin;                                                                                            // 1615
            var w;                                                                                                     // 1616
            switch (axis.orient()) {                                                                                   // 1617
                case 'top':                                                                                            // 1618
                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');                                    // 1619
                  w = 0;                                                                                               // 1620
                  if (scale.range().length === 1) {                                                                    // 1621
                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;                                      // 1622
                  } else if (scale.range().length === 2) {                                                             // 1623
                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];        // 1624
                  } else if ( scale.range().length > 2){                                                               // 1625
                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);                     // 1626
                  };                                                                                                   // 1627
                    axisLabel                                                                                          // 1628
                        .attr('text-anchor', 'middle')                                                                 // 1629
                        .attr('y', 0)                                                                                  // 1630
                        .attr('x', w/2);                                                                               // 1631
                    if (showMaxMin) {                                                                                  // 1632
                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')                                                 // 1633
                            .data(scale.domain());                                                                     // 1634
                        axisMaxMin.enter().append('g').attr('class',function(d,i){                                     // 1635
                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')
                        }).append('text');                                                                             // 1637
                        axisMaxMin.exit().remove();                                                                    // 1638
                        axisMaxMin                                                                                     // 1639
                            .attr('transform', function(d,i) {                                                         // 1640
                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'                             // 1641
                            })                                                                                         // 1642
                            .select('text')                                                                            // 1643
                            .attr('dy', '-0.5em')                                                                      // 1644
                            .attr('y', -axis.tickPadding())                                                            // 1645
                            .attr('text-anchor', 'middle')                                                             // 1646
                            .text(function(d,i) {                                                                      // 1647
                                var v = fmt(d);                                                                        // 1648
                                return ('' + v).match('NaN') ? '' : v;                                                 // 1649
                            });                                                                                        // 1650
                        axisMaxMin.watchTransition(renderWatch, 'min-max top')                                         // 1651
                            .attr('transform', function(d,i) {                                                         // 1652
                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'                     // 1653
                            });                                                                                        // 1654
                    }                                                                                                  // 1655
                    break;                                                                                             // 1656
                case 'bottom':                                                                                         // 1657
                    xLabelMargin = axisLabelDistance + 36;                                                             // 1658
                    var maxTextWidth = 30;                                                                             // 1659
                    var textHeight = 0;                                                                                // 1660
                    var xTicks = g.selectAll('g').select("text");                                                      // 1661
                    var rotateLabelsRule = '';                                                                         // 1662
                    if (rotateLabels%360) {                                                                            // 1663
                        //Calculate the longest xTick width                                                            // 1664
                        xTicks.each(function(d,i){                                                                     // 1665
                            var box = this.getBoundingClientRect();                                                    // 1666
                            var width = box.width;                                                                     // 1667
                            textHeight = box.height;                                                                   // 1668
                            if(width > maxTextWidth) maxTextWidth = width;                                             // 1669
                        });                                                                                            // 1670
                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';
                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.             // 1672
                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));                                        // 1673
                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;                                     // 1674
                        //Rotate all xTicks                                                                            // 1675
                        xTicks                                                                                         // 1676
                            .attr('transform', rotateLabelsRule)                                                       // 1677
                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');                             // 1678
                    }                                                                                                  // 1679
                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');                                    // 1680
                    w = 0;                                                                                             // 1681
                    if (scale.range().length === 1) {                                                                  // 1682
                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;                                  // 1683
                    } else if (scale.range().length === 2) {                                                           // 1684
                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];    // 1685
                    } else if ( scale.range().length > 2){                                                             // 1686
                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);                 // 1687
                    };                                                                                                 // 1688
                    axisLabel                                                                                          // 1689
                        .attr('text-anchor', 'middle')                                                                 // 1690
                        .attr('y', xLabelMargin)                                                                       // 1691
                        .attr('x', w/2);                                                                               // 1692
                    if (showMaxMin) {                                                                                  // 1693
                        //if (showMaxMin && !isOrdinal) {                                                              // 1694
                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')                                                 // 1695
                            //.data(scale.domain())                                                                    // 1696
                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);                     // 1697
                        axisMaxMin.enter().append('g').attr('class',function(d,i){                                     // 1698
                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')
                        }).append('text');                                                                             // 1700
                        axisMaxMin.exit().remove();                                                                    // 1701
                        axisMaxMin                                                                                     // 1702
                            .attr('transform', function(d,i) {                                                         // 1703
                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'
                            })                                                                                         // 1705
                            .select('text')                                                                            // 1706
                            .attr('dy', '.71em')                                                                       // 1707
                            .attr('y', axis.tickPadding())                                                             // 1708
                            .attr('transform', rotateLabelsRule)                                                       // 1709
                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')  // 1710
                            .text(function(d,i) {                                                                      // 1711
                                var v = fmt(d);                                                                        // 1712
                                return ('' + v).match('NaN') ? '' : v;                                                 // 1713
                            });                                                                                        // 1714
                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')                                      // 1715
                            .attr('transform', function(d,i) {                                                         // 1716
                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'
                            });                                                                                        // 1718
                    }                                                                                                  // 1719
                    if (staggerLabels)                                                                                 // 1720
                        xTicks                                                                                         // 1721
                            .attr('transform', function(d,i) {                                                         // 1722
                                return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'                                // 1723
                            });                                                                                        // 1724
                                                                                                                       // 1725
                    break;                                                                                             // 1726
                case 'right':                                                                                          // 1727
                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');                                    // 1728
                    axisLabel                                                                                          // 1729
                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')                                       // 1730
                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')                                           // 1731
                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart
                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());                   // 1733
                    if (showMaxMin) {                                                                                  // 1734
                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')                                                 // 1735
                            .data(scale.domain());                                                                     // 1736
                       	axisMaxMin.enter().append('g').attr('class',function(d,i){                                     // 1737
                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')
                        }).append('text')                                                                              // 1739
                            .style('opacity', 0);                                                                      // 1740
                        axisMaxMin.exit().remove();                                                                    // 1741
                        axisMaxMin                                                                                     // 1742
                            .attr('transform', function(d,i) {                                                         // 1743
                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'                             // 1744
                            })                                                                                         // 1745
                            .select('text')                                                                            // 1746
                            .attr('dy', '.32em')                                                                       // 1747
                            .attr('y', 0)                                                                              // 1748
                            .attr('x', axis.tickPadding())                                                             // 1749
                            .style('text-anchor', 'start')                                                             // 1750
                            .text(function(d, i) {                                                                     // 1751
                                var v = fmt(d);                                                                        // 1752
                                return ('' + v).match('NaN') ? '' : v;                                                 // 1753
                            });                                                                                        // 1754
                        axisMaxMin.watchTransition(renderWatch, 'min-max right')                                       // 1755
                            .attr('transform', function(d,i) {                                                         // 1756
                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'                     // 1757
                            })                                                                                         // 1758
                            .select('text')                                                                            // 1759
                            .style('opacity', 1);                                                                      // 1760
                    }                                                                                                  // 1761
                    break;                                                                                             // 1762
                case 'left':                                                                                           // 1763
                    /*                                                                                                 // 1764
                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins        // 1765
                     var yTicks = g.selectAll('g').select("text");                                                     // 1766
                     yTicks.each(function(d,i){                                                                        // 1767
                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;                  // 1768
                     if(labelPadding > width) width = labelPadding;                                                    // 1769
                     });                                                                                               // 1770
                     */                                                                                                // 1771
                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');                                    // 1772
                    axisLabel                                                                                          // 1773
                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')                                         // 1774
                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')                                          // 1775
                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)
                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());                 // 1777
                    if (showMaxMin) {                                                                                  // 1778
                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')                                                 // 1779
                            .data(scale.domain());                                                                     // 1780
                        axisMaxMin.enter().append('g').attr('class',function(d,i){                                     // 1781
                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')
                        }).append('text')                                                                              // 1783
                            .style('opacity', 0);                                                                      // 1784
                        axisMaxMin.exit().remove();                                                                    // 1785
                        axisMaxMin                                                                                     // 1786
                            .attr('transform', function(d,i) {                                                         // 1787
                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'                            // 1788
                            })                                                                                         // 1789
                            .select('text')                                                                            // 1790
                            .attr('dy', '.32em')                                                                       // 1791
                            .attr('y', 0)                                                                              // 1792
                            .attr('x', -axis.tickPadding())                                                            // 1793
                            .attr('text-anchor', 'end')                                                                // 1794
                            .text(function(d,i) {                                                                      // 1795
                                var v = fmt(d);                                                                        // 1796
                                return ('' + v).match('NaN') ? '' : v;                                                 // 1797
                            });                                                                                        // 1798
                        axisMaxMin.watchTransition(renderWatch, 'min-max right')                                       // 1799
                            .attr('transform', function(d,i) {                                                         // 1800
                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'                     // 1801
                            })                                                                                         // 1802
                            .select('text')                                                                            // 1803
                            .style('opacity', 1);                                                                      // 1804
                    }                                                                                                  // 1805
                    break;                                                                                             // 1806
            }                                                                                                          // 1807
            axisLabel.text(function(d) { return d });                                                                  // 1808
                                                                                                                       // 1809
            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {                               // 1810
                //check if max and min overlap other values, if so, hide the values that overlap                       // 1811
                g.selectAll('g') // the g's wrapping each tick                                                         // 1812
                    .each(function(d,i) {                                                                              // 1813
                        d3.select(this).select('text').attr('opacity', 1);                                             // 1814
                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!
                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
                                d3.select(this).attr('opacity', 0);                                                    // 1817
                                                                                                                       // 1818
                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!         // 1819
                        }                                                                                              // 1820
                    });                                                                                                // 1821
                                                                                                                       // 1822
                //if Max and Min = 0 only show min, Issue #281                                                         // 1823
                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {                                // 1824
                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {                               // 1825
                        return !i ? 1 : 0                                                                              // 1826
                    });                                                                                                // 1827
                }                                                                                                      // 1828
            }                                                                                                          // 1829
                                                                                                                       // 1830
            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {                               // 1831
                var maxMinRange = [];                                                                                  // 1832
                wrap.selectAll('g.nv-axisMaxMin')                                                                      // 1833
                    .each(function(d,i) {                                                                              // 1834
                        try {                                                                                          // 1835
                            if (i) // i== 1, max position                                                              // 1836
                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)
                            else // i==0, min position                                                                 // 1838
                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)                    // 1839
                        }catch (err) {                                                                                 // 1840
                            if (i) // i== 1, max position                                                              // 1841
                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)
                            else // i==0, min position                                                                 // 1843
                                maxMinRange.push(scale(d) + 4);                                                        // 1844
                        }                                                                                              // 1845
                    });                                                                                                // 1846
                // the g's wrapping each tick                                                                          // 1847
                g.selectAll('g').each(function(d, i) {                                                                 // 1848
                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {                                      // 1849
                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
                            d3.select(this).remove();                                                                  // 1851
                        else                                                                                           // 1852
                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!                   // 1853
                    }                                                                                                  // 1854
                });                                                                                                    // 1855
            }                                                                                                          // 1856
                                                                                                                       // 1857
            //Highlight zero tick line                                                                                 // 1858
            g.selectAll('.tick')                                                                                       // 1859
                .filter(function (d) {                                                                                 // 1860
                    /*                                                                                                 // 1861
                    The filter needs to return only ticks at or near zero.                                             // 1862
                    Numbers like 0.00001 need to count as zero as well,                                                // 1863
                    and the arithmetic trick below solves that.                                                        // 1864
                    */                                                                                                 // 1865
                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)                          // 1866
                })                                                                                                     // 1867
                .classed('zero', true);                                                                                // 1868
                                                                                                                       // 1869
            //store old scales for use in transitions on update                                                        // 1870
            scale0 = scale.copy();                                                                                     // 1871
                                                                                                                       // 1872
        });                                                                                                            // 1873
                                                                                                                       // 1874
        renderWatch.renderEnd('axis immediate');                                                                       // 1875
        return chart;                                                                                                  // 1876
    }                                                                                                                  // 1877
                                                                                                                       // 1878
    //============================================================                                                     // 1879
    // Expose Public Variables                                                                                         // 1880
    //------------------------------------------------------------                                                     // 1881
                                                                                                                       // 1882
    // expose chart's sub-components                                                                                   // 1883
    chart.axis = axis;                                                                                                 // 1884
    chart.dispatch = dispatch;                                                                                         // 1885
                                                                                                                       // 1886
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 1887
    chart._options = Object.create({}, {                                                                               // 1888
        // simple options, just get/set the necessary values                                                           // 1889
        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},       // 1890
        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},               // 1891
        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},                 // 1892
        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},                 // 1893
        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},                     // 1894
        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},               // 1895
        height:            {get: function(){return height;}, set: function(_){height=_;}},                             // 1896
        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},                               // 1897
        width:             {get: function(){return width;}, set: function(_){width=_;}},                               // 1898
                                                                                                                       // 1899
        // options that require extra logic in the setter                                                              // 1900
        margin: {get: function(){return margin;}, set: function(_){                                                    // 1901
            margin.top    = _.top !== undefined    ? _.top    : margin.top;                                            // 1902
            margin.right  = _.right !== undefined  ? _.right  : margin.right;                                          // 1903
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 1904
            margin.left   = _.left !== undefined   ? _.left   : margin.left;                                           // 1905
        }},                                                                                                            // 1906
        duration: {get: function(){return duration;}, set: function(_){                                                // 1907
            duration=_;                                                                                                // 1908
            renderWatch.reset(duration);                                                                               // 1909
        }},                                                                                                            // 1910
        scale: {get: function(){return scale;}, set: function(_){                                                      // 1911
            scale = _;                                                                                                 // 1912
            axis.scale(scale);                                                                                         // 1913
            isOrdinal = typeof scale.rangeBands === 'function';                                                        // 1914
            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);                   // 1915
        }}                                                                                                             // 1916
    });                                                                                                                // 1917
                                                                                                                       // 1918
    nv.utils.initOptions(chart);                                                                                       // 1919
    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);
    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);                           // 1921
                                                                                                                       // 1922
    return chart;                                                                                                      // 1923
};                                                                                                                     // 1924
nv.models.boxPlot = function() {                                                                                       // 1925
    "use strict";                                                                                                      // 1926
                                                                                                                       // 1927
    //============================================================                                                     // 1928
    // Public Variables with Default Settings                                                                          // 1929
    //------------------------------------------------------------                                                     // 1930
                                                                                                                       // 1931
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 1932
        , width = 960                                                                                                  // 1933
        , height = 500                                                                                                 // 1934
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 1935
        , x = d3.scale.ordinal()                                                                                       // 1936
        , y = d3.scale.linear()                                                                                        // 1937
        , getX = function(d) { return d.x }                                                                            // 1938
        , getY = function(d) { return d.y }                                                                            // 1939
        , color = nv.utils.defaultColor()                                                                              // 1940
        , container = null                                                                                             // 1941
        , xDomain                                                                                                      // 1942
        , yDomain                                                                                                      // 1943
        , xRange                                                                                                       // 1944
        , yRange                                                                                                       // 1945
        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')               // 1946
        , duration = 250                                                                                               // 1947
        , maxBoxWidth = null                                                                                           // 1948
        ;                                                                                                              // 1949
                                                                                                                       // 1950
    //============================================================                                                     // 1951
    // Private Variables                                                                                               // 1952
    //------------------------------------------------------------                                                     // 1953
                                                                                                                       // 1954
    var x0, y0;                                                                                                        // 1955
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 1956
                                                                                                                       // 1957
    function chart(selection) {                                                                                        // 1958
        renderWatch.reset();                                                                                           // 1959
        selection.each(function(data) {                                                                                // 1960
            var availableWidth = width - margin.left - margin.right,                                                   // 1961
                availableHeight = height - margin.top - margin.bottom;                                                 // 1962
                                                                                                                       // 1963
            container = d3.select(this);                                                                               // 1964
            nv.utils.initSVG(container);                                                                               // 1965
                                                                                                                       // 1966
            // Setup Scales                                                                                            // 1967
            x   .domain(xDomain || data.map(function(d,i) { return getX(d,i); }))                                      // 1968
                .rangeBands(xRange || [0, availableWidth], .1);                                                        // 1969
                                                                                                                       // 1970
            // if we know yDomain, no need to calculate                                                                // 1971
            var yData = []                                                                                             // 1972
            if (!yDomain) {                                                                                            // 1973
                // (y-range is based on quartiles, whiskers and outliers)                                              // 1974
                                                                                                                       // 1975
                // lower values                                                                                        // 1976
                var yMin = d3.min(data.map(function(d) {                                                               // 1977
                    var min_arr = [];                                                                                  // 1978
                                                                                                                       // 1979
                    min_arr.push(d.values.Q1);                                                                         // 1980
                    if (d.values.hasOwnProperty('whisker_low') && d.values.whisker_low !== null) { min_arr.push(d.values.whisker_low); }
                    if (d.values.hasOwnProperty('outliers') && d.values.outliers !== null) { min_arr = min_arr.concat(d.values.outliers); }
                                                                                                                       // 1983
                    return d3.min(min_arr);                                                                            // 1984
                }));                                                                                                   // 1985
                                                                                                                       // 1986
                // upper values                                                                                        // 1987
                var yMax = d3.max(data.map(function(d) {                                                               // 1988
                    var max_arr = [];                                                                                  // 1989
                                                                                                                       // 1990
                    max_arr.push(d.values.Q3);                                                                         // 1991
                    if (d.values.hasOwnProperty('whisker_high') && d.values.whisker_high !== null) { max_arr.push(d.values.whisker_high); }
                    if (d.values.hasOwnProperty('outliers') && d.values.outliers !== null) { max_arr = max_arr.concat(d.values.outliers); }
                                                                                                                       // 1994
                    return d3.max(max_arr);                                                                            // 1995
                }));                                                                                                   // 1996
                                                                                                                       // 1997
                yData = [ yMin, yMax ] ;                                                                               // 1998
            }                                                                                                          // 1999
                                                                                                                       // 2000
            y.domain(yDomain || yData);                                                                                // 2001
            y.range(yRange || [availableHeight, 0]);                                                                   // 2002
                                                                                                                       // 2003
            //store old scales if they exist                                                                           // 2004
            x0 = x0 || x;                                                                                              // 2005
            y0 = y0 || y.copy().range([y(0),y(0)]);                                                                    // 2006
                                                                                                                       // 2007
            // Setup containers and skeleton of chart                                                                  // 2008
            var wrap = container.selectAll('g.nv-wrap').data([data]);                                                  // 2009
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');                                    // 2010
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 2011
                                                                                                                       // 2012
            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });                               // 2013
            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);     // 2014
            boxplots                                                                                                   // 2015
                .attr('class', 'nv-boxplot')                                                                           // 2016
                .attr('transform', function(d,i,j) { return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05) + ', 0)'; })
                .classed('hover', function(d) { return d.hover });                                                     // 2018
            boxplots                                                                                                   // 2019
                .watchTransition(renderWatch, 'nv-boxplot: boxplots')                                                  // 2020
                .style('stroke-opacity', 1)                                                                            // 2021
                .style('fill-opacity', .75)                                                                            // 2022
                .delay(function(d,i) { return i * duration / data.length })                                            // 2023
                .attr('transform', function(d,i) {                                                                     // 2024
                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05) + ', 0)';                               // 2025
                });                                                                                                    // 2026
            boxplots.exit().remove();                                                                                  // 2027
                                                                                                                       // 2028
            // ----- add the SVG elements for each boxPlot -----                                                       // 2029
                                                                                                                       // 2030
            // conditionally append whisker lines                                                                      // 2031
            boxEnter.each(function(d,i) {                                                                              // 2032
              var box = d3.select(this);                                                                               // 2033
                                                                                                                       // 2034
              ['low', 'high'].forEach(function(key) {                                                                  // 2035
                if (d.values.hasOwnProperty('whisker_' + key) && d.values['whisker_' + key] !== null) {                // 2036
                  box.append('line')                                                                                   // 2037
                    .style('stroke', (d.color) ? d.color : color(d,i))                                                 // 2038
                    .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);                                            // 2039
                                                                                                                       // 2040
                  box.append('line')                                                                                   // 2041
                    .style('stroke', (d.color) ? d.color : color(d,i))                                                 // 2042
                    .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);                                               // 2043
                }                                                                                                      // 2044
              });                                                                                                      // 2045
            });                                                                                                        // 2046
                                                                                                                       // 2047
            // outliers                                                                                                // 2048
            // TODO: support custom colors here                                                                        // 2049
            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {                                // 2050
                if (d.values.hasOwnProperty('outliers') && d.values.outliers !== null) { return d.values.outliers; }   // 2051
                else { return []; }                                                                                    // 2052
            });                                                                                                        // 2053
            outliers.enter().append('circle')                                                                          // 2054
                .style('fill', function(d,i,j) { return color(d,j) }).style('stroke', function(d,i,j) { return color(d,j) })
                .on('mouseover', function(d,i,j) {                                                                     // 2056
                    d3.select(this).classed('hover', true);                                                            // 2057
                    dispatch.elementMouseover({                                                                        // 2058
                        series: { key: d, color: color(d,j) },                                                         // 2059
                        e: d3.event                                                                                    // 2060
                    });                                                                                                // 2061
                })                                                                                                     // 2062
                .on('mouseout', function(d,i,j) {                                                                      // 2063
                    d3.select(this).classed('hover', false);                                                           // 2064
                    dispatch.elementMouseout({                                                                         // 2065
                        series: { key: d, color: color(d,j) },                                                         // 2066
                        e: d3.event                                                                                    // 2067
                    });                                                                                                // 2068
                })                                                                                                     // 2069
                .on('mousemove', function(d,i) {                                                                       // 2070
                    dispatch.elementMousemove({e: d3.event});                                                          // 2071
                });                                                                                                    // 2072
                                                                                                                       // 2073
            outliers.attr('class', 'nv-boxplot-outlier');                                                              // 2074
            outliers                                                                                                   // 2075
              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')                                          // 2076
                .attr('cx', x.rangeBand() * .45)                                                                       // 2077
                .attr('cy', function(d,i,j) { return y(d); })                                                          // 2078
                .attr('r', '3');                                                                                       // 2079
            outliers.exit().remove();                                                                                  // 2080
                                                                                                                       // 2081
            var box_width = function() { return (maxBoxWidth === null ? x.rangeBand() * .9 : Math.min(75, x.rangeBand() * .9)); };
            var box_left  = function() { return x.rangeBand() * .45 - box_width()/2; };                                // 2083
            var box_right = function() { return x.rangeBand() * .45 + box_width()/2; };                                // 2084
                                                                                                                       // 2085
            // update whisker lines and ticks                                                                          // 2086
            ['low', 'high'].forEach(function(key) {                                                                    // 2087
              var endpoint = (key === 'low') ? 'Q1' : 'Q3';                                                            // 2088
                                                                                                                       // 2089
              boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)                                             // 2090
                .watchTransition(renderWatch, 'nv-boxplot: boxplots')                                                  // 2091
                  .attr('x1', x.rangeBand() * .45 )                                                                    // 2092
                  .attr('y1', function(d,i) { return y(d.values['whisker_' + key]); })                                 // 2093
                  .attr('x2', x.rangeBand() * .45 )                                                                    // 2094
                  .attr('y2', function(d,i) { return y(d.values[endpoint]); });                                        // 2095
                                                                                                                       // 2096
              boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)                                                // 2097
                .watchTransition(renderWatch, 'nv-boxplot: boxplots')                                                  // 2098
                  .attr('x1', box_left )                                                                               // 2099
                  .attr('y1', function(d,i) { return y(d.values['whisker_' + key]); })                                 // 2100
                  .attr('x2', box_right )                                                                              // 2101
                  .attr('y2', function(d,i) { return y(d.values['whisker_' + key]); });                                // 2102
            });                                                                                                        // 2103
                                                                                                                       // 2104
            ['low', 'high'].forEach(function(key) {                                                                    // 2105
              boxEnter.selectAll('.nv-boxplot-' + key)                                                                 // 2106
                .on('mouseover', function(d,i,j) {                                                                     // 2107
                    d3.select(this).classed('hover', true);                                                            // 2108
                    dispatch.elementMouseover({                                                                        // 2109
                        series: { key: d.values['whisker_' + key], color: color(d,j) },                                // 2110
                        e: d3.event                                                                                    // 2111
                    });                                                                                                // 2112
                })                                                                                                     // 2113
                .on('mouseout', function(d,i,j) {                                                                      // 2114
                    d3.select(this).classed('hover', false);                                                           // 2115
                    dispatch.elementMouseout({                                                                         // 2116
                        series: { key: d.values['whisker_' + key], color: color(d,j) },                                // 2117
                        e: d3.event                                                                                    // 2118
                    });                                                                                                // 2119
                })                                                                                                     // 2120
                .on('mousemove', function(d,i) {                                                                       // 2121
                    dispatch.elementMousemove({e: d3.event});                                                          // 2122
                });                                                                                                    // 2123
            });                                                                                                        // 2124
                                                                                                                       // 2125
            // boxes                                                                                                   // 2126
            boxEnter.append('rect')                                                                                    // 2127
                .attr('class', 'nv-boxplot-box')                                                                       // 2128
                // tooltip events                                                                                      // 2129
                .on('mouseover', function(d,i) {                                                                       // 2130
                    d3.select(this).classed('hover', true);                                                            // 2131
                    dispatch.elementMouseover({                                                                        // 2132
                        key: d.label,                                                                                  // 2133
                        value: d.label,                                                                                // 2134
                        series: [                                                                                      // 2135
                            { key: 'Q3', value: d.values.Q3, color: d.color || color(d,i) },                           // 2136
                            { key: 'Q2', value: d.values.Q2, color: d.color || color(d,i) },                           // 2137
                            { key: 'Q1', value: d.values.Q1, color: d.color || color(d,i) }                            // 2138
                        ],                                                                                             // 2139
                        data: d,                                                                                       // 2140
                        index: i,                                                                                      // 2141
                        e: d3.event                                                                                    // 2142
                    });                                                                                                // 2143
                })                                                                                                     // 2144
                .on('mouseout', function(d,i) {                                                                        // 2145
                    d3.select(this).classed('hover', false);                                                           // 2146
                    dispatch.elementMouseout({                                                                         // 2147
                        key: d.label,                                                                                  // 2148
                        value: d.label,                                                                                // 2149
                        series: [                                                                                      // 2150
                            { key: 'Q3', value: d.values.Q3, color: d.color || color(d,i) },                           // 2151
                            { key: 'Q2', value: d.values.Q2, color: d.color || color(d,i) },                           // 2152
                            { key: 'Q1', value: d.values.Q1, color: d.color || color(d,i) }                            // 2153
                        ],                                                                                             // 2154
                        data: d,                                                                                       // 2155
                        index: i,                                                                                      // 2156
                        e: d3.event                                                                                    // 2157
                    });                                                                                                // 2158
                })                                                                                                     // 2159
                .on('mousemove', function(d,i) {                                                                       // 2160
                    dispatch.elementMousemove({e: d3.event});                                                          // 2161
                });                                                                                                    // 2162
                                                                                                                       // 2163
            // box transitions                                                                                         // 2164
            boxplots.select('rect.nv-boxplot-box')                                                                     // 2165
              .watchTransition(renderWatch, 'nv-boxplot: boxes')                                                       // 2166
                .attr('y', function(d,i) { return y(d.values.Q3); })                                                   // 2167
                .attr('width', box_width)                                                                              // 2168
                .attr('x', box_left )                                                                                  // 2169
                                                                                                                       // 2170
                .attr('height', function(d,i) { return Math.abs(y(d.values.Q3) - y(d.values.Q1)) || 1 })               // 2171
                .style('fill', function(d,i) { return d.color || color(d,i) })                                         // 2172
                .style('stroke', function(d,i) { return d.color || color(d,i) });                                      // 2173
                                                                                                                       // 2174
            // median line                                                                                             // 2175
            boxEnter.append('line').attr('class', 'nv-boxplot-median');                                                // 2176
                                                                                                                       // 2177
            boxplots.select('line.nv-boxplot-median')                                                                  // 2178
              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')                                               // 2179
                .attr('x1', box_left)                                                                                  // 2180
                .attr('y1', function(d,i) { return y(d.values.Q2); })                                                  // 2181
                .attr('x2', box_right)                                                                                 // 2182
                .attr('y2', function(d,i) { return y(d.values.Q2); });                                                 // 2183
                                                                                                                       // 2184
            //store old scales for use in transitions on update                                                        // 2185
            x0 = x.copy();                                                                                             // 2186
            y0 = y.copy();                                                                                             // 2187
        });                                                                                                            // 2188
                                                                                                                       // 2189
        renderWatch.renderEnd('nv-boxplot immediate');                                                                 // 2190
        return chart;                                                                                                  // 2191
    }                                                                                                                  // 2192
                                                                                                                       // 2193
    //============================================================                                                     // 2194
    // Expose Public Variables                                                                                         // 2195
    //------------------------------------------------------------                                                     // 2196
                                                                                                                       // 2197
    chart.dispatch = dispatch;                                                                                         // 2198
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 2199
                                                                                                                       // 2200
    chart._options = Object.create({}, {                                                                               // 2201
        // simple options, just get/set the necessary values                                                           // 2202
        width:   {get: function(){return width;}, set: function(_){width=_;}},                                         // 2203
        height:  {get: function(){return height;}, set: function(_){height=_;}},                                       // 2204
        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},                         // 2205
        x:       {get: function(){return getX;}, set: function(_){getX=_;}},                                           // 2206
        y:       {get: function(){return getY;}, set: function(_){getY=_;}},                                           // 2207
        xScale:  {get: function(){return x;}, set: function(_){x=_;}},                                                 // 2208
        yScale:  {get: function(){return y;}, set: function(_){y=_;}},                                                 // 2209
        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                     // 2210
        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                     // 2211
        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},                                       // 2212
        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},                                       // 2213
        id:          {get: function(){return id;}, set: function(_){id=_;}},                                           // 2214
        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},                            // 2215
                                                                                                                       // 2216
        // options that require extra logic in the setter                                                              // 2217
        margin: {get: function(){return margin;}, set: function(_){                                                    // 2218
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 2219
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 2220
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 2221
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 2222
        }},                                                                                                            // 2223
        color:  {get: function(){return color;}, set: function(_){                                                     // 2224
            color = nv.utils.getColor(_);                                                                              // 2225
        }},                                                                                                            // 2226
        duration: {get: function(){return duration;}, set: function(_){                                                // 2227
            duration = _;                                                                                              // 2228
            renderWatch.reset(duration);                                                                               // 2229
        }}                                                                                                             // 2230
    });                                                                                                                // 2231
                                                                                                                       // 2232
    nv.utils.initOptions(chart);                                                                                       // 2233
                                                                                                                       // 2234
    return chart;                                                                                                      // 2235
};                                                                                                                     // 2236
nv.models.boxPlotChart = function() {                                                                                  // 2237
    "use strict";                                                                                                      // 2238
                                                                                                                       // 2239
    //============================================================                                                     // 2240
    // Public Variables with Default Settings                                                                          // 2241
    //------------------------------------------------------------                                                     // 2242
                                                                                                                       // 2243
    var boxplot = nv.models.boxPlot()                                                                                  // 2244
        , xAxis = nv.models.axis()                                                                                     // 2245
        , yAxis = nv.models.axis()                                                                                     // 2246
        ;                                                                                                              // 2247
                                                                                                                       // 2248
    var margin = {top: 15, right: 10, bottom: 50, left: 60}                                                            // 2249
        , width = null                                                                                                 // 2250
        , height = null                                                                                                // 2251
        , color = nv.utils.getColor()                                                                                  // 2252
        , showXAxis = true                                                                                             // 2253
        , showYAxis = true                                                                                             // 2254
        , rightAlignYAxis = false                                                                                      // 2255
        , staggerLabels = false                                                                                        // 2256
        , tooltip = nv.models.tooltip()                                                                                // 2257
        , x                                                                                                            // 2258
        , y                                                                                                            // 2259
        , noData = "No Data Available."                                                                                // 2260
        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'beforeUpdate', 'renderEnd')                            // 2261
        , duration = 250                                                                                               // 2262
        ;                                                                                                              // 2263
                                                                                                                       // 2264
    xAxis                                                                                                              // 2265
        .orient('bottom')                                                                                              // 2266
        .showMaxMin(false)                                                                                             // 2267
        .tickFormat(function(d) { return d })                                                                          // 2268
    ;                                                                                                                  // 2269
    yAxis                                                                                                              // 2270
        .orient((rightAlignYAxis) ? 'right' : 'left')                                                                  // 2271
        .tickFormat(d3.format(',.1f'))                                                                                 // 2272
    ;                                                                                                                  // 2273
                                                                                                                       // 2274
    tooltip.duration(0);                                                                                               // 2275
                                                                                                                       // 2276
    //============================================================                                                     // 2277
    // Private Variables                                                                                               // 2278
    //------------------------------------------------------------                                                     // 2279
                                                                                                                       // 2280
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 2281
                                                                                                                       // 2282
    function chart(selection) {                                                                                        // 2283
        renderWatch.reset();                                                                                           // 2284
        renderWatch.models(boxplot);                                                                                   // 2285
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 2286
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 2287
                                                                                                                       // 2288
        selection.each(function(data) {                                                                                // 2289
            var container = d3.select(this),                                                                           // 2290
                that = this;                                                                                           // 2291
            nv.utils.initSVG(container);                                                                               // 2292
            var availableWidth = (width  || parseInt(container.style('width')) || 960)                                 // 2293
                    - margin.left - margin.right,                                                                      // 2294
                availableHeight = (height || parseInt(container.style('height')) || 400)                               // 2295
                    - margin.top - margin.bottom;                                                                      // 2296
                                                                                                                       // 2297
            chart.update = function() {                                                                                // 2298
                dispatch.beforeUpdate();                                                                               // 2299
                container.transition().duration(duration).call(chart);                                                 // 2300
            };                                                                                                         // 2301
            chart.container = this;                                                                                    // 2302
                                                                                                                       // 2303
            // Display No Data message if there's nothing to show. (quartiles required at minimum)                     // 2304
            if (!data || !data.length ||                                                                               // 2305
                    !data.filter(function(d) { return d.values.hasOwnProperty("Q1") && d.values.hasOwnProperty("Q2") && d.values.hasOwnProperty("Q3"); }).length) {
                var noDataText = container.selectAll('.nv-noData').data([noData]);                                     // 2307
                                                                                                                       // 2308
                noDataText.enter().append('text')                                                                      // 2309
                    .attr('class', 'nvd3 nv-noData')                                                                   // 2310
                    .attr('dy', '-.7em')                                                                               // 2311
                    .style('text-anchor', 'middle');                                                                   // 2312
                                                                                                                       // 2313
                noDataText                                                                                             // 2314
                    .attr('x', margin.left + availableWidth / 2)                                                       // 2315
                    .attr('y', margin.top + availableHeight / 2)                                                       // 2316
                    .text(function(d) { return d });                                                                   // 2317
                                                                                                                       // 2318
                return chart;                                                                                          // 2319
            } else {                                                                                                   // 2320
                container.selectAll('.nv-noData').remove();                                                            // 2321
            }                                                                                                          // 2322
                                                                                                                       // 2323
            // Setup Scales                                                                                            // 2324
            x = boxplot.xScale();                                                                                      // 2325
            y = boxplot.yScale().clamp(true);                                                                          // 2326
                                                                                                                       // 2327
            // Setup containers and skeleton of chart                                                                  // 2328
            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);                               // 2329
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');        // 2330
            var defsEnter = gEnter.append('defs');                                                                     // 2331
            var g = wrap.select('g');                                                                                  // 2332
                                                                                                                       // 2333
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 2334
            gEnter.append('g').attr('class', 'nv-y nv-axis')                                                           // 2335
                .append('g').attr('class', 'nv-zeroLine')                                                              // 2336
                .append('line');                                                                                       // 2337
                                                                                                                       // 2338
            gEnter.append('g').attr('class', 'nv-barsWrap');                                                           // 2339
                                                                                                                       // 2340
            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                                  // 2341
                                                                                                                       // 2342
            if (rightAlignYAxis) {                                                                                     // 2343
                g.select(".nv-y.nv-axis")                                                                              // 2344
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 2345
            }                                                                                                          // 2346
                                                                                                                       // 2347
            // Main Chart Component(s)                                                                                 // 2348
            boxplot                                                                                                    // 2349
                .width(availableWidth)                                                                                 // 2350
                .height(availableHeight);                                                                              // 2351
                                                                                                                       // 2352
            var barsWrap = g.select('.nv-barsWrap')                                                                    // 2353
                .datum(data.filter(function(d) { return !d.disabled }))                                                // 2354
                                                                                                                       // 2355
            barsWrap.transition().call(boxplot);                                                                       // 2356
                                                                                                                       // 2357
                                                                                                                       // 2358
            defsEnter.append('clipPath')                                                                               // 2359
                .attr('id', 'nv-x-label-clip-' + boxplot.id())                                                         // 2360
                .append('rect');                                                                                       // 2361
                                                                                                                       // 2362
            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')                                                     // 2363
                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))                                                // 2364
                .attr('height', 16)                                                                                    // 2365
                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));                                                 // 2366
                                                                                                                       // 2367
            // Setup Axes                                                                                              // 2368
            if (showXAxis) {                                                                                           // 2369
                xAxis                                                                                                  // 2370
                    .scale(x)                                                                                          // 2371
                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                            // 2372
                    .tickSize(-availableHeight, 0);                                                                    // 2373
                                                                                                                       // 2374
                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');                      // 2375
                g.select('.nv-x.nv-axis').call(xAxis);                                                                 // 2376
                                                                                                                       // 2377
                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');                                                 // 2378
                if (staggerLabels) {                                                                                   // 2379
                    xTicks                                                                                             // 2380
                        .selectAll('text')                                                                             // 2381
                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })
                }                                                                                                      // 2383
            }                                                                                                          // 2384
                                                                                                                       // 2385
            if (showYAxis) {                                                                                           // 2386
                yAxis                                                                                                  // 2387
                    .scale(y)                                                                                          // 2388
                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data         // 2389
                    .tickSize( -availableWidth, 0);                                                                    // 2390
                                                                                                                       // 2391
                g.select('.nv-y.nv-axis').call(yAxis);                                                                 // 2392
            }                                                                                                          // 2393
                                                                                                                       // 2394
            // Zero line                                                                                               // 2395
            g.select(".nv-zeroLine line")                                                                              // 2396
                .attr("x1",0)                                                                                          // 2397
                .attr("x2",availableWidth)                                                                             // 2398
                .attr("y1", y(0))                                                                                      // 2399
                .attr("y2", y(0))                                                                                      // 2400
            ;                                                                                                          // 2401
                                                                                                                       // 2402
            //============================================================                                             // 2403
            // Event Handling/Dispatching (in chart's scope)                                                           // 2404
            //------------------------------------------------------------                                             // 2405
        });                                                                                                            // 2406
                                                                                                                       // 2407
        renderWatch.renderEnd('nv-boxplot chart immediate');                                                           // 2408
        return chart;                                                                                                  // 2409
    }                                                                                                                  // 2410
                                                                                                                       // 2411
    //============================================================                                                     // 2412
    // Event Handling/Dispatching (out of chart's scope)                                                               // 2413
    //------------------------------------------------------------                                                     // 2414
                                                                                                                       // 2415
    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {                                                    // 2416
        tooltip.data(evt).hidden(false);                                                                               // 2417
    });                                                                                                                // 2418
                                                                                                                       // 2419
    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {                                                     // 2420
        tooltip.data(evt).hidden(true);                                                                                // 2421
    });                                                                                                                // 2422
                                                                                                                       // 2423
    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {                                                    // 2424
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 2425
    });                                                                                                                // 2426
                                                                                                                       // 2427
    //============================================================                                                     // 2428
    // Expose Public Variables                                                                                         // 2429
    //------------------------------------------------------------                                                     // 2430
                                                                                                                       // 2431
    chart.dispatch = dispatch;                                                                                         // 2432
    chart.boxplot = boxplot;                                                                                           // 2433
    chart.xAxis = xAxis;                                                                                               // 2434
    chart.yAxis = yAxis;                                                                                               // 2435
    chart.tooltip = tooltip;                                                                                           // 2436
                                                                                                                       // 2437
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 2438
                                                                                                                       // 2439
    chart._options = Object.create({}, {                                                                               // 2440
        // simple options, just get/set the necessary values                                                           // 2441
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 2442
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 2443
        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},                   // 2444
        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                               // 2445
        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                               // 2446
        tooltips:    {get: function(){return tooltips;}, set: function(_){tooltips=_;}},                               // 2447
        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},                           // 2448
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 2449
                                                                                                                       // 2450
        // options that require extra logic in the setter                                                              // 2451
        margin: {get: function(){return margin;}, set: function(_){                                                    // 2452
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 2453
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 2454
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 2455
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 2456
        }},                                                                                                            // 2457
        duration: {get: function(){return duration;}, set: function(_){                                                // 2458
            duration = _;                                                                                              // 2459
            renderWatch.reset(duration);                                                                               // 2460
            boxplot.duration(duration);                                                                                // 2461
            xAxis.duration(duration);                                                                                  // 2462
            yAxis.duration(duration);                                                                                  // 2463
        }},                                                                                                            // 2464
        color:  {get: function(){return color;}, set: function(_){                                                     // 2465
            color = nv.utils.getColor(_);                                                                              // 2466
            boxplot.color(color);                                                                                      // 2467
        }},                                                                                                            // 2468
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 2469
            rightAlignYAxis = _;                                                                                       // 2470
            yAxis.orient( (_) ? 'right' : 'left');                                                                     // 2471
        }}                                                                                                             // 2472
    });                                                                                                                // 2473
                                                                                                                       // 2474
    nv.utils.inheritOptions(chart, boxplot);                                                                           // 2475
    nv.utils.initOptions(chart);                                                                                       // 2476
                                                                                                                       // 2477
    return chart;                                                                                                      // 2478
}                                                                                                                      // 2479
// Chart design based on the recommendations of Stephen Few. Implementation                                            // 2480
// based on the work of Clint Ivy, Jamie Love, and Jason Davies.                                                       // 2481
// http://projects.instantcognition.com/protovis/bulletchart/                                                          // 2482
                                                                                                                       // 2483
nv.models.bullet = function() {                                                                                        // 2484
    "use strict";                                                                                                      // 2485
                                                                                                                       // 2486
    //============================================================                                                     // 2487
    // Public Variables with Default Settings                                                                          // 2488
    //------------------------------------------------------------                                                     // 2489
                                                                                                                       // 2490
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 2491
        , orient = 'left' // TODO top & bottom                                                                         // 2492
        , reverse = false                                                                                              // 2493
        , ranges = function(d) { return d.ranges }                                                                     // 2494
        , markers = function(d) { return d.markers ? d.markers : [0] }                                                 // 2495
        , measures = function(d) { return d.measures }                                                                 // 2496
        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }                                      // 2497
        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }                                  // 2498
        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }                               // 2499
        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)                      // 2500
        , width = 380                                                                                                  // 2501
        , height = 30                                                                                                  // 2502
        , container = null                                                                                             // 2503
        , tickFormat = null                                                                                            // 2504
        , color = nv.utils.getColor(['#1f77b4'])                                                                       // 2505
        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')                            // 2506
        ;                                                                                                              // 2507
                                                                                                                       // 2508
    function chart(selection) {                                                                                        // 2509
        selection.each(function(d, i) {                                                                                // 2510
            var availableWidth = width - margin.left - margin.right,                                                   // 2511
                availableHeight = height - margin.top - margin.bottom;                                                 // 2512
                                                                                                                       // 2513
            container = d3.select(this);                                                                               // 2514
            nv.utils.initSVG(container);                                                                               // 2515
                                                                                                                       // 2516
            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),                                          // 2517
                markerz = markers.call(this, d, i).slice().sort(d3.descending),                                        // 2518
                measurez = measures.call(this, d, i).slice().sort(d3.descending),                                      // 2519
                rangeLabelz = rangeLabels.call(this, d, i).slice(),                                                    // 2520
                markerLabelz = markerLabels.call(this, d, i).slice(),                                                  // 2521
                measureLabelz = measureLabels.call(this, d, i).slice();                                                // 2522
                                                                                                                       // 2523
            // Setup Scales                                                                                            // 2524
            // Compute the new x-scale.                                                                                // 2525
            var x1 = d3.scale.linear()                                                                                 // 2526
                .domain( d3.extent(d3.merge([forceX, rangez])) )                                                       // 2527
                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);                                           // 2528
                                                                                                                       // 2529
            // Retrieve the old x-scale, if this is an update.                                                         // 2530
            var x0 = this.__chart__ || d3.scale.linear()                                                               // 2531
                .domain([0, Infinity])                                                                                 // 2532
                .range(x1.range());                                                                                    // 2533
                                                                                                                       // 2534
            // Stash the new scale.                                                                                    // 2535
            this.__chart__ = x1;                                                                                       // 2536
                                                                                                                       // 2537
            var rangeMin = d3.min(rangez), //rangez[2]                                                                 // 2538
                rangeMax = d3.max(rangez), //rangez[0]                                                                 // 2539
                rangeAvg = rangez[1];                                                                                  // 2540
                                                                                                                       // 2541
            // Setup containers and skeleton of chart                                                                  // 2542
            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);                                           // 2543
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');                          // 2544
            var gEnter = wrapEnter.append('g');                                                                        // 2545
            var g = wrap.select('g');                                                                                  // 2546
                                                                                                                       // 2547
            gEnter.append('rect').attr('class', 'nv-range nv-rangeMax');                                               // 2548
            gEnter.append('rect').attr('class', 'nv-range nv-rangeAvg');                                               // 2549
            gEnter.append('rect').attr('class', 'nv-range nv-rangeMin');                                               // 2550
            gEnter.append('rect').attr('class', 'nv-measure');                                                         // 2551
                                                                                                                       // 2552
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 2553
                                                                                                                       // 2554
            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)
                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };                                                   // 2556
            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },                                                    // 2557
                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };                                                    // 2558
                                                                                                                       // 2559
            g.select('rect.nv-rangeMax')                                                                               // 2560
                .attr('height', availableHeight)                                                                       // 2561
                .attr('width', w1(rangeMax > 0 ? rangeMax : rangeMin))                                                 // 2562
                .attr('x', xp1(rangeMax > 0 ? rangeMax : rangeMin))                                                    // 2563
                .datum(rangeMax > 0 ? rangeMax : rangeMin)                                                             // 2564
                                                                                                                       // 2565
            g.select('rect.nv-rangeAvg')                                                                               // 2566
                .attr('height', availableHeight)                                                                       // 2567
                .attr('width', w1(rangeAvg))                                                                           // 2568
                .attr('x', xp1(rangeAvg))                                                                              // 2569
                .datum(rangeAvg)                                                                                       // 2570
                                                                                                                       // 2571
            g.select('rect.nv-rangeMin')                                                                               // 2572
                .attr('height', availableHeight)                                                                       // 2573
                .attr('width', w1(rangeMax))                                                                           // 2574
                .attr('x', xp1(rangeMax))                                                                              // 2575
                .attr('width', w1(rangeMax > 0 ? rangeMin : rangeMax))                                                 // 2576
                .attr('x', xp1(rangeMax > 0 ? rangeMin : rangeMax))                                                    // 2577
                .datum(rangeMax > 0 ? rangeMin : rangeMax)                                                             // 2578
                                                                                                                       // 2579
            g.select('rect.nv-measure')                                                                                // 2580
                .style('fill', color)                                                                                  // 2581
                .attr('height', availableHeight / 3)                                                                   // 2582
                .attr('y', availableHeight / 3)                                                                        // 2583
                .attr('width', measurez < 0 ?                                                                          // 2584
                    x1(0) - x1(measurez[0])                                                                            // 2585
                    : x1(measurez[0]) - x1(0))                                                                         // 2586
                .attr('x', xp1(measurez))                                                                              // 2587
                .on('mouseover', function() {                                                                          // 2588
                    dispatch.elementMouseover({                                                                        // 2589
                        value: measurez[0],                                                                            // 2590
                        label: measureLabelz[0] || 'Current',                                                          // 2591
                        color: d3.select(this).style("fill")                                                           // 2592
                    })                                                                                                 // 2593
                })                                                                                                     // 2594
                .on('mousemove', function() {                                                                          // 2595
                    dispatch.elementMousemove({                                                                        // 2596
                        value: measurez[0],                                                                            // 2597
                        label: measureLabelz[0] || 'Current',                                                          // 2598
                        color: d3.select(this).style("fill")                                                           // 2599
                    })                                                                                                 // 2600
                })                                                                                                     // 2601
                .on('mouseout', function() {                                                                           // 2602
                    dispatch.elementMouseout({                                                                         // 2603
                        value: measurez[0],                                                                            // 2604
                        label: measureLabelz[0] || 'Current',                                                          // 2605
                        color: d3.select(this).style("fill")                                                           // 2606
                    })                                                                                                 // 2607
                });                                                                                                    // 2608
                                                                                                                       // 2609
            var h3 =  availableHeight / 6;                                                                             // 2610
                                                                                                                       // 2611
            var markerData = markerz.map( function(marker, index) {                                                    // 2612
                return {value: marker, label: markerLabelz[index]}                                                     // 2613
            });                                                                                                        // 2614
            gEnter                                                                                                     // 2615
              .selectAll("path.nv-markerTriangle")                                                                     // 2616
              .data(markerData)                                                                                        // 2617
              .enter()                                                                                                 // 2618
              .append('path')                                                                                          // 2619
              .attr('class', 'nv-markerTriangle')                                                                      // 2620
              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' })
              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')                        // 2622
              .on('mouseover', function(d) {                                                                           // 2623
                dispatch.elementMouseover({                                                                            // 2624
                  value: d.value,                                                                                      // 2625
                  label: d.label || 'Previous',                                                                        // 2626
                  color: d3.select(this).style("fill"),                                                                // 2627
                  pos: [x1(d.value), availableHeight/2]                                                                // 2628
                })                                                                                                     // 2629
                                                                                                                       // 2630
              })                                                                                                       // 2631
              .on('mousemove', function(d) {                                                                           // 2632
                  dispatch.elementMousemove({                                                                          // 2633
                      value: d.value,                                                                                  // 2634
                      label: d.label || 'Previous',                                                                    // 2635
                      color: d3.select(this).style("fill")                                                             // 2636
                  })                                                                                                   // 2637
              })                                                                                                       // 2638
              .on('mouseout', function(d, i) {                                                                         // 2639
                  dispatch.elementMouseout({                                                                           // 2640
                      value: d.value,                                                                                  // 2641
                      label: d.label || 'Previous',                                                                    // 2642
                      color: d3.select(this).style("fill")                                                             // 2643
                  })                                                                                                   // 2644
              });                                                                                                      // 2645
                                                                                                                       // 2646
            wrap.selectAll('.nv-range')                                                                                // 2647
                .on('mouseover', function(d,i) {                                                                       // 2648
                    var label = rangeLabelz[i] || (!i ? "Maximum" : i == 1 ? "Mean" : "Minimum");                      // 2649
                    dispatch.elementMouseover({                                                                        // 2650
                        value: d,                                                                                      // 2651
                        label: label,                                                                                  // 2652
                        color: d3.select(this).style("fill")                                                           // 2653
                    })                                                                                                 // 2654
                })                                                                                                     // 2655
                .on('mousemove', function() {                                                                          // 2656
                    dispatch.elementMousemove({                                                                        // 2657
                        value: measurez[0],                                                                            // 2658
                        label: measureLabelz[0] || 'Previous',                                                         // 2659
                        color: d3.select(this).style("fill")                                                           // 2660
                    })                                                                                                 // 2661
                })                                                                                                     // 2662
                .on('mouseout', function(d,i) {                                                                        // 2663
                    var label = rangeLabelz[i] || (!i ? "Maximum" : i == 1 ? "Mean" : "Minimum");                      // 2664
                    dispatch.elementMouseout({                                                                         // 2665
                        value: d,                                                                                      // 2666
                        label: label,                                                                                  // 2667
                        color: d3.select(this).style("fill")                                                           // 2668
                    })                                                                                                 // 2669
                });                                                                                                    // 2670
        });                                                                                                            // 2671
                                                                                                                       // 2672
        return chart;                                                                                                  // 2673
    }                                                                                                                  // 2674
                                                                                                                       // 2675
    //============================================================                                                     // 2676
    // Expose Public Variables                                                                                         // 2677
    //------------------------------------------------------------                                                     // 2678
                                                                                                                       // 2679
    chart.dispatch = dispatch;                                                                                         // 2680
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 2681
                                                                                                                       // 2682
    chart._options = Object.create({}, {                                                                               // 2683
        // simple options, just get/set the necessary values                                                           // 2684
        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)
        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)     // 2686
        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)   // 2687
        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},                                   // 2688
        width:    {get: function(){return width;}, set: function(_){width=_;}},                                        // 2689
        height:    {get: function(){return height;}, set: function(_){height=_;}},                                     // 2690
        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},                         // 2691
                                                                                                                       // 2692
        // options that require extra logic in the setter                                                              // 2693
        margin: {get: function(){return margin;}, set: function(_){                                                    // 2694
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 2695
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 2696
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 2697
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 2698
        }},                                                                                                            // 2699
        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom                        // 2700
            orient = _;                                                                                                // 2701
            reverse = orient == 'right' || orient == 'bottom';                                                         // 2702
        }},                                                                                                            // 2703
        color:  {get: function(){return color;}, set: function(_){                                                     // 2704
            color = nv.utils.getColor(_);                                                                              // 2705
        }}                                                                                                             // 2706
    });                                                                                                                // 2707
                                                                                                                       // 2708
    nv.utils.initOptions(chart);                                                                                       // 2709
    return chart;                                                                                                      // 2710
};                                                                                                                     // 2711
                                                                                                                       // 2712
                                                                                                                       // 2713
                                                                                                                       // 2714
// Chart design based on the recommendations of Stephen Few. Implementation                                            // 2715
// based on the work of Clint Ivy, Jamie Love, and Jason Davies.                                                       // 2716
// http://projects.instantcognition.com/protovis/bulletchart/                                                          // 2717
nv.models.bulletChart = function() {                                                                                   // 2718
    "use strict";                                                                                                      // 2719
                                                                                                                       // 2720
    //============================================================                                                     // 2721
    // Public Variables with Default Settings                                                                          // 2722
    //------------------------------------------------------------                                                     // 2723
                                                                                                                       // 2724
    var bullet = nv.models.bullet();                                                                                   // 2725
    var tooltip = nv.models.tooltip();                                                                                 // 2726
                                                                                                                       // 2727
    var orient = 'left' // TODO top & bottom                                                                           // 2728
        , reverse = false                                                                                              // 2729
        , margin = {top: 5, right: 40, bottom: 20, left: 120}                                                          // 2730
        , ranges = function(d) { return d.ranges }                                                                     // 2731
        , markers = function(d) { return d.markers ? d.markers : [0] }                                                 // 2732
        , measures = function(d) { return d.measures }                                                                 // 2733
        , width = null                                                                                                 // 2734
        , height = 55                                                                                                  // 2735
        , tickFormat = null                                                                                            // 2736
	, ticks = null                                                                                                        // 2737
        , noData = null                                                                                                // 2738
        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide')                                                         // 2739
        ;                                                                                                              // 2740
                                                                                                                       // 2741
    tooltip.duration(0).headerEnabled(false);                                                                          // 2742
                                                                                                                       // 2743
    function chart(selection) {                                                                                        // 2744
        selection.each(function(d, i) {                                                                                // 2745
            var container = d3.select(this);                                                                           // 2746
            nv.utils.initSVG(container);                                                                               // 2747
                                                                                                                       // 2748
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 2749
                availableHeight = height - margin.top - margin.bottom,                                                 // 2750
                that = this;                                                                                           // 2751
                                                                                                                       // 2752
            chart.update = function() { chart(selection) };                                                            // 2753
            chart.container = this;                                                                                    // 2754
                                                                                                                       // 2755
            // Display No Data message if there's nothing to show.                                                     // 2756
            if (!d || !ranges.call(this, d, i)) {                                                                      // 2757
                nv.utils.noData(chart, container)                                                                      // 2758
                return chart;                                                                                          // 2759
            } else {                                                                                                   // 2760
                container.selectAll('.nv-noData').remove();                                                            // 2761
            }                                                                                                          // 2762
                                                                                                                       // 2763
            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),                                          // 2764
                markerz = markers.call(this, d, i).slice().sort(d3.descending),                                        // 2765
                measurez = measures.call(this, d, i).slice().sort(d3.descending);                                      // 2766
                                                                                                                       // 2767
            // Setup containers and skeleton of chart                                                                  // 2768
            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);                                      // 2769
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');                     // 2770
            var gEnter = wrapEnter.append('g');                                                                        // 2771
            var g = wrap.select('g');                                                                                  // 2772
                                                                                                                       // 2773
            gEnter.append('g').attr('class', 'nv-bulletWrap');                                                         // 2774
            gEnter.append('g').attr('class', 'nv-titles');                                                             // 2775
                                                                                                                       // 2776
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 2777
                                                                                                                       // 2778
            // Compute the new x-scale.                                                                                // 2779
            var x1 = d3.scale.linear()                                                                                 // 2780
                .domain([0, Math.max(rangez[0], markerz[0], measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain
                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);                                           // 2782
                                                                                                                       // 2783
            // Retrieve the old x-scale, if this is an update.                                                         // 2784
            var x0 = this.__chart__ || d3.scale.linear()                                                               // 2785
                .domain([0, Infinity])                                                                                 // 2786
                .range(x1.range());                                                                                    // 2787
                                                                                                                       // 2788
            // Stash the new scale.                                                                                    // 2789
            this.__chart__ = x1;                                                                                       // 2790
                                                                                                                       // 2791
            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)
                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };                                                   // 2793
                                                                                                                       // 2794
            var title = gEnter.select('.nv-titles').append('g')                                                        // 2795
                .attr('text-anchor', 'end')                                                                            // 2796
                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');                 // 2797
            title.append('text')                                                                                       // 2798
                .attr('class', 'nv-title')                                                                             // 2799
                .text(function(d) { return d.title; });                                                                // 2800
                                                                                                                       // 2801
            title.append('text')                                                                                       // 2802
                .attr('class', 'nv-subtitle')                                                                          // 2803
                .attr('dy', '1em')                                                                                     // 2804
                .text(function(d) { return d.subtitle; });                                                             // 2805
                                                                                                                       // 2806
            bullet                                                                                                     // 2807
                .width(availableWidth)                                                                                 // 2808
                .height(availableHeight)                                                                               // 2809
                                                                                                                       // 2810
            var bulletWrap = g.select('.nv-bulletWrap');                                                               // 2811
            d3.transition(bulletWrap).call(bullet);                                                                    // 2812
                                                                                                                       // 2813
            // Compute the tick format.                                                                                // 2814
            var format = tickFormat || x1.tickFormat( availableWidth / 100 );                                          // 2815
                                                                                                                       // 2816
            // Update the tick groups.                                                                                 // 2817
            var tick = g.selectAll('g.nv-tick')                                                                        // 2818
                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {                                 // 2819
                    return this.textContent || format(d);                                                              // 2820
                });                                                                                                    // 2821
                                                                                                                       // 2822
            // Initialize the ticks with the old scale, x0.                                                            // 2823
            var tickEnter = tick.enter().append('g')                                                                   // 2824
                .attr('class', 'nv-tick')                                                                              // 2825
                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })                                // 2826
                .style('opacity', 1e-6);                                                                               // 2827
                                                                                                                       // 2828
            tickEnter.append('line')                                                                                   // 2829
                .attr('y1', availableHeight)                                                                           // 2830
                .attr('y2', availableHeight * 7 / 6);                                                                  // 2831
                                                                                                                       // 2832
            tickEnter.append('text')                                                                                   // 2833
                .attr('text-anchor', 'middle')                                                                         // 2834
                .attr('dy', '1em')                                                                                     // 2835
                .attr('y', availableHeight * 7 / 6)                                                                    // 2836
                .text(format);                                                                                         // 2837
                                                                                                                       // 2838
            // Transition the updating ticks to the new scale, x1.                                                     // 2839
            var tickUpdate = d3.transition(tick)                                                                       // 2840
                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })                                // 2841
                .style('opacity', 1);                                                                                  // 2842
                                                                                                                       // 2843
            tickUpdate.select('line')                                                                                  // 2844
                .attr('y1', availableHeight)                                                                           // 2845
                .attr('y2', availableHeight * 7 / 6);                                                                  // 2846
                                                                                                                       // 2847
            tickUpdate.select('text')                                                                                  // 2848
                .attr('y', availableHeight * 7 / 6);                                                                   // 2849
                                                                                                                       // 2850
            // Transition the exiting ticks to the new scale, x1.                                                      // 2851
            d3.transition(tick.exit())                                                                                 // 2852
                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })                                // 2853
                .style('opacity', 1e-6)                                                                                // 2854
                .remove();                                                                                             // 2855
        });                                                                                                            // 2856
                                                                                                                       // 2857
        d3.timer.flush();                                                                                              // 2858
        return chart;                                                                                                  // 2859
    }                                                                                                                  // 2860
                                                                                                                       // 2861
    //============================================================                                                     // 2862
    // Event Handling/Dispatching (out of chart's scope)                                                               // 2863
    //------------------------------------------------------------                                                     // 2864
                                                                                                                       // 2865
    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {                                                     // 2866
        evt['series'] = {                                                                                              // 2867
            key: evt.label,                                                                                            // 2868
            value: evt.value,                                                                                          // 2869
            color: evt.color                                                                                           // 2870
        };                                                                                                             // 2871
        tooltip.data(evt).hidden(false);                                                                               // 2872
    });                                                                                                                // 2873
                                                                                                                       // 2874
    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {                                                      // 2875
        tooltip.hidden(true);                                                                                          // 2876
    });                                                                                                                // 2877
                                                                                                                       // 2878
    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {                                                     // 2879
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 2880
    });                                                                                                                // 2881
                                                                                                                       // 2882
    //============================================================                                                     // 2883
    // Expose Public Variables                                                                                         // 2884
    //------------------------------------------------------------                                                     // 2885
                                                                                                                       // 2886
    chart.bullet = bullet;                                                                                             // 2887
    chart.dispatch = dispatch;                                                                                         // 2888
    chart.tooltip = tooltip;                                                                                           // 2889
                                                                                                                       // 2890
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 2891
                                                                                                                       // 2892
    chart._options = Object.create({}, {                                                                               // 2893
        // simple options, just get/set the necessary values                                                           // 2894
        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)
        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)     // 2896
        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)   // 2897
        width:    {get: function(){return width;}, set: function(_){width=_;}},                                        // 2898
        height:    {get: function(){return height;}, set: function(_){height=_;}},                                     // 2899
        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},                         // 2900
        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},                                        // 2901
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 2902
                                                                                                                       // 2903
        // deprecated options                                                                                          // 2904
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 2905
            // deprecated after 1.7.1                                                                                  // 2906
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 2907
            tooltip.enabled(!!_);                                                                                      // 2908
        }},                                                                                                            // 2909
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 2910
            // deprecated after 1.7.1                                                                                  // 2911
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 2912
            tooltip.contentGenerator(_);                                                                               // 2913
        }},                                                                                                            // 2914
                                                                                                                       // 2915
        // options that require extra logic in the setter                                                              // 2916
        margin: {get: function(){return margin;}, set: function(_){                                                    // 2917
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 2918
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 2919
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 2920
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 2921
        }},                                                                                                            // 2922
        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom                        // 2923
            orient = _;                                                                                                // 2924
            reverse = orient == 'right' || orient == 'bottom';                                                         // 2925
        }}                                                                                                             // 2926
    });                                                                                                                // 2927
                                                                                                                       // 2928
    nv.utils.inheritOptions(chart, bullet);                                                                            // 2929
    nv.utils.initOptions(chart);                                                                                       // 2930
                                                                                                                       // 2931
    return chart;                                                                                                      // 2932
};                                                                                                                     // 2933
                                                                                                                       // 2934
                                                                                                                       // 2935
                                                                                                                       // 2936
nv.models.candlestickBar = function() {                                                                                // 2937
    "use strict";                                                                                                      // 2938
                                                                                                                       // 2939
    //============================================================                                                     // 2940
    // Public Variables with Default Settings                                                                          // 2941
    //------------------------------------------------------------                                                     // 2942
                                                                                                                       // 2943
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 2944
        , width = null                                                                                                 // 2945
        , height = null                                                                                                // 2946
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 2947
        , container                                                                                                    // 2948
        , x = d3.scale.linear()                                                                                        // 2949
        , y = d3.scale.linear()                                                                                        // 2950
        , getX = function(d) { return d.x }                                                                            // 2951
        , getY = function(d) { return d.y }                                                                            // 2952
        , getOpen = function(d) { return d.open }                                                                      // 2953
        , getClose = function(d) { return d.close }                                                                    // 2954
        , getHigh = function(d) { return d.high }                                                                      // 2955
        , getLow = function(d) { return d.low }                                                                        // 2956
        , forceX = []                                                                                                  // 2957
        , forceY = []                                                                                                  // 2958
        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
        , clipEdge = true                                                                                              // 2960
        , color = nv.utils.defaultColor()                                                                              // 2961
        , interactive = false                                                                                          // 2962
        , xDomain                                                                                                      // 2963
        , yDomain                                                                                                      // 2964
        , xRange                                                                                                       // 2965
        , yRange                                                                                                       // 2966
        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')
        ;                                                                                                              // 2968
                                                                                                                       // 2969
    //============================================================                                                     // 2970
    // Private Variables                                                                                               // 2971
    //------------------------------------------------------------                                                     // 2972
                                                                                                                       // 2973
    function chart(selection) {                                                                                        // 2974
        selection.each(function(data) {                                                                                // 2975
            container = d3.select(this);                                                                               // 2976
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 2977
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 2978
                                                                                                                       // 2979
            nv.utils.initSVG(container);                                                                               // 2980
                                                                                                                       // 2981
            // Width of the candlestick bars.                                                                          // 2982
            var barWidth = (availableWidth / data[0].values.length) * .45;                                             // 2983
                                                                                                                       // 2984
            // Setup Scales                                                                                            // 2985
            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));                                  // 2986
                                                                                                                       // 2987
            if (padData)                                                                                               // 2988
                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
            else                                                                                                       // 2990
                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);                              // 2991
                                                                                                                       // 2992
            y.domain(yDomain || [                                                                                      // 2993
                    d3.min(data[0].values.map(getLow).concat(forceY)),                                                 // 2994
                    d3.max(data[0].values.map(getHigh).concat(forceY))                                                 // 2995
                ]                                                                                                      // 2996
            ).range(yRange || [availableHeight, 0]);                                                                   // 2997
                                                                                                                       // 2998
            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
            if (x.domain()[0] === x.domain()[1])                                                                       // 3000
                x.domain()[0] ?                                                                                        // 3001
                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])             // 3002
                    : x.domain([-1,1]);                                                                                // 3003
                                                                                                                       // 3004
            if (y.domain()[0] === y.domain()[1])                                                                       // 3005
                y.domain()[0] ?                                                                                        // 3006
                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])             // 3007
                    : y.domain([-1,1]);                                                                                // 3008
                                                                                                                       // 3009
            // Setup containers and skeleton of chart                                                                  // 3010
            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);                // 3011
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');                  // 3012
            var defsEnter = wrapEnter.append('defs');                                                                  // 3013
            var gEnter = wrapEnter.append('g');                                                                        // 3014
            var g = wrap.select('g');                                                                                  // 3015
                                                                                                                       // 3016
            gEnter.append('g').attr('class', 'nv-ticks');                                                              // 3017
                                                                                                                       // 3018
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 3019
                                                                                                                       // 3020
            container                                                                                                  // 3021
                .on('click', function(d,i) {                                                                           // 3022
                    dispatch.chartClick({                                                                              // 3023
                        data: d,                                                                                       // 3024
                        index: i,                                                                                      // 3025
                        pos: d3.event,                                                                                 // 3026
                        id: id                                                                                         // 3027
                    });                                                                                                // 3028
                });                                                                                                    // 3029
                                                                                                                       // 3030
            defsEnter.append('clipPath')                                                                               // 3031
                .attr('id', 'nv-chart-clip-path-' + id)                                                                // 3032
                .append('rect');                                                                                       // 3033
                                                                                                                       // 3034
            wrap.select('#nv-chart-clip-path-' + id + ' rect')                                                         // 3035
                .attr('width', availableWidth)                                                                         // 3036
                .attr('height', availableHeight);                                                                      // 3037
                                                                                                                       // 3038
            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');                             // 3039
                                                                                                                       // 3040
            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')                                                 // 3041
                .data(function(d) { return d });                                                                       // 3042
            ticks.exit().remove();                                                                                     // 3043
                                                                                                                       // 3044
            // The colors are currently controlled by CSS.                                                             // 3045
            var tickGroups = ticks.enter().append('g')                                                                 // 3046
                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});
                                                                                                                       // 3048
            var lines = tickGroups.append('line')                                                                      // 3049
                .attr('class', 'nv-candlestick-lines')                                                                 // 3050
                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })                    // 3051
                .attr('x1', 0)                                                                                         // 3052
                .attr('y1', function(d, i) { return y(getHigh(d, i)); })                                               // 3053
                .attr('x2', 0)                                                                                         // 3054
                .attr('y2', function(d, i) { return y(getLow(d, i)); });                                               // 3055
                                                                                                                       // 3056
            var rects = tickGroups.append('rect')                                                                      // 3057
                .attr('class', 'nv-candlestick-rects nv-bars')                                                         // 3058
                .attr('transform', function(d, i) {                                                                    // 3059
                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','                                           // 3060
                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))  // 3061
                    + ')';                                                                                             // 3062
                })                                                                                                     // 3063
                .attr('x', 0)                                                                                          // 3064
                .attr('y', 0)                                                                                          // 3065
                .attr('width', barWidth)                                                                               // 3066
                .attr('height', function(d, i) {                                                                       // 3067
                    var open = getOpen(d, i);                                                                          // 3068
                    var close = getClose(d, i);                                                                        // 3069
                    return open > close ? y(close) - y(open) : y(open) - y(close);                                     // 3070
                });                                                                                                    // 3071
                                                                                                                       // 3072
            container.selectAll('.nv-candlestick-lines').transition()                                                  // 3073
                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })                    // 3074
                .attr('x1', 0)                                                                                         // 3075
                .attr('y1', function(d, i) { return y(getHigh(d, i)); })                                               // 3076
                .attr('x2', 0)                                                                                         // 3077
                .attr('y2', function(d, i) { return y(getLow(d, i)); });                                               // 3078
                                                                                                                       // 3079
            container.selectAll('.nv-candlestick-rects').transition()                                                  // 3080
                .attr('transform', function(d, i) {                                                                    // 3081
                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','                                           // 3082
                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))  // 3083
                    + ')';                                                                                             // 3084
                })                                                                                                     // 3085
                .attr('x', 0)                                                                                          // 3086
                .attr('y', 0)                                                                                          // 3087
                .attr('width', barWidth)                                                                               // 3088
                .attr('height', function(d, i) {                                                                       // 3089
                    var open = getOpen(d, i);                                                                          // 3090
                    var close = getClose(d, i);                                                                        // 3091
                    return open > close ? y(close) - y(open) : y(open) - y(close);                                     // 3092
                });                                                                                                    // 3093
        });                                                                                                            // 3094
                                                                                                                       // 3095
        return chart;                                                                                                  // 3096
    }                                                                                                                  // 3097
                                                                                                                       // 3098
                                                                                                                       // 3099
    //Create methods to allow outside functions to highlight a specific bar.                                           // 3100
    chart.highlightPoint = function(pointIndex, isHoverOver) {                                                         // 3101
        chart.clearHighlights();                                                                                       // 3102
        container.select(".nv-candlestickBar .nv-tick-0-" + pointIndex)                                                // 3103
            .classed("hover", isHoverOver)                                                                             // 3104
        ;                                                                                                              // 3105
    };                                                                                                                 // 3106
                                                                                                                       // 3107
    chart.clearHighlights = function() {                                                                               // 3108
        container.select(".nv-candlestickBar .nv-tick.hover")                                                          // 3109
            .classed("hover", false)                                                                                   // 3110
        ;                                                                                                              // 3111
    };                                                                                                                 // 3112
                                                                                                                       // 3113
    //============================================================                                                     // 3114
    // Expose Public Variables                                                                                         // 3115
    //------------------------------------------------------------                                                     // 3116
                                                                                                                       // 3117
    chart.dispatch = dispatch;                                                                                         // 3118
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 3119
                                                                                                                       // 3120
    chart._options = Object.create({}, {                                                                               // 3121
        // simple options, just get/set the necessary values                                                           // 3122
        width:    {get: function(){return width;}, set: function(_){width=_;}},                                        // 3123
        height:   {get: function(){return height;}, set: function(_){height=_;}},                                      // 3124
        xScale:   {get: function(){return x;}, set: function(_){x=_;}},                                                // 3125
        yScale:   {get: function(){return y;}, set: function(_){y=_;}},                                                // 3126
        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                    // 3127
        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                    // 3128
        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},                                      // 3129
        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},                                      // 3130
        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},                                      // 3131
        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},                                      // 3132
        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},                                    // 3133
        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},                                  // 3134
        id:       {get: function(){return id;}, set: function(_){id=_;}},                                              // 3135
        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},                         // 3136
                                                                                                                       // 3137
        x:     {get: function(){return getX;}, set: function(_){getX=_;}},                                             // 3138
        y:     {get: function(){return getY;}, set: function(_){getY=_;}},                                             // 3139
        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},                                     // 3140
        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},                                   // 3141
        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},                                       // 3142
        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},                                         // 3143
                                                                                                                       // 3144
        // options that require extra logic in the setter                                                              // 3145
        margin: {get: function(){return margin;}, set: function(_){                                                    // 3146
            margin.top    = _.top    != undefined ? _.top    : margin.top;                                             // 3147
            margin.right  = _.right  != undefined ? _.right  : margin.right;                                           // 3148
            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;                                          // 3149
            margin.left   = _.left   != undefined ? _.left   : margin.left;                                            // 3150
        }},                                                                                                            // 3151
        color:  {get: function(){return color;}, set: function(_){                                                     // 3152
            color = nv.utils.getColor(_);                                                                              // 3153
        }}                                                                                                             // 3154
    });                                                                                                                // 3155
                                                                                                                       // 3156
    nv.utils.initOptions(chart);                                                                                       // 3157
    return chart;                                                                                                      // 3158
};                                                                                                                     // 3159
                                                                                                                       // 3160
nv.models.cumulativeLineChart = function() {                                                                           // 3161
    "use strict";                                                                                                      // 3162
                                                                                                                       // 3163
    //============================================================                                                     // 3164
    // Public Variables with Default Settings                                                                          // 3165
    //------------------------------------------------------------                                                     // 3166
                                                                                                                       // 3167
    var lines = nv.models.line()                                                                                       // 3168
        , xAxis = nv.models.axis()                                                                                     // 3169
        , yAxis = nv.models.axis()                                                                                     // 3170
        , legend = nv.models.legend()                                                                                  // 3171
        , controls = nv.models.legend()                                                                                // 3172
        , interactiveLayer = nv.interactiveGuideline()                                                                 // 3173
        , tooltip = nv.models.tooltip()                                                                                // 3174
        ;                                                                                                              // 3175
                                                                                                                       // 3176
    var margin = {top: 30, right: 30, bottom: 50, left: 60}                                                            // 3177
        , color = nv.utils.defaultColor()                                                                              // 3178
        , width = null                                                                                                 // 3179
        , height = null                                                                                                // 3180
        , showLegend = true                                                                                            // 3181
        , showXAxis = true                                                                                             // 3182
        , showYAxis = true                                                                                             // 3183
        , rightAlignYAxis = false                                                                                      // 3184
        , showControls = true                                                                                          // 3185
        , useInteractiveGuideline = false                                                                              // 3186
        , rescaleY = true                                                                                              // 3187
        , x //can be accessed via chart.xScale()                                                                       // 3188
        , y //can be accessed via chart.yScale()                                                                       // 3189
        , id = lines.id()                                                                                              // 3190
        , state = nv.utils.state()                                                                                     // 3191
        , defaultState = null                                                                                          // 3192
        , noData = null                                                                                                // 3193
        , average = function(d) { return d.average }                                                                   // 3194
        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')                                            // 3195
        , transitionDuration = 250                                                                                     // 3196
        , duration = 250                                                                                               // 3197
        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.                 // 3198
        ;                                                                                                              // 3199
                                                                                                                       // 3200
    state.index = 0;                                                                                                   // 3201
    state.rescaleY = rescaleY;                                                                                         // 3202
                                                                                                                       // 3203
    xAxis.orient('bottom').tickPadding(7);                                                                             // 3204
    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');                                                                // 3205
                                                                                                                       // 3206
    tooltip.valueFormatter(function(d, i) {                                                                            // 3207
        return yAxis.tickFormat()(d, i);                                                                               // 3208
    }).headerFormatter(function(d, i) {                                                                                // 3209
        return xAxis.tickFormat()(d, i);                                                                               // 3210
    });                                                                                                                // 3211
                                                                                                                       // 3212
    controls.updateState(false);                                                                                       // 3213
                                                                                                                       // 3214
    //============================================================                                                     // 3215
    // Private Variables                                                                                               // 3216
    //------------------------------------------------------------                                                     // 3217
                                                                                                                       // 3218
    var dx = d3.scale.linear()                                                                                         // 3219
        , index = {i: 0, x: 0}                                                                                         // 3220
        , renderWatch = nv.utils.renderWatch(dispatch, duration)                                                       // 3221
        ;                                                                                                              // 3222
                                                                                                                       // 3223
    var stateGetter = function(data) {                                                                                 // 3224
        return function(){                                                                                             // 3225
            return {                                                                                                   // 3226
                active: data.map(function(d) { return !d.disabled }),                                                  // 3227
                index: index.i,                                                                                        // 3228
                rescaleY: rescaleY                                                                                     // 3229
            };                                                                                                         // 3230
        }                                                                                                              // 3231
    };                                                                                                                 // 3232
                                                                                                                       // 3233
    var stateSetter = function(data) {                                                                                 // 3234
        return function(state) {                                                                                       // 3235
            if (state.index !== undefined)                                                                             // 3236
                index.i = state.index;                                                                                 // 3237
            if (state.rescaleY !== undefined)                                                                          // 3238
                rescaleY = state.rescaleY;                                                                             // 3239
            if (state.active !== undefined)                                                                            // 3240
                data.forEach(function(series,i) {                                                                      // 3241
                    series.disabled = !state.active[i];                                                                // 3242
                });                                                                                                    // 3243
        }                                                                                                              // 3244
    };                                                                                                                 // 3245
                                                                                                                       // 3246
    function chart(selection) {                                                                                        // 3247
        renderWatch.reset();                                                                                           // 3248
        renderWatch.models(lines);                                                                                     // 3249
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 3250
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 3251
        selection.each(function(data) {                                                                                // 3252
            var container = d3.select(this);                                                                           // 3253
            nv.utils.initSVG(container);                                                                               // 3254
            container.classed('nv-chart-' + id, true);                                                                 // 3255
            var that = this;                                                                                           // 3256
                                                                                                                       // 3257
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 3258
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 3259
                                                                                                                       // 3260
            chart.update = function() {                                                                                // 3261
                if (duration === 0)                                                                                    // 3262
                    container.call(chart);                                                                             // 3263
                else                                                                                                   // 3264
                    container.transition().duration(duration).call(chart)                                              // 3265
            };                                                                                                         // 3266
            chart.container = this;                                                                                    // 3267
                                                                                                                       // 3268
            state                                                                                                      // 3269
                .setter(stateSetter(data), chart.update)                                                               // 3270
                .getter(stateGetter(data))                                                                             // 3271
                .update();                                                                                             // 3272
                                                                                                                       // 3273
            // DEPRECATED set state.disableddisabled                                                                   // 3274
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 3275
                                                                                                                       // 3276
            if (!defaultState) {                                                                                       // 3277
                var key;                                                                                               // 3278
                defaultState = {};                                                                                     // 3279
                for (key in state) {                                                                                   // 3280
                    if (state[key] instanceof Array)                                                                   // 3281
                        defaultState[key] = state[key].slice(0);                                                       // 3282
                    else                                                                                               // 3283
                        defaultState[key] = state[key];                                                                // 3284
                }                                                                                                      // 3285
            }                                                                                                          // 3286
                                                                                                                       // 3287
            var indexDrag = d3.behavior.drag()                                                                         // 3288
                .on('dragstart', dragStart)                                                                            // 3289
                .on('drag', dragMove)                                                                                  // 3290
                .on('dragend', dragEnd);                                                                               // 3291
                                                                                                                       // 3292
                                                                                                                       // 3293
            function dragStart(d,i) {                                                                                  // 3294
                d3.select(chart.container)                                                                             // 3295
                    .style('cursor', 'ew-resize');                                                                     // 3296
            }                                                                                                          // 3297
                                                                                                                       // 3298
            function dragMove(d,i) {                                                                                   // 3299
                index.x = d3.event.x;                                                                                  // 3300
                index.i = Math.round(dx.invert(index.x));                                                              // 3301
                updateZero();                                                                                          // 3302
            }                                                                                                          // 3303
                                                                                                                       // 3304
            function dragEnd(d,i) {                                                                                    // 3305
                d3.select(chart.container)                                                                             // 3306
                    .style('cursor', 'auto');                                                                          // 3307
                                                                                                                       // 3308
                // update state and send stateChange with new index                                                    // 3309
                state.index = index.i;                                                                                 // 3310
                dispatch.stateChange(state);                                                                           // 3311
            }                                                                                                          // 3312
                                                                                                                       // 3313
            // Display No Data message if there's nothing to show.                                                     // 3314
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 3315
                nv.utils.noData(chart, container)                                                                      // 3316
                return chart;                                                                                          // 3317
            } else {                                                                                                   // 3318
                container.selectAll('.nv-noData').remove();                                                            // 3319
            }                                                                                                          // 3320
                                                                                                                       // 3321
            // Setup Scales                                                                                            // 3322
            x = lines.xScale();                                                                                        // 3323
            y = lines.yScale();                                                                                        // 3324
                                                                                                                       // 3325
            if (!rescaleY) {                                                                                           // 3326
                var seriesDomains = data                                                                               // 3327
                    .filter(function(series) { return !series.disabled })                                              // 3328
                    .map(function(series,i) {                                                                          // 3329
                        var initialDomain = d3.extent(series.values, lines.y());                                       // 3330
                                                                                                                       // 3331
                        //account for series being disabled when losing 95% or more                                    // 3332
                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;                                          // 3333
                                                                                                                       // 3334
                        return [                                                                                       // 3335
                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),                        // 3336
                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])                         // 3337
                        ];                                                                                             // 3338
                    });                                                                                                // 3339
                                                                                                                       // 3340
                var completeDomain = [                                                                                 // 3341
                    d3.min(seriesDomains, function(d) { return d[0] }),                                                // 3342
                    d3.max(seriesDomains, function(d) { return d[1] })                                                 // 3343
                ];                                                                                                     // 3344
                                                                                                                       // 3345
                lines.yDomain(completeDomain);                                                                         // 3346
            } else {                                                                                                   // 3347
                lines.yDomain(null);                                                                                   // 3348
            }                                                                                                          // 3349
                                                                                                                       // 3350
            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length                            // 3351
                .range([0, availableWidth])                                                                            // 3352
                .clamp(true);                                                                                          // 3353
                                                                                                                       // 3354
            var data = indexify(index.i, data);                                                                        // 3355
                                                                                                                       // 3356
            // Setup containers and skeleton of chart                                                                  // 3357
            var interactivePointerEvents = (useInteractiveGuideline) ? "none" : "all";                                 // 3358
            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);                                // 3359
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');         // 3360
            var g = wrap.select('g');                                                                                  // 3361
                                                                                                                       // 3362
            gEnter.append('g').attr('class', 'nv-interactive');                                                        // 3363
            gEnter.append('g').attr('class', 'nv-x nv-axis').style("pointer-events","none");                           // 3364
            gEnter.append('g').attr('class', 'nv-y nv-axis');                                                          // 3365
            gEnter.append('g').attr('class', 'nv-background');                                                         // 3366
            gEnter.append('g').attr('class', 'nv-linesWrap').style("pointer-events",interactivePointerEvents);         // 3367
            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style("pointer-events","none");                        // 3368
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 3369
            gEnter.append('g').attr('class', 'nv-controlsWrap');                                                       // 3370
                                                                                                                       // 3371
            // Legend                                                                                                  // 3372
            if (showLegend) {                                                                                          // 3373
                legend.width(availableWidth);                                                                          // 3374
                                                                                                                       // 3375
                g.select('.nv-legendWrap')                                                                             // 3376
                    .datum(data)                                                                                       // 3377
                    .call(legend);                                                                                     // 3378
                                                                                                                       // 3379
                if ( margin.top != legend.height()) {                                                                  // 3380
                    margin.top = legend.height();                                                                      // 3381
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 3382
                }                                                                                                      // 3383
                                                                                                                       // 3384
                g.select('.nv-legendWrap')                                                                             // 3385
                    .attr('transform', 'translate(0,' + (-margin.top) +')')                                            // 3386
            }                                                                                                          // 3387
                                                                                                                       // 3388
            // Controls                                                                                                // 3389
            if (showControls) {                                                                                        // 3390
                var controlsData = [                                                                                   // 3391
                    { key: 'Re-scale y-axis', disabled: !rescaleY }                                                    // 3392
                ];                                                                                                     // 3393
                                                                                                                       // 3394
                controls                                                                                               // 3395
                    .width(140)                                                                                        // 3396
                    .color(['#444', '#444', '#444'])                                                                   // 3397
                    .rightAlign(false)                                                                                 // 3398
                    .margin({top: 5, right: 0, bottom: 5, left: 20})                                                   // 3399
                ;                                                                                                      // 3400
                                                                                                                       // 3401
                g.select('.nv-controlsWrap')                                                                           // 3402
                    .datum(controlsData)                                                                               // 3403
                    .attr('transform', 'translate(0,' + (-margin.top) +')')                                            // 3404
                    .call(controls);                                                                                   // 3405
            }                                                                                                          // 3406
                                                                                                                       // 3407
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 3408
                                                                                                                       // 3409
            if (rightAlignYAxis) {                                                                                     // 3410
                g.select(".nv-y.nv-axis")                                                                              // 3411
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 3412
            }                                                                                                          // 3413
                                                                                                                       // 3414
            // Show error if series goes below 100%                                                                    // 3415
            var tempDisabled = data.filter(function(d) { return d.tempDisabled });                                     // 3416
                                                                                                                       // 3417
            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates                                   // 3418
            if (tempDisabled.length) {                                                                                 // 3419
                wrap.append('text').attr('class', 'tempDisabled')                                                      // 3420
                    .attr('x', availableWidth / 2)                                                                     // 3421
                    .attr('y', '-.71em')                                                                               // 3422
                    .style('text-anchor', 'end')                                                                       // 3423
                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');
            }                                                                                                          // 3425
                                                                                                                       // 3426
            //Set up interactive layer                                                                                 // 3427
            if (useInteractiveGuideline) {                                                                             // 3428
                interactiveLayer                                                                                       // 3429
                    .width(availableWidth)                                                                             // 3430
                    .height(availableHeight)                                                                           // 3431
                    .margin({left:margin.left,top:margin.top})                                                         // 3432
                    .svgContainer(container)                                                                           // 3433
                    .xScale(x);                                                                                        // 3434
                wrap.select(".nv-interactive").call(interactiveLayer);                                                 // 3435
            }                                                                                                          // 3436
                                                                                                                       // 3437
            gEnter.select('.nv-background')                                                                            // 3438
                .append('rect');                                                                                       // 3439
                                                                                                                       // 3440
            g.select('.nv-background rect')                                                                            // 3441
                .attr('width', availableWidth)                                                                         // 3442
                .attr('height', availableHeight);                                                                      // 3443
                                                                                                                       // 3444
            lines                                                                                                      // 3445
                //.x(function(d) { return d.x })                                                                       // 3446
                .y(function(d) { return d.display.y })                                                                 // 3447
                .width(availableWidth)                                                                                 // 3448
                .height(availableHeight)                                                                               // 3449
                .color(data.map(function(d,i) {                                                                        // 3450
                    return d.color || color(d, i);                                                                     // 3451
                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));                      // 3452
                                                                                                                       // 3453
            var linesWrap = g.select('.nv-linesWrap')                                                                  // 3454
                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));                           // 3455
                                                                                                                       // 3456
            linesWrap.call(lines);                                                                                     // 3457
                                                                                                                       // 3458
            //Store a series index number in the data array.                                                           // 3459
            data.forEach(function(d,i) {                                                                               // 3460
                d.seriesIndex = i;                                                                                     // 3461
            });                                                                                                        // 3462
                                                                                                                       // 3463
            var avgLineData = data.filter(function(d) {                                                                // 3464
                return !d.disabled && !!average(d);                                                                    // 3465
            });                                                                                                        // 3466
                                                                                                                       // 3467
            var avgLines = g.select(".nv-avgLinesWrap").selectAll("line")                                              // 3468
                .data(avgLineData, function(d) { return d.key; });                                                     // 3469
                                                                                                                       // 3470
            var getAvgLineY = function(d) {                                                                            // 3471
                //If average lines go off the svg element, clamp them to the svg bounds.                               // 3472
                var yVal = y(average(d));                                                                              // 3473
                if (yVal < 0) return 0;                                                                                // 3474
                if (yVal > availableHeight) return availableHeight;                                                    // 3475
                return yVal;                                                                                           // 3476
            };                                                                                                         // 3477
                                                                                                                       // 3478
            avgLines.enter()                                                                                           // 3479
                .append('line')                                                                                        // 3480
                .style('stroke-width',2)                                                                               // 3481
                .style('stroke-dasharray','10,10')                                                                     // 3482
                .style('stroke',function (d,i) {                                                                       // 3483
                    return lines.color()(d,d.seriesIndex);                                                             // 3484
                })                                                                                                     // 3485
                .attr('x1',0)                                                                                          // 3486
                .attr('x2',availableWidth)                                                                             // 3487
                .attr('y1', getAvgLineY)                                                                               // 3488
                .attr('y2', getAvgLineY);                                                                              // 3489
                                                                                                                       // 3490
            avgLines                                                                                                   // 3491
                .style('stroke-opacity',function(d){                                                                   // 3492
                    //If average lines go offscreen, make them transparent                                             // 3493
                    var yVal = y(average(d));                                                                          // 3494
                    if (yVal < 0 || yVal > availableHeight) return 0;                                                  // 3495
                    return 1;                                                                                          // 3496
                })                                                                                                     // 3497
                .attr('x1',0)                                                                                          // 3498
                .attr('x2',availableWidth)                                                                             // 3499
                .attr('y1', getAvgLineY)                                                                               // 3500
                .attr('y2', getAvgLineY);                                                                              // 3501
                                                                                                                       // 3502
            avgLines.exit().remove();                                                                                  // 3503
                                                                                                                       // 3504
            //Create index line                                                                                        // 3505
            var indexLine = linesWrap.selectAll('.nv-indexLine')                                                       // 3506
                .data([index]);                                                                                        // 3507
            indexLine.enter().append('rect').attr('class', 'nv-indexLine')                                             // 3508
                .attr('width', 3)                                                                                      // 3509
                .attr('x', -2)                                                                                         // 3510
                .attr('fill', 'red')                                                                                   // 3511
                .attr('fill-opacity', .5)                                                                              // 3512
                .style("pointer-events","all")                                                                         // 3513
                .call(indexDrag);                                                                                      // 3514
                                                                                                                       // 3515
            indexLine                                                                                                  // 3516
                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })                              // 3517
                .attr('height', availableHeight);                                                                      // 3518
                                                                                                                       // 3519
            // Setup Axes                                                                                              // 3520
            if (showXAxis) {                                                                                           // 3521
                xAxis                                                                                                  // 3522
                    .scale(x)                                                                                          // 3523
                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )                                            // 3524
                    .tickSize(-availableHeight, 0);                                                                    // 3525
                                                                                                                       // 3526
                g.select('.nv-x.nv-axis')                                                                              // 3527
                    .attr('transform', 'translate(0,' + y.range()[0] + ')');                                           // 3528
                g.select('.nv-x.nv-axis')                                                                              // 3529
                    .call(xAxis);                                                                                      // 3530
            }                                                                                                          // 3531
                                                                                                                       // 3532
            if (showYAxis) {                                                                                           // 3533
                yAxis                                                                                                  // 3534
                    .scale(y)                                                                                          // 3535
                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )                                           // 3536
                    .tickSize( -availableWidth, 0);                                                                    // 3537
                                                                                                                       // 3538
                g.select('.nv-y.nv-axis')                                                                              // 3539
                    .call(yAxis);                                                                                      // 3540
            }                                                                                                          // 3541
                                                                                                                       // 3542
            //============================================================                                             // 3543
            // Event Handling/Dispatching (in chart's scope)                                                           // 3544
            //------------------------------------------------------------                                             // 3545
                                                                                                                       // 3546
            function updateZero() {                                                                                    // 3547
                indexLine                                                                                              // 3548
                    .data([index]);                                                                                    // 3549
                                                                                                                       // 3550
                //When dragging the index line, turn off line transitions.                                             // 3551
                // Then turn them back on when done dragging.                                                          // 3552
                var oldDuration = chart.duration();                                                                    // 3553
                chart.duration(0);                                                                                     // 3554
                chart.update();                                                                                        // 3555
                chart.duration(oldDuration);                                                                           // 3556
            }                                                                                                          // 3557
                                                                                                                       // 3558
            g.select('.nv-background rect')                                                                            // 3559
                .on('click', function() {                                                                              // 3560
                    index.x = d3.mouse(this)[0];                                                                       // 3561
                    index.i = Math.round(dx.invert(index.x));                                                          // 3562
                                                                                                                       // 3563
                    // update state and send stateChange with new index                                                // 3564
                    state.index = index.i;                                                                             // 3565
                    dispatch.stateChange(state);                                                                       // 3566
                                                                                                                       // 3567
                    updateZero();                                                                                      // 3568
                });                                                                                                    // 3569
                                                                                                                       // 3570
            lines.dispatch.on('elementClick', function(e) {                                                            // 3571
                index.i = e.pointIndex;                                                                                // 3572
                index.x = dx(index.i);                                                                                 // 3573
                                                                                                                       // 3574
                // update state and send stateChange with new index                                                    // 3575
                state.index = index.i;                                                                                 // 3576
                dispatch.stateChange(state);                                                                           // 3577
                                                                                                                       // 3578
                updateZero();                                                                                          // 3579
            });                                                                                                        // 3580
                                                                                                                       // 3581
            controls.dispatch.on('legendClick', function(d,i) {                                                        // 3582
                d.disabled = !d.disabled;                                                                              // 3583
                rescaleY = !d.disabled;                                                                                // 3584
                                                                                                                       // 3585
                state.rescaleY = rescaleY;                                                                             // 3586
                dispatch.stateChange(state);                                                                           // 3587
                chart.update();                                                                                        // 3588
            });                                                                                                        // 3589
                                                                                                                       // 3590
            legend.dispatch.on('stateChange', function(newState) {                                                     // 3591
                for (var key in newState)                                                                              // 3592
                    state[key] = newState[key];                                                                        // 3593
                dispatch.stateChange(state);                                                                           // 3594
                chart.update();                                                                                        // 3595
            });                                                                                                        // 3596
                                                                                                                       // 3597
            interactiveLayer.dispatch.on('elementMousemove', function(e) {                                             // 3598
                lines.clearHighlights();                                                                               // 3599
                var singlePoint, pointIndex, pointXLocation, allData = [];                                             // 3600
                                                                                                                       // 3601
                data                                                                                                   // 3602
                    .filter(function(series, i) {                                                                      // 3603
                        series.seriesIndex = i;                                                                        // 3604
                        return !series.disabled;                                                                       // 3605
                    })                                                                                                 // 3606
                    .forEach(function(series,i) {                                                                      // 3607
                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());                    // 3608
                        lines.highlightPoint(i, pointIndex, true);                                                     // 3609
                        var point = series.values[pointIndex];                                                         // 3610
                        if (typeof point === 'undefined') return;                                                      // 3611
                        if (typeof singlePoint === 'undefined') singlePoint = point;                                   // 3612
                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
                        allData.push({                                                                                 // 3614
                            key: series.key,                                                                           // 3615
                            value: chart.y()(point, pointIndex),                                                       // 3616
                            color: color(series,series.seriesIndex)                                                    // 3617
                        });                                                                                            // 3618
                    });                                                                                                // 3619
                                                                                                                       // 3620
                //Highlight the tooltip entry based on which point the mouse is closest to.                            // 3621
                if (allData.length > 2) {                                                                              // 3622
                    var yValue = chart.yScale().invert(e.mouseY);                                                      // 3623
                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);              // 3624
                    var threshold = 0.03 * domainExtent;                                                               // 3625
                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);
                    if (indexToHighlight !== null)                                                                     // 3627
                        allData[indexToHighlight].highlight = true;                                                    // 3628
                }                                                                                                      // 3629
                                                                                                                       // 3630
                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);                        // 3631
                interactiveLayer.tooltip                                                                               // 3632
                    .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})                        // 3633
                    .chartContainer(that.parentNode)                                                                   // 3634
                    .valueFormatter(function(d,i) {                                                                    // 3635
                        return yAxis.tickFormat()(d);                                                                  // 3636
                    })                                                                                                 // 3637
                    .data(                                                                                             // 3638
                    {                                                                                                  // 3639
                        value: xValue,                                                                                 // 3640
                        series: allData                                                                                // 3641
                    }                                                                                                  // 3642
                )();                                                                                                   // 3643
                                                                                                                       // 3644
                interactiveLayer.renderGuideLine(pointXLocation);                                                      // 3645
            });                                                                                                        // 3646
                                                                                                                       // 3647
            interactiveLayer.dispatch.on("elementMouseout",function(e) {                                               // 3648
                lines.clearHighlights();                                                                               // 3649
            });                                                                                                        // 3650
                                                                                                                       // 3651
            // Update chart from a state object passed to event handler                                                // 3652
            dispatch.on('changeState', function(e) {                                                                   // 3653
                if (typeof e.disabled !== 'undefined') {                                                               // 3654
                    data.forEach(function(series,i) {                                                                  // 3655
                        series.disabled = e.disabled[i];                                                               // 3656
                    });                                                                                                // 3657
                                                                                                                       // 3658
                    state.disabled = e.disabled;                                                                       // 3659
                }                                                                                                      // 3660
                                                                                                                       // 3661
                if (typeof e.index !== 'undefined') {                                                                  // 3662
                    index.i = e.index;                                                                                 // 3663
                    index.x = dx(index.i);                                                                             // 3664
                                                                                                                       // 3665
                    state.index = e.index;                                                                             // 3666
                                                                                                                       // 3667
                    indexLine                                                                                          // 3668
                        .data([index]);                                                                                // 3669
                }                                                                                                      // 3670
                                                                                                                       // 3671
                if (typeof e.rescaleY !== 'undefined') {                                                               // 3672
                    rescaleY = e.rescaleY;                                                                             // 3673
                }                                                                                                      // 3674
                                                                                                                       // 3675
                chart.update();                                                                                        // 3676
            });                                                                                                        // 3677
                                                                                                                       // 3678
        });                                                                                                            // 3679
                                                                                                                       // 3680
        renderWatch.renderEnd('cumulativeLineChart immediate');                                                        // 3681
                                                                                                                       // 3682
        return chart;                                                                                                  // 3683
    }                                                                                                                  // 3684
                                                                                                                       // 3685
    //============================================================                                                     // 3686
    // Event Handling/Dispatching (out of chart's scope)                                                               // 3687
    //------------------------------------------------------------                                                     // 3688
                                                                                                                       // 3689
    lines.dispatch.on('elementMouseover.tooltip', function(evt) {                                                      // 3690
        var point = {                                                                                                  // 3691
            x: chart.x()(evt.point),                                                                                   // 3692
            y: chart.y()(evt.point),                                                                                   // 3693
            color: evt.point.color                                                                                     // 3694
        };                                                                                                             // 3695
        evt.point = point;                                                                                             // 3696
        tooltip.data(evt).position(evt.pos).hidden(false);                                                             // 3697
    });                                                                                                                // 3698
                                                                                                                       // 3699
    lines.dispatch.on('elementMouseout.tooltip', function(evt) {                                                       // 3700
        tooltip.hidden(true)                                                                                           // 3701
    });                                                                                                                // 3702
                                                                                                                       // 3703
    //============================================================                                                     // 3704
    // Functions                                                                                                       // 3705
    //------------------------------------------------------------                                                     // 3706
                                                                                                                       // 3707
    var indexifyYGetter = null;                                                                                        // 3708
    /* Normalize the data according to an index point. */                                                              // 3709
    function indexify(idx, data) {                                                                                     // 3710
        if (!indexifyYGetter) indexifyYGetter = lines.y();                                                             // 3711
        return data.map(function(line, i) {                                                                            // 3712
            if (!line.values) {                                                                                        // 3713
                return line;                                                                                           // 3714
            }                                                                                                          // 3715
            var indexValue = line.values[idx];                                                                         // 3716
            if (indexValue == null) {                                                                                  // 3717
                return line;                                                                                           // 3718
            }                                                                                                          // 3719
            var v = indexifyYGetter(indexValue, idx);                                                                  // 3720
                                                                                                                       // 3721
            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue     // 3722
            if (v < -.95 && !noErrorCheck) {                                                                           // 3723
                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)
                                                                                                                       // 3725
                line.tempDisabled = true;                                                                              // 3726
                return line;                                                                                           // 3727
            }                                                                                                          // 3728
                                                                                                                       // 3729
            line.tempDisabled = false;                                                                                 // 3730
                                                                                                                       // 3731
            line.values = line.values.map(function(point, pointIndex) {                                                // 3732
                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };                            // 3733
                return point;                                                                                          // 3734
            });                                                                                                        // 3735
                                                                                                                       // 3736
            return line;                                                                                               // 3737
        })                                                                                                             // 3738
    }                                                                                                                  // 3739
                                                                                                                       // 3740
    //============================================================                                                     // 3741
    // Expose Public Variables                                                                                         // 3742
    //------------------------------------------------------------                                                     // 3743
                                                                                                                       // 3744
    // expose chart's sub-components                                                                                   // 3745
    chart.dispatch = dispatch;                                                                                         // 3746
    chart.lines = lines;                                                                                               // 3747
    chart.legend = legend;                                                                                             // 3748
    chart.controls = controls;                                                                                         // 3749
    chart.xAxis = xAxis;                                                                                               // 3750
    chart.yAxis = yAxis;                                                                                               // 3751
    chart.interactiveLayer = interactiveLayer;                                                                         // 3752
    chart.state = state;                                                                                               // 3753
    chart.tooltip = tooltip;                                                                                           // 3754
                                                                                                                       // 3755
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 3756
                                                                                                                       // 3757
    chart._options = Object.create({}, {                                                                               // 3758
        // simple options, just get/set the necessary values                                                           // 3759
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 3760
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 3761
        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},                              // 3762
        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},                  // 3763
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 3764
        average: {get: function(){return average;}, set: function(_){average=_;}},                                     // 3765
        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                   // 3766
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 3767
        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                            // 3768
        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                            // 3769
        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},                   // 3770
                                                                                                                       // 3771
        // deprecated options                                                                                          // 3772
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 3773
            // deprecated after 1.7.1                                                                                  // 3774
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 3775
            tooltip.enabled(!!_);                                                                                      // 3776
        }},                                                                                                            // 3777
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 3778
            // deprecated after 1.7.1                                                                                  // 3779
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 3780
            tooltip.contentGenerator(_);                                                                               // 3781
        }},                                                                                                            // 3782
                                                                                                                       // 3783
        // options that require extra logic in the setter                                                              // 3784
        margin: {get: function(){return margin;}, set: function(_){                                                    // 3785
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 3786
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 3787
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 3788
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 3789
        }},                                                                                                            // 3790
        color:  {get: function(){return color;}, set: function(_){                                                     // 3791
            color = nv.utils.getColor(_);                                                                              // 3792
            legend.color(color);                                                                                       // 3793
        }},                                                                                                            // 3794
        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){                  // 3795
            useInteractiveGuideline = _;                                                                               // 3796
            if (_ === true) {                                                                                          // 3797
                chart.interactive(false);                                                                              // 3798
                chart.useVoronoi(false);                                                                               // 3799
            }                                                                                                          // 3800
        }},                                                                                                            // 3801
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 3802
            rightAlignYAxis = _;                                                                                       // 3803
            yAxis.orient( (_) ? 'right' : 'left');                                                                     // 3804
        }},                                                                                                            // 3805
        duration:    {get: function(){return duration;}, set: function(_){                                             // 3806
            duration = _;                                                                                              // 3807
            lines.duration(duration);                                                                                  // 3808
            xAxis.duration(duration);                                                                                  // 3809
            yAxis.duration(duration);                                                                                  // 3810
            renderWatch.reset(duration);                                                                               // 3811
        }}                                                                                                             // 3812
    });                                                                                                                // 3813
                                                                                                                       // 3814
    nv.utils.inheritOptions(chart, lines);                                                                             // 3815
    nv.utils.initOptions(chart);                                                                                       // 3816
                                                                                                                       // 3817
    return chart;                                                                                                      // 3818
};                                                                                                                     // 3819
//TODO: consider deprecating by adding necessary features to multiBar model                                            // 3820
nv.models.discreteBar = function() {                                                                                   // 3821
    "use strict";                                                                                                      // 3822
                                                                                                                       // 3823
    //============================================================                                                     // 3824
    // Public Variables with Default Settings                                                                          // 3825
    //------------------------------------------------------------                                                     // 3826
                                                                                                                       // 3827
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 3828
        , width = 960                                                                                                  // 3829
        , height = 500                                                                                                 // 3830
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 3831
        , container                                                                                                    // 3832
        , x = d3.scale.ordinal()                                                                                       // 3833
        , y = d3.scale.linear()                                                                                        // 3834
        , getX = function(d) { return d.x }                                                                            // 3835
        , getY = function(d) { return d.y }                                                                            // 3836
        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
        , color = nv.utils.defaultColor()                                                                              // 3838
        , showValues = false                                                                                           // 3839
        , valueFormat = d3.format(',.2f')                                                                              // 3840
        , xDomain                                                                                                      // 3841
        , yDomain                                                                                                      // 3842
        , xRange                                                                                                       // 3843
        , yRange                                                                                                       // 3844
        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
        , rectClass = 'discreteBar'                                                                                    // 3846
        , duration = 250                                                                                               // 3847
        ;                                                                                                              // 3848
                                                                                                                       // 3849
    //============================================================                                                     // 3850
    // Private Variables                                                                                               // 3851
    //------------------------------------------------------------                                                     // 3852
                                                                                                                       // 3853
    var x0, y0;                                                                                                        // 3854
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 3855
                                                                                                                       // 3856
    function chart(selection) {                                                                                        // 3857
        renderWatch.reset();                                                                                           // 3858
        selection.each(function(data) {                                                                                // 3859
            var availableWidth = width - margin.left - margin.right,                                                   // 3860
                availableHeight = height - margin.top - margin.bottom;                                                 // 3861
                                                                                                                       // 3862
            container = d3.select(this);                                                                               // 3863
            nv.utils.initSVG(container);                                                                               // 3864
                                                                                                                       // 3865
            //add series index to each data point for reference                                                        // 3866
            data.forEach(function(series, i) {                                                                         // 3867
                series.values.forEach(function(point) {                                                                // 3868
                    point.series = i;                                                                                  // 3869
                });                                                                                                    // 3870
            });                                                                                                        // 3871
                                                                                                                       // 3872
            // Setup Scales                                                                                            // 3873
            // remap and flatten the data for use in calculating the scales' domains                                   // 3874
            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate       // 3875
                data.map(function(d) {                                                                                 // 3876
                    return d.values.map(function(d,i) {                                                                // 3877
                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }                                                // 3878
                    })                                                                                                 // 3879
                });                                                                                                    // 3880
                                                                                                                       // 3881
            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))                               // 3882
                .rangeBands(xRange || [0, availableWidth], .1);                                                        // 3883
            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));    // 3884
                                                                                                                       // 3885
            // If showValues, pad the Y axis range to account for label height                                         // 3886
            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);
            else y.range(yRange || [availableHeight, 0]);                                                              // 3888
                                                                                                                       // 3889
            //store old scales if they exist                                                                           // 3890
            x0 = x0 || x;                                                                                              // 3891
            y0 = y0 || y.copy().range([y(0),y(0)]);                                                                    // 3892
                                                                                                                       // 3893
            // Setup containers and skeleton of chart                                                                  // 3894
            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);                                   // 3895
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');                     // 3896
            var gEnter = wrapEnter.append('g');                                                                        // 3897
            var g = wrap.select('g');                                                                                  // 3898
                                                                                                                       // 3899
            gEnter.append('g').attr('class', 'nv-groups');                                                             // 3900
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 3901
                                                                                                                       // 3902
            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later          // 3903
            var groups = wrap.select('.nv-groups').selectAll('.nv-group')                                              // 3904
                .data(function(d) { return d }, function(d) { return d.key });                                         // 3905
            groups.enter().append('g')                                                                                 // 3906
                .style('stroke-opacity', 1e-6)                                                                         // 3907
                .style('fill-opacity', 1e-6);                                                                          // 3908
            groups.exit()                                                                                              // 3909
                .watchTransition(renderWatch, 'discreteBar: exit groups')                                              // 3910
                .style('stroke-opacity', 1e-6)                                                                         // 3911
                .style('fill-opacity', 1e-6)                                                                           // 3912
                .remove();                                                                                             // 3913
            groups                                                                                                     // 3914
                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })                                     // 3915
                .classed('hover', function(d) { return d.hover });                                                     // 3916
            groups                                                                                                     // 3917
                .watchTransition(renderWatch, 'discreteBar: groups')                                                   // 3918
                .style('stroke-opacity', 1)                                                                            // 3919
                .style('fill-opacity', .75);                                                                           // 3920
                                                                                                                       // 3921
            var bars = groups.selectAll('g.nv-bar')                                                                    // 3922
                .data(function(d) { return d.values });                                                                // 3923
            bars.exit().remove();                                                                                      // 3924
                                                                                                                       // 3925
            var barsEnter = bars.enter().append('g')                                                                   // 3926
                .attr('transform', function(d,i,j) {                                                                   // 3927
                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'                    // 3928
                })                                                                                                     // 3929
                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here                    // 3930
                    d3.select(this).classed('hover', true);                                                            // 3931
                    dispatch.elementMouseover({                                                                        // 3932
                        data: d,                                                                                       // 3933
                        index: i,                                                                                      // 3934
                        color: d3.select(this).style("fill")                                                           // 3935
                    });                                                                                                // 3936
                })                                                                                                     // 3937
                .on('mouseout', function(d,i) {                                                                        // 3938
                    d3.select(this).classed('hover', false);                                                           // 3939
                    dispatch.elementMouseout({                                                                         // 3940
                        data: d,                                                                                       // 3941
                        index: i,                                                                                      // 3942
                        color: d3.select(this).style("fill")                                                           // 3943
                    });                                                                                                // 3944
                })                                                                                                     // 3945
                .on('mousemove', function(d,i) {                                                                       // 3946
                    dispatch.elementMousemove({                                                                        // 3947
                        data: d,                                                                                       // 3948
                        index: i,                                                                                      // 3949
                        color: d3.select(this).style("fill")                                                           // 3950
                    });                                                                                                // 3951
                })                                                                                                     // 3952
                .on('click', function(d,i) {                                                                           // 3953
                    dispatch.elementClick({                                                                            // 3954
                        data: d,                                                                                       // 3955
                        index: i,                                                                                      // 3956
                        color: d3.select(this).style("fill")                                                           // 3957
                    });                                                                                                // 3958
                    d3.event.stopPropagation();                                                                        // 3959
                })                                                                                                     // 3960
                .on('dblclick', function(d,i) {                                                                        // 3961
                    dispatch.elementDblClick({                                                                         // 3962
                        data: d,                                                                                       // 3963
                        index: i,                                                                                      // 3964
                        color: d3.select(this).style("fill")                                                           // 3965
                    });                                                                                                // 3966
                    d3.event.stopPropagation();                                                                        // 3967
                });                                                                                                    // 3968
                                                                                                                       // 3969
            barsEnter.append('rect')                                                                                   // 3970
                .attr('height', 0)                                                                                     // 3971
                .attr('width', x.rangeBand() * .9 / data.length )                                                      // 3972
                                                                                                                       // 3973
            if (showValues) {                                                                                          // 3974
                barsEnter.append('text')                                                                               // 3975
                    .attr('text-anchor', 'middle')                                                                     // 3976
                ;                                                                                                      // 3977
                                                                                                                       // 3978
                bars.select('text')                                                                                    // 3979
                    .text(function(d,i) { return valueFormat(getY(d,i)) })                                             // 3980
                    .watchTransition(renderWatch, 'discreteBar: bars text')                                            // 3981
                    .attr('x', x.rangeBand() * .9 / 2)                                                                 // 3982
                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })                 // 3983
                                                                                                                       // 3984
                ;                                                                                                      // 3985
            } else {                                                                                                   // 3986
                bars.selectAll('text').remove();                                                                       // 3987
            }                                                                                                          // 3988
                                                                                                                       // 3989
            bars                                                                                                       // 3990
                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })         // 3991
                .style('fill', function(d,i) { return d.color || color(d,i) })                                         // 3992
                .style('stroke', function(d,i) { return d.color || color(d,i) })                                       // 3993
                .select('rect')                                                                                        // 3994
                .attr('class', rectClass)                                                                              // 3995
                .watchTransition(renderWatch, 'discreteBar: bars rect')                                                // 3996
                .attr('width', x.rangeBand() * .9 / data.length);                                                      // 3997
            bars.watchTransition(renderWatch, 'discreteBar: bars')                                                     // 3998
                //.delay(function(d,i) { return i * 1200 / data[0].values.length })                                    // 3999
                .attr('transform', function(d,i) {                                                                     // 4000
                    var left = x(getX(d,i)) + x.rangeBand() * .05,                                                     // 4001
                        top = getY(d,i) < 0 ?                                                                          // 4002
                            y(0) :                                                                                     // 4003
                                y(0) - y(getY(d,i)) < 1 ?                                                              // 4004
                            y(0) - 1 : //make 1 px positive bars show up above y=0                                     // 4005
                            y(getY(d,i));                                                                              // 4006
                                                                                                                       // 4007
                    return 'translate(' + left + ', ' + top + ')'                                                      // 4008
                })                                                                                                     // 4009
                .select('rect')                                                                                        // 4010
                .attr('height', function(d,i) {                                                                        // 4011
                    return  Math.max(Math.abs(y(getY(d,i)) - y((yDomain && yDomain[0]) || 0)) || 1)                    // 4012
                });                                                                                                    // 4013
                                                                                                                       // 4014
                                                                                                                       // 4015
            //store old scales for use in transitions on update                                                        // 4016
            x0 = x.copy();                                                                                             // 4017
            y0 = y.copy();                                                                                             // 4018
                                                                                                                       // 4019
        });                                                                                                            // 4020
                                                                                                                       // 4021
        renderWatch.renderEnd('discreteBar immediate');                                                                // 4022
        return chart;                                                                                                  // 4023
    }                                                                                                                  // 4024
                                                                                                                       // 4025
    //============================================================                                                     // 4026
    // Expose Public Variables                                                                                         // 4027
    //------------------------------------------------------------                                                     // 4028
                                                                                                                       // 4029
    chart.dispatch = dispatch;                                                                                         // 4030
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 4031
                                                                                                                       // 4032
    chart._options = Object.create({}, {                                                                               // 4033
        // simple options, just get/set the necessary values                                                           // 4034
        width:   {get: function(){return width;}, set: function(_){width=_;}},                                         // 4035
        height:  {get: function(){return height;}, set: function(_){height=_;}},                                       // 4036
        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},                                       // 4037
        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},                            // 4038
        x:       {get: function(){return getX;}, set: function(_){getX=_;}},                                           // 4039
        y:       {get: function(){return getY;}, set: function(_){getY=_;}},                                           // 4040
        xScale:  {get: function(){return x;}, set: function(_){x=_;}},                                                 // 4041
        yScale:  {get: function(){return y;}, set: function(_){y=_;}},                                                 // 4042
        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                     // 4043
        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                     // 4044
        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},                                       // 4045
        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},                                       // 4046
        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},                      // 4047
        id:          {get: function(){return id;}, set: function(_){id=_;}},                                           // 4048
        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},                               // 4049
                                                                                                                       // 4050
        // options that require extra logic in the setter                                                              // 4051
        margin: {get: function(){return margin;}, set: function(_){                                                    // 4052
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 4053
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 4054
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 4055
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 4056
        }},                                                                                                            // 4057
        color:  {get: function(){return color;}, set: function(_){                                                     // 4058
            color = nv.utils.getColor(_);                                                                              // 4059
        }},                                                                                                            // 4060
        duration: {get: function(){return duration;}, set: function(_){                                                // 4061
            duration = _;                                                                                              // 4062
            renderWatch.reset(duration);                                                                               // 4063
        }}                                                                                                             // 4064
    });                                                                                                                // 4065
                                                                                                                       // 4066
    nv.utils.initOptions(chart);                                                                                       // 4067
                                                                                                                       // 4068
    return chart;                                                                                                      // 4069
};                                                                                                                     // 4070
                                                                                                                       // 4071
nv.models.discreteBarChart = function() {                                                                              // 4072
    "use strict";                                                                                                      // 4073
                                                                                                                       // 4074
    //============================================================                                                     // 4075
    // Public Variables with Default Settings                                                                          // 4076
    //------------------------------------------------------------                                                     // 4077
                                                                                                                       // 4078
    var discretebar = nv.models.discreteBar()                                                                          // 4079
        , xAxis = nv.models.axis()                                                                                     // 4080
        , yAxis = nv.models.axis()                                                                                     // 4081
        , tooltip = nv.models.tooltip()                                                                                // 4082
        ;                                                                                                              // 4083
                                                                                                                       // 4084
    var margin = {top: 15, right: 10, bottom: 50, left: 60}                                                            // 4085
        , width = null                                                                                                 // 4086
        , height = null                                                                                                // 4087
        , color = nv.utils.getColor()                                                                                  // 4088
        , showXAxis = true                                                                                             // 4089
        , showYAxis = true                                                                                             // 4090
        , rightAlignYAxis = false                                                                                      // 4091
        , staggerLabels = false                                                                                        // 4092
        , x                                                                                                            // 4093
        , y                                                                                                            // 4094
        , noData = null                                                                                                // 4095
        , dispatch = d3.dispatch('beforeUpdate','renderEnd')                                                           // 4096
        , duration = 250                                                                                               // 4097
        ;                                                                                                              // 4098
                                                                                                                       // 4099
    xAxis                                                                                                              // 4100
        .orient('bottom')                                                                                              // 4101
        .showMaxMin(false)                                                                                             // 4102
        .tickFormat(function(d) { return d })                                                                          // 4103
    ;                                                                                                                  // 4104
    yAxis                                                                                                              // 4105
        .orient((rightAlignYAxis) ? 'right' : 'left')                                                                  // 4106
        .tickFormat(d3.format(',.1f'))                                                                                 // 4107
    ;                                                                                                                  // 4108
                                                                                                                       // 4109
    tooltip                                                                                                            // 4110
        .duration(0)                                                                                                   // 4111
        .headerEnabled(false)                                                                                          // 4112
        .valueFormatter(function(d, i) {                                                                               // 4113
            return yAxis.tickFormat()(d, i);                                                                           // 4114
        })                                                                                                             // 4115
        .keyFormatter(function(d, i) {                                                                                 // 4116
            return xAxis.tickFormat()(d, i);                                                                           // 4117
        });                                                                                                            // 4118
                                                                                                                       // 4119
    //============================================================                                                     // 4120
    // Private Variables                                                                                               // 4121
    //------------------------------------------------------------                                                     // 4122
                                                                                                                       // 4123
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 4124
                                                                                                                       // 4125
    function chart(selection) {                                                                                        // 4126
        renderWatch.reset();                                                                                           // 4127
        renderWatch.models(discretebar);                                                                               // 4128
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 4129
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 4130
                                                                                                                       // 4131
        selection.each(function(data) {                                                                                // 4132
            var container = d3.select(this),                                                                           // 4133
                that = this;                                                                                           // 4134
            nv.utils.initSVG(container);                                                                               // 4135
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 4136
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 4137
                                                                                                                       // 4138
            chart.update = function() {                                                                                // 4139
                dispatch.beforeUpdate();                                                                               // 4140
                container.transition().duration(duration).call(chart);                                                 // 4141
            };                                                                                                         // 4142
            chart.container = this;                                                                                    // 4143
                                                                                                                       // 4144
            // Display No Data message if there's nothing to show.                                                     // 4145
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 4146
                nv.utils.noData(chart, container);                                                                     // 4147
                return chart;                                                                                          // 4148
            } else {                                                                                                   // 4149
                container.selectAll('.nv-noData').remove();                                                            // 4150
            }                                                                                                          // 4151
                                                                                                                       // 4152
            // Setup Scales                                                                                            // 4153
            x = discretebar.xScale();                                                                                  // 4154
            y = discretebar.yScale().clamp(true);                                                                      // 4155
                                                                                                                       // 4156
            // Setup containers and skeleton of chart                                                                  // 4157
            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);                           // 4158
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');    // 4159
            var defsEnter = gEnter.append('defs');                                                                     // 4160
            var g = wrap.select('g');                                                                                  // 4161
                                                                                                                       // 4162
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 4163
            gEnter.append('g').attr('class', 'nv-y nv-axis')                                                           // 4164
                .append('g').attr('class', 'nv-zeroLine')                                                              // 4165
                .append('line');                                                                                       // 4166
                                                                                                                       // 4167
            gEnter.append('g').attr('class', 'nv-barsWrap');                                                           // 4168
                                                                                                                       // 4169
            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                                  // 4170
                                                                                                                       // 4171
            if (rightAlignYAxis) {                                                                                     // 4172
                g.select(".nv-y.nv-axis")                                                                              // 4173
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 4174
            }                                                                                                          // 4175
                                                                                                                       // 4176
            // Main Chart Component(s)                                                                                 // 4177
            discretebar                                                                                                // 4178
                .width(availableWidth)                                                                                 // 4179
                .height(availableHeight);                                                                              // 4180
                                                                                                                       // 4181
            var barsWrap = g.select('.nv-barsWrap')                                                                    // 4182
                .datum(data.filter(function(d) { return !d.disabled }));                                               // 4183
                                                                                                                       // 4184
            barsWrap.transition().call(discretebar);                                                                   // 4185
                                                                                                                       // 4186
                                                                                                                       // 4187
            defsEnter.append('clipPath')                                                                               // 4188
                .attr('id', 'nv-x-label-clip-' + discretebar.id())                                                     // 4189
                .append('rect');                                                                                       // 4190
                                                                                                                       // 4191
            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')                                                 // 4192
                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))                                                // 4193
                .attr('height', 16)                                                                                    // 4194
                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));                                                 // 4195
                                                                                                                       // 4196
            // Setup Axes                                                                                              // 4197
            if (showXAxis) {                                                                                           // 4198
                xAxis                                                                                                  // 4199
                    .scale(x)                                                                                          // 4200
                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                           // 4201
                    .tickSize(-availableHeight, 0);                                                                    // 4202
                                                                                                                       // 4203
                g.select('.nv-x.nv-axis')                                                                              // 4204
                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');
                g.select('.nv-x.nv-axis').call(xAxis);                                                                 // 4206
                                                                                                                       // 4207
                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');                                                 // 4208
                if (staggerLabels) {                                                                                   // 4209
                    xTicks                                                                                             // 4210
                        .selectAll('text')                                                                             // 4211
                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })
                }                                                                                                      // 4213
            }                                                                                                          // 4214
                                                                                                                       // 4215
            if (showYAxis) {                                                                                           // 4216
                yAxis                                                                                                  // 4217
                    .scale(y)                                                                                          // 4218
                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )                                           // 4219
                    .tickSize( -availableWidth, 0);                                                                    // 4220
                                                                                                                       // 4221
                g.select('.nv-y.nv-axis').call(yAxis);                                                                 // 4222
            }                                                                                                          // 4223
                                                                                                                       // 4224
            // Zero line                                                                                               // 4225
            g.select(".nv-zeroLine line")                                                                              // 4226
                .attr("x1",0)                                                                                          // 4227
                .attr("x2",availableWidth)                                                                             // 4228
                .attr("y1", y(0))                                                                                      // 4229
                .attr("y2", y(0))                                                                                      // 4230
            ;                                                                                                          // 4231
        });                                                                                                            // 4232
                                                                                                                       // 4233
        renderWatch.renderEnd('discreteBar chart immediate');                                                          // 4234
        return chart;                                                                                                  // 4235
    }                                                                                                                  // 4236
                                                                                                                       // 4237
    //============================================================                                                     // 4238
    // Event Handling/Dispatching (out of chart's scope)                                                               // 4239
    //------------------------------------------------------------                                                     // 4240
                                                                                                                       // 4241
    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {                                                // 4242
        evt['series'] = {                                                                                              // 4243
            key: chart.x()(evt.data),                                                                                  // 4244
            value: chart.y()(evt.data),                                                                                // 4245
            color: evt.color                                                                                           // 4246
        };                                                                                                             // 4247
        tooltip.data(evt).hidden(false);                                                                               // 4248
    });                                                                                                                // 4249
                                                                                                                       // 4250
    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {                                                 // 4251
        tooltip.hidden(true);                                                                                          // 4252
    });                                                                                                                // 4253
                                                                                                                       // 4254
    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {                                                // 4255
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 4256
    });                                                                                                                // 4257
                                                                                                                       // 4258
    //============================================================                                                     // 4259
    // Expose Public Variables                                                                                         // 4260
    //------------------------------------------------------------                                                     // 4261
                                                                                                                       // 4262
    chart.dispatch = dispatch;                                                                                         // 4263
    chart.discretebar = discretebar;                                                                                   // 4264
    chart.xAxis = xAxis;                                                                                               // 4265
    chart.yAxis = yAxis;                                                                                               // 4266
    chart.tooltip = tooltip;                                                                                           // 4267
                                                                                                                       // 4268
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 4269
                                                                                                                       // 4270
    chart._options = Object.create({}, {                                                                               // 4271
        // simple options, just get/set the necessary values                                                           // 4272
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 4273
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 4274
        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},                   // 4275
        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                               // 4276
        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                               // 4277
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 4278
                                                                                                                       // 4279
        // deprecated options                                                                                          // 4280
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 4281
            // deprecated after 1.7.1                                                                                  // 4282
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 4283
            tooltip.enabled(!!_);                                                                                      // 4284
        }},                                                                                                            // 4285
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 4286
            // deprecated after 1.7.1                                                                                  // 4287
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 4288
            tooltip.contentGenerator(_);                                                                               // 4289
        }},                                                                                                            // 4290
                                                                                                                       // 4291
        // options that require extra logic in the setter                                                              // 4292
        margin: {get: function(){return margin;}, set: function(_){                                                    // 4293
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 4294
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 4295
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 4296
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 4297
        }},                                                                                                            // 4298
        duration: {get: function(){return duration;}, set: function(_){                                                // 4299
            duration = _;                                                                                              // 4300
            renderWatch.reset(duration);                                                                               // 4301
            discretebar.duration(duration);                                                                            // 4302
            xAxis.duration(duration);                                                                                  // 4303
            yAxis.duration(duration);                                                                                  // 4304
        }},                                                                                                            // 4305
        color:  {get: function(){return color;}, set: function(_){                                                     // 4306
            color = nv.utils.getColor(_);                                                                              // 4307
            discretebar.color(color);                                                                                  // 4308
        }},                                                                                                            // 4309
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 4310
            rightAlignYAxis = _;                                                                                       // 4311
            yAxis.orient( (_) ? 'right' : 'left');                                                                     // 4312
        }}                                                                                                             // 4313
    });                                                                                                                // 4314
                                                                                                                       // 4315
    nv.utils.inheritOptions(chart, discretebar);                                                                       // 4316
    nv.utils.initOptions(chart);                                                                                       // 4317
                                                                                                                       // 4318
    return chart;                                                                                                      // 4319
}                                                                                                                      // 4320
                                                                                                                       // 4321
nv.models.distribution = function() {                                                                                  // 4322
    "use strict";                                                                                                      // 4323
    //============================================================                                                     // 4324
    // Public Variables with Default Settings                                                                          // 4325
    //------------------------------------------------------------                                                     // 4326
                                                                                                                       // 4327
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 4328
        , width = 400 //technically width or height depending on x or y....                                            // 4329
        , size = 8                                                                                                     // 4330
        , axis = 'x' // 'x' or 'y'... horizontal or vertical                                                           // 4331
        , getData = function(d) { return d[axis] }  // defaults d.x or d.y                                             // 4332
        , color = nv.utils.defaultColor()                                                                              // 4333
        , scale = d3.scale.linear()                                                                                    // 4334
        , domain                                                                                                       // 4335
        , duration = 250                                                                                               // 4336
        , dispatch = d3.dispatch('renderEnd')                                                                          // 4337
        ;                                                                                                              // 4338
                                                                                                                       // 4339
    //============================================================                                                     // 4340
                                                                                                                       // 4341
                                                                                                                       // 4342
    //============================================================                                                     // 4343
    // Private Variables                                                                                               // 4344
    //------------------------------------------------------------                                                     // 4345
                                                                                                                       // 4346
    var scale0;                                                                                                        // 4347
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 4348
                                                                                                                       // 4349
    //============================================================                                                     // 4350
                                                                                                                       // 4351
                                                                                                                       // 4352
    function chart(selection) {                                                                                        // 4353
        renderWatch.reset();                                                                                           // 4354
        selection.each(function(data) {                                                                                // 4355
            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),    // 4356
                naxis = axis == 'x' ? 'y' : 'x',                                                                       // 4357
                container = d3.select(this);                                                                           // 4358
            nv.utils.initSVG(container);                                                                               // 4359
                                                                                                                       // 4360
            //------------------------------------------------------------                                             // 4361
            // Setup Scales                                                                                            // 4362
                                                                                                                       // 4363
            scale0 = scale0 || scale;                                                                                  // 4364
                                                                                                                       // 4365
            //------------------------------------------------------------                                             // 4366
                                                                                                                       // 4367
                                                                                                                       // 4368
            //------------------------------------------------------------                                             // 4369
            // Setup containers and skeleton of chart                                                                  // 4370
                                                                                                                       // 4371
            var wrap = container.selectAll('g.nv-distribution').data([data]);                                          // 4372
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');                            // 4373
            var gEnter = wrapEnter.append('g');                                                                        // 4374
            var g = wrap.select('g');                                                                                  // 4375
                                                                                                                       // 4376
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')                                // 4377
                                                                                                                       // 4378
            //------------------------------------------------------------                                             // 4379
                                                                                                                       // 4380
                                                                                                                       // 4381
            var distWrap = g.selectAll('g.nv-dist')                                                                    // 4382
                .data(function(d) { return d }, function(d) { return d.key });                                         // 4383
                                                                                                                       // 4384
            distWrap.enter().append('g');                                                                              // 4385
            distWrap                                                                                                   // 4386
                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })                                      // 4387
                .style('stroke', function(d,i) { return color(d, i) });                                                // 4388
                                                                                                                       // 4389
            var dist = distWrap.selectAll('line.nv-dist' + axis)                                                       // 4390
                .data(function(d) { return d.values })                                                                 // 4391
            dist.enter().append('line')                                                                                // 4392
                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })                                       // 4393
                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })                                       // 4394
            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')                      // 4395
                // .transition()                                                                                       // 4396
                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })                                        // 4397
                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })                                        // 4398
                .style('stroke-opacity', 0)                                                                            // 4399
                .remove();                                                                                             // 4400
            dist                                                                                                       // 4401
                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })                // 4402
                .attr(naxis + '1', 0)                                                                                  // 4403
                .attr(naxis + '2', size);                                                                              // 4404
            renderWatch.transition(dist, 'dist')                                                                       // 4405
                // .transition()                                                                                       // 4406
                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })                                        // 4407
                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })                                        // 4408
                                                                                                                       // 4409
                                                                                                                       // 4410
            scale0 = scale.copy();                                                                                     // 4411
                                                                                                                       // 4412
        });                                                                                                            // 4413
        renderWatch.renderEnd('distribution immediate');                                                               // 4414
        return chart;                                                                                                  // 4415
    }                                                                                                                  // 4416
                                                                                                                       // 4417
                                                                                                                       // 4418
    //============================================================                                                     // 4419
    // Expose Public Variables                                                                                         // 4420
    //------------------------------------------------------------                                                     // 4421
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 4422
    chart.dispatch = dispatch;                                                                                         // 4423
                                                                                                                       // 4424
    chart.margin = function(_) {                                                                                       // 4425
        if (!arguments.length) return margin;                                                                          // 4426
        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;                                        // 4427
        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;                                      // 4428
        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;                                     // 4429
        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;                                       // 4430
        return chart;                                                                                                  // 4431
    };                                                                                                                 // 4432
                                                                                                                       // 4433
    chart.width = function(_) {                                                                                        // 4434
        if (!arguments.length) return width;                                                                           // 4435
        width = _;                                                                                                     // 4436
        return chart;                                                                                                  // 4437
    };                                                                                                                 // 4438
                                                                                                                       // 4439
    chart.axis = function(_) {                                                                                         // 4440
        if (!arguments.length) return axis;                                                                            // 4441
        axis = _;                                                                                                      // 4442
        return chart;                                                                                                  // 4443
    };                                                                                                                 // 4444
                                                                                                                       // 4445
    chart.size = function(_) {                                                                                         // 4446
        if (!arguments.length) return size;                                                                            // 4447
        size = _;                                                                                                      // 4448
        return chart;                                                                                                  // 4449
    };                                                                                                                 // 4450
                                                                                                                       // 4451
    chart.getData = function(_) {                                                                                      // 4452
        if (!arguments.length) return getData;                                                                         // 4453
        getData = d3.functor(_);                                                                                       // 4454
        return chart;                                                                                                  // 4455
    };                                                                                                                 // 4456
                                                                                                                       // 4457
    chart.scale = function(_) {                                                                                        // 4458
        if (!arguments.length) return scale;                                                                           // 4459
        scale = _;                                                                                                     // 4460
        return chart;                                                                                                  // 4461
    };                                                                                                                 // 4462
                                                                                                                       // 4463
    chart.color = function(_) {                                                                                        // 4464
        if (!arguments.length) return color;                                                                           // 4465
        color = nv.utils.getColor(_);                                                                                  // 4466
        return chart;                                                                                                  // 4467
    };                                                                                                                 // 4468
                                                                                                                       // 4469
    chart.duration = function(_) {                                                                                     // 4470
        if (!arguments.length) return duration;                                                                        // 4471
        duration = _;                                                                                                  // 4472
        renderWatch.reset(duration);                                                                                   // 4473
        return chart;                                                                                                  // 4474
    };                                                                                                                 // 4475
    //============================================================                                                     // 4476
                                                                                                                       // 4477
                                                                                                                       // 4478
    return chart;                                                                                                      // 4479
}                                                                                                                      // 4480
nv.models.furiousLegend = function() {                                                                                 // 4481
    "use strict";                                                                                                      // 4482
                                                                                                                       // 4483
    //============================================================                                                     // 4484
    // Public Variables with Default Settings                                                                          // 4485
    //------------------------------------------------------------                                                     // 4486
                                                                                                                       // 4487
    var margin = {top: 5, right: 0, bottom: 5, left: 0}                                                                // 4488
        , width = 400                                                                                                  // 4489
        , height = 20                                                                                                  // 4490
        , getKey = function(d) { return d.key }                                                                        // 4491
        , color = nv.utils.getColor()                                                                                  // 4492
        , align = true                                                                                                 // 4493
        , padding = 28 //define how much space between legend items. - recommend 32 for furious version                // 4494
        , rightAlign = true                                                                                            // 4495
        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.       // 4496
        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)
        , expanded = false                                                                                             // 4498
        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')  // 4499
        , vers = 'classic' //Options are "classic" and "furious"                                                       // 4500
        ;                                                                                                              // 4501
                                                                                                                       // 4502
    function chart(selection) {                                                                                        // 4503
        selection.each(function(data) {                                                                                // 4504
            var availableWidth = width - margin.left - margin.right,                                                   // 4505
                container = d3.select(this);                                                                           // 4506
            nv.utils.initSVG(container);                                                                               // 4507
                                                                                                                       // 4508
            // Setup containers and skeleton of chart                                                                  // 4509
            var wrap = container.selectAll('g.nv-legend').data([data]);                                                // 4510
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');                         // 4511
            var g = wrap.select('g');                                                                                  // 4512
                                                                                                                       // 4513
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 4514
                                                                                                                       // 4515
            var series = g.selectAll('.nv-series')                                                                     // 4516
                .data(function(d) {                                                                                    // 4517
                    if(vers != 'furious') return d;                                                                    // 4518
                                                                                                                       // 4519
                    return d.filter(function(n) {                                                                      // 4520
                        return expanded ? true : !n.disengaged;                                                        // 4521
                    });                                                                                                // 4522
                });                                                                                                    // 4523
            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')                                    // 4524
                                                                                                                       // 4525
            var seriesShape;                                                                                           // 4526
                                                                                                                       // 4527
            if(vers == 'classic') {                                                                                    // 4528
                seriesEnter.append('circle')                                                                           // 4529
                    .style('stroke-width', 2)                                                                          // 4530
                    .attr('class','nv-legend-symbol')                                                                  // 4531
                    .attr('r', 5);                                                                                     // 4532
                                                                                                                       // 4533
                seriesShape = series.select('circle');                                                                 // 4534
            } else if (vers == 'furious') {                                                                            // 4535
                seriesEnter.append('rect')                                                                             // 4536
                    .style('stroke-width', 2)                                                                          // 4537
                    .attr('class','nv-legend-symbol')                                                                  // 4538
                    .attr('rx', 3)                                                                                     // 4539
                    .attr('ry', 3);                                                                                    // 4540
                                                                                                                       // 4541
                seriesShape = series.select('rect');                                                                   // 4542
                                                                                                                       // 4543
                seriesEnter.append('g')                                                                                // 4544
                    .attr('class', 'nv-check-box')                                                                     // 4545
                    .property('innerHTML','<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>')
                    .attr('transform', 'translate(-10,-8)scale(0.5)');                                                 // 4547
                                                                                                                       // 4548
                var seriesCheckbox = series.select('.nv-check-box');                                                   // 4549
                                                                                                                       // 4550
                seriesCheckbox.each(function(d,i) {                                                                    // 4551
                    d3.select(this).selectAll('path')                                                                  // 4552
                        .attr('stroke', setTextColor(d,i));                                                            // 4553
                });                                                                                                    // 4554
            }                                                                                                          // 4555
                                                                                                                       // 4556
            seriesEnter.append('text')                                                                                 // 4557
                .attr('text-anchor', 'start')                                                                          // 4558
                .attr('class','nv-legend-text')                                                                        // 4559
                .attr('dy', '.32em')                                                                                   // 4560
                .attr('dx', '8');                                                                                      // 4561
                                                                                                                       // 4562
            var seriesText = series.select('text.nv-legend-text');                                                     // 4563
                                                                                                                       // 4564
            series                                                                                                     // 4565
                .on('mouseover', function(d,i) {                                                                       // 4566
                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects                   // 4567
                })                                                                                                     // 4568
                .on('mouseout', function(d,i) {                                                                        // 4569
                    dispatch.legendMouseout(d,i);                                                                      // 4570
                })                                                                                                     // 4571
                .on('click', function(d,i) {                                                                           // 4572
                    dispatch.legendClick(d,i);                                                                         // 4573
                    // make sure we re-get data in case it was modified                                                // 4574
                    var data = series.data();                                                                          // 4575
                    if (updateState) {                                                                                 // 4576
                        if(vers =='classic') {                                                                         // 4577
                            if (radioButtonMode) {                                                                     // 4578
                                //Radio button mode: set every series to disabled,                                     // 4579
                                //  and enable the clicked series.                                                     // 4580
                                data.forEach(function(series) { series.disabled = true});                              // 4581
                                d.disabled = false;                                                                    // 4582
                            }                                                                                          // 4583
                            else {                                                                                     // 4584
                                d.disabled = !d.disabled;                                                              // 4585
                                if (data.every(function(series) { return series.disabled})) {                          // 4586
                                    //the default behavior of NVD3 legends is, if every single series                  // 4587
                                    // is disabled, turn all series' back on.                                          // 4588
                                    data.forEach(function(series) { series.disabled = false});                         // 4589
                                }                                                                                      // 4590
                            }                                                                                          // 4591
                        } else if(vers == 'furious') {                                                                 // 4592
                            if(expanded) {                                                                             // 4593
                                d.disengaged = !d.disengaged;                                                          // 4594
                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;          // 4595
                                d.disabled = d.disengaged || d.userDisabled;                                           // 4596
                            } else if (!expanded) {                                                                    // 4597
                                d.disabled = !d.disabled;                                                              // 4598
                                d.userDisabled = d.disabled;                                                           // 4599
                                var engaged = data.filter(function(d) { return !d.disengaged; });                      // 4600
                                if (engaged.every(function(series) { return series.userDisabled })) {                  // 4601
                                    //the default behavior of NVD3 legends is, if every single series                  // 4602
                                    // is disabled, turn all series' back on.                                          // 4603
                                    data.forEach(function(series) {                                                    // 4604
                                        series.disabled = series.userDisabled = false;                                 // 4605
                                    });                                                                                // 4606
                                }                                                                                      // 4607
                            }                                                                                          // 4608
                        }                                                                                              // 4609
                        dispatch.stateChange({                                                                         // 4610
                            disabled: data.map(function(d) { return !!d.disabled }),                                   // 4611
                            disengaged: data.map(function(d) { return !!d.disengaged })                                // 4612
                        });                                                                                            // 4613
                                                                                                                       // 4614
                    }                                                                                                  // 4615
                })                                                                                                     // 4616
                .on('dblclick', function(d,i) {                                                                        // 4617
                    if(vers == 'furious' && expanded) return;                                                          // 4618
                    dispatch.legendDblclick(d,i);                                                                      // 4619
                    if (updateState) {                                                                                 // 4620
                        // make sure we re-get data in case it was modified                                            // 4621
                        var data = series.data();                                                                      // 4622
                        //the default behavior of NVD3 legends, when double clicking one,                              // 4623
                        // is to set all other series' to false, and make the double clicked series enabled.           // 4624
                        data.forEach(function(series) {                                                                // 4625
                            series.disabled = true;                                                                    // 4626
                            if(vers == 'furious') series.userDisabled = series.disabled;                               // 4627
                        });                                                                                            // 4628
                        d.disabled = false;                                                                            // 4629
                        if(vers == 'furious') d.userDisabled = d.disabled;                                             // 4630
                        dispatch.stateChange({                                                                         // 4631
                            disabled: data.map(function(d) { return !!d.disabled })                                    // 4632
                        });                                                                                            // 4633
                    }                                                                                                  // 4634
                });                                                                                                    // 4635
                                                                                                                       // 4636
            series.classed('nv-disabled', function(d) { return d.userDisabled });                                      // 4637
            series.exit().remove();                                                                                    // 4638
                                                                                                                       // 4639
            seriesText                                                                                                 // 4640
                .attr('fill', setTextColor)                                                                            // 4641
                .text(getKey);                                                                                         // 4642
                                                                                                                       // 4643
            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option) // 4644
            // NEW ALIGNING CODE, TODO: clean up                                                                       // 4645
                                                                                                                       // 4646
            var versPadding;                                                                                           // 4647
            switch(vers) {                                                                                             // 4648
                case 'furious' :                                                                                       // 4649
                    versPadding = 23;                                                                                  // 4650
                    break;                                                                                             // 4651
                case 'classic' :                                                                                       // 4652
                    versPadding = 20;                                                                                  // 4653
            }                                                                                                          // 4654
                                                                                                                       // 4655
            if (align) {                                                                                               // 4656
                                                                                                                       // 4657
                var seriesWidths = [];                                                                                 // 4658
                series.each(function(d,i) {                                                                            // 4659
                    var legendText = d3.select(this).select('text');                                                   // 4660
                    var nodeTextLength;                                                                                // 4661
                    try {                                                                                              // 4662
                        nodeTextLength = legendText.node().getComputedTextLength();                                    // 4663
                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead
                        if(nodeTextLength <= 0) throw Error();                                                         // 4665
                    }                                                                                                  // 4666
                    catch(e) {                                                                                         // 4667
                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);                                     // 4668
                    }                                                                                                  // 4669
                                                                                                                       // 4670
                    seriesWidths.push(nodeTextLength + padding);                                                       // 4671
                });                                                                                                    // 4672
                                                                                                                       // 4673
                var seriesPerRow = 0;                                                                                  // 4674
                var legendWidth = 0;                                                                                   // 4675
                var columnWidths = [];                                                                                 // 4676
                                                                                                                       // 4677
                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {                          // 4678
                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];                                           // 4679
                    legendWidth += seriesWidths[seriesPerRow++];                                                       // 4680
                }                                                                                                      // 4681
                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row                              // 4682
                                                                                                                       // 4683
                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {                                           // 4684
                    columnWidths = [];                                                                                 // 4685
                    seriesPerRow--;                                                                                    // 4686
                                                                                                                       // 4687
                    for (var k = 0; k < seriesWidths.length; k++) {                                                    // 4688
                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )                                  // 4689
                            columnWidths[k % seriesPerRow] = seriesWidths[k];                                          // 4690
                    }                                                                                                  // 4691
                                                                                                                       // 4692
                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {                              // 4693
                        return prev + cur;                                                                             // 4694
                    });                                                                                                // 4695
                }                                                                                                      // 4696
                                                                                                                       // 4697
                var xPositions = [];                                                                                   // 4698
                for (var i = 0, curX = 0; i < seriesPerRow; i++) {                                                     // 4699
                    xPositions[i] = curX;                                                                              // 4700
                    curX += columnWidths[i];                                                                           // 4701
                }                                                                                                      // 4702
                                                                                                                       // 4703
                series                                                                                                 // 4704
                    .attr('transform', function(d, i) {                                                                // 4705
                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
                    });                                                                                                // 4707
                                                                                                                       // 4708
                //position legend as far right as possible within the total width                                      // 4709
                if (rightAlign) {                                                                                      // 4710
                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')'); // 4711
                }                                                                                                      // 4712
                else {                                                                                                 // 4713
                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');                                       // 4714
                }                                                                                                      // 4715
                                                                                                                       // 4716
                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);   // 4717
                                                                                                                       // 4718
            } else {                                                                                                   // 4719
                                                                                                                       // 4720
                var ypos = 5,                                                                                          // 4721
                    newxpos = 5,                                                                                       // 4722
                    maxwidth = 0,                                                                                      // 4723
                    xpos;                                                                                              // 4724
                series                                                                                                 // 4725
                    .attr('transform', function(d, i) {                                                                // 4726
                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;          // 4727
                        xpos = newxpos;                                                                                // 4728
                                                                                                                       // 4729
                        if (width < margin.left + margin.right + xpos + length) {                                      // 4730
                            newxpos = xpos = 5;                                                                        // 4731
                            ypos += versPadding;                                                                       // 4732
                        }                                                                                              // 4733
                                                                                                                       // 4734
                        newxpos += length;                                                                             // 4735
                        if (newxpos > maxwidth) maxwidth = newxpos;                                                    // 4736
                                                                                                                       // 4737
                        return 'translate(' + xpos + ',' + ypos + ')';                                                 // 4738
                    });                                                                                                // 4739
                                                                                                                       // 4740
                //position legend as far right as possible within the total width                                      // 4741
                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');        // 4742
                                                                                                                       // 4743
                height = margin.top + margin.bottom + ypos + 15;                                                       // 4744
            }                                                                                                          // 4745
                                                                                                                       // 4746
            if(vers == 'furious') {                                                                                    // 4747
                // Size rectangles after text is placed                                                                // 4748
                seriesShape                                                                                            // 4749
                    .attr('width', function(d,i) {                                                                     // 4750
                        return seriesText[0][i].getComputedTextLength() + 27;                                          // 4751
                    })                                                                                                 // 4752
                    .attr('height', 18)                                                                                // 4753
                    .attr('y', -9)                                                                                     // 4754
                    .attr('x', -15)                                                                                    // 4755
            }                                                                                                          // 4756
                                                                                                                       // 4757
            seriesShape                                                                                                // 4758
                .style('fill', setBGColor)                                                                             // 4759
                .style('stroke', function(d,i) { return d.color || color(d, i) });                                     // 4760
        });                                                                                                            // 4761
                                                                                                                       // 4762
        function setTextColor(d,i) {                                                                                   // 4763
            if(vers != 'furious') return '#000';                                                                       // 4764
            if(expanded) {                                                                                             // 4765
                return d.disengaged ? color(d,i) : '#fff';                                                             // 4766
            } else if (!expanded) {                                                                                    // 4767
                return !!d.disabled ? color(d,i) : '#fff';                                                             // 4768
            }                                                                                                          // 4769
        }                                                                                                              // 4770
                                                                                                                       // 4771
        function setBGColor(d,i) {                                                                                     // 4772
            if(expanded && vers == 'furious') {                                                                        // 4773
                return d.disengaged ? '#fff' : color(d,i);                                                             // 4774
            } else {                                                                                                   // 4775
                return !!d.disabled ? '#fff' : color(d,i);                                                             // 4776
            }                                                                                                          // 4777
        }                                                                                                              // 4778
                                                                                                                       // 4779
        return chart;                                                                                                  // 4780
    }                                                                                                                  // 4781
                                                                                                                       // 4782
    //============================================================                                                     // 4783
    // Expose Public Variables                                                                                         // 4784
    //------------------------------------------------------------                                                     // 4785
                                                                                                                       // 4786
    chart.dispatch = dispatch;                                                                                         // 4787
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 4788
                                                                                                                       // 4789
    chart._options = Object.create({}, {                                                                               // 4790
        // simple options, just get/set the necessary values                                                           // 4791
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 4792
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 4793
        key:        {get: function(){return getKey;}, set: function(_){getKey=_;}},                                    // 4794
        align:      {get: function(){return align;}, set: function(_){align=_;}},                                      // 4795
        rightAlign:    {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},                         // 4796
        padding:       {get: function(){return padding;}, set: function(_){padding=_;}},                               // 4797
        updateState:   {get: function(){return updateState;}, set: function(_){updateState=_;}},                       // 4798
        radioButtonMode:    {get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},          // 4799
        expanded:   {get: function(){return expanded;}, set: function(_){expanded=_;}},                                // 4800
        vers:   {get: function(){return vers;}, set: function(_){vers=_;}},                                            // 4801
                                                                                                                       // 4802
        // options that require extra logic in the setter                                                              // 4803
        margin: {get: function(){return margin;}, set: function(_){                                                    // 4804
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 4805
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 4806
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 4807
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 4808
        }},                                                                                                            // 4809
        color:  {get: function(){return color;}, set: function(_){                                                     // 4810
            color = nv.utils.getColor(_);                                                                              // 4811
        }}                                                                                                             // 4812
    });                                                                                                                // 4813
                                                                                                                       // 4814
    nv.utils.initOptions(chart);                                                                                       // 4815
                                                                                                                       // 4816
    return chart;                                                                                                      // 4817
};                                                                                                                     // 4818
//TODO: consider deprecating and using multibar with single series for this                                            // 4819
nv.models.historicalBar = function() {                                                                                 // 4820
    "use strict";                                                                                                      // 4821
                                                                                                                       // 4822
    //============================================================                                                     // 4823
    // Public Variables with Default Settings                                                                          // 4824
    //------------------------------------------------------------                                                     // 4825
                                                                                                                       // 4826
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 4827
        , width = null                                                                                                 // 4828
        , height = null                                                                                                // 4829
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 4830
        , container = null                                                                                             // 4831
        , x = d3.scale.linear()                                                                                        // 4832
        , y = d3.scale.linear()                                                                                        // 4833
        , getX = function(d) { return d.x }                                                                            // 4834
        , getY = function(d) { return d.y }                                                                            // 4835
        , forceX = []                                                                                                  // 4836
        , forceY = [0]                                                                                                 // 4837
        , padData = false                                                                                              // 4838
        , clipEdge = true                                                                                              // 4839
        , color = nv.utils.defaultColor()                                                                              // 4840
        , xDomain                                                                                                      // 4841
        , yDomain                                                                                                      // 4842
        , xRange                                                                                                       // 4843
        , yRange                                                                                                       // 4844
        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
        , interactive = true                                                                                           // 4846
        ;                                                                                                              // 4847
                                                                                                                       // 4848
    var renderWatch = nv.utils.renderWatch(dispatch, 0);                                                               // 4849
                                                                                                                       // 4850
    function chart(selection) {                                                                                        // 4851
        selection.each(function(data) {                                                                                // 4852
            renderWatch.reset();                                                                                       // 4853
                                                                                                                       // 4854
            container = d3.select(this);                                                                               // 4855
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 4856
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 4857
                                                                                                                       // 4858
            nv.utils.initSVG(container);                                                                               // 4859
                                                                                                                       // 4860
            // Setup Scales                                                                                            // 4861
            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));                                  // 4862
                                                                                                                       // 4863
            if (padData)                                                                                               // 4864
                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
            else                                                                                                       // 4866
                x.range(xRange || [0, availableWidth]);                                                                // 4867
                                                                                                                       // 4868
            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))                                   // 4869
                .range(yRange || [availableHeight, 0]);                                                                // 4870
                                                                                                                       // 4871
            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
            if (x.domain()[0] === x.domain()[1])                                                                       // 4873
                x.domain()[0] ?                                                                                        // 4874
                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])             // 4875
                    : x.domain([-1,1]);                                                                                // 4876
                                                                                                                       // 4877
            if (y.domain()[0] === y.domain()[1])                                                                       // 4878
                y.domain()[0] ?                                                                                        // 4879
                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])             // 4880
                    : y.domain([-1,1]);                                                                                // 4881
                                                                                                                       // 4882
            // Setup containers and skeleton of chart                                                                  // 4883
            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);                 // 4884
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);             // 4885
            var defsEnter = wrapEnter.append('defs');                                                                  // 4886
            var gEnter = wrapEnter.append('g');                                                                        // 4887
            var g = wrap.select('g');                                                                                  // 4888
                                                                                                                       // 4889
            gEnter.append('g').attr('class', 'nv-bars');                                                               // 4890
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 4891
                                                                                                                       // 4892
            container                                                                                                  // 4893
                .on('click', function(d,i) {                                                                           // 4894
                    dispatch.chartClick({                                                                              // 4895
                        data: d,                                                                                       // 4896
                        index: i,                                                                                      // 4897
                        pos: d3.event,                                                                                 // 4898
                        id: id                                                                                         // 4899
                    });                                                                                                // 4900
                });                                                                                                    // 4901
                                                                                                                       // 4902
            defsEnter.append('clipPath')                                                                               // 4903
                .attr('id', 'nv-chart-clip-path-' + id)                                                                // 4904
                .append('rect');                                                                                       // 4905
                                                                                                                       // 4906
            wrap.select('#nv-chart-clip-path-' + id + ' rect')                                                         // 4907
                .attr('width', availableWidth)                                                                         // 4908
                .attr('height', availableHeight);                                                                      // 4909
                                                                                                                       // 4910
            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');                                // 4911
                                                                                                                       // 4912
            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')                                                    // 4913
                .data(function(d) { return d }, function(d,i) {return getX(d,i)});                                     // 4914
            bars.exit().remove();                                                                                      // 4915
                                                                                                                       // 4916
            bars.enter().append('rect')                                                                                // 4917
                .attr('x', 0 )                                                                                         // 4918
                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })                    // 4919
                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })            // 4920
                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
                .on('mouseover', function(d,i) {                                                                       // 4922
                    if (!interactive) return;                                                                          // 4923
                    d3.select(this).classed('hover', true);                                                            // 4924
                    dispatch.elementMouseover({                                                                        // 4925
                        data: d,                                                                                       // 4926
                        index: i,                                                                                      // 4927
                        color: d3.select(this).style("fill")                                                           // 4928
                    });                                                                                                // 4929
                                                                                                                       // 4930
                })                                                                                                     // 4931
                .on('mouseout', function(d,i) {                                                                        // 4932
                    if (!interactive) return;                                                                          // 4933
                    d3.select(this).classed('hover', false);                                                           // 4934
                    dispatch.elementMouseout({                                                                         // 4935
                        data: d,                                                                                       // 4936
                        index: i,                                                                                      // 4937
                        color: d3.select(this).style("fill")                                                           // 4938
                    });                                                                                                // 4939
                })                                                                                                     // 4940
                .on('mousemove', function(d,i) {                                                                       // 4941
                    if (!interactive) return;                                                                          // 4942
                    dispatch.elementMousemove({                                                                        // 4943
                        data: d,                                                                                       // 4944
                        index: i,                                                                                      // 4945
                        color: d3.select(this).style("fill")                                                           // 4946
                    });                                                                                                // 4947
                })                                                                                                     // 4948
                .on('click', function(d,i) {                                                                           // 4949
                    if (!interactive) return;                                                                          // 4950
                    dispatch.elementClick({                                                                            // 4951
                        data: d,                                                                                       // 4952
                        index: i,                                                                                      // 4953
                        color: d3.select(this).style("fill")                                                           // 4954
                    });                                                                                                // 4955
                    d3.event.stopPropagation();                                                                        // 4956
                })                                                                                                     // 4957
                .on('dblclick', function(d,i) {                                                                        // 4958
                    if (!interactive) return;                                                                          // 4959
                    dispatch.elementDblClick({                                                                         // 4960
                        data: d,                                                                                       // 4961
                        index: i,                                                                                      // 4962
                        color: d3.select(this).style("fill")                                                           // 4963
                    });                                                                                                // 4964
                    d3.event.stopPropagation();                                                                        // 4965
                });                                                                                                    // 4966
                                                                                                                       // 4967
            bars                                                                                                       // 4968
                .attr('fill', function(d,i) { return color(d, i); })                                                   // 4969
                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })
                .watchTransition(renderWatch, 'bars')                                                                  // 4971
                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
                //TODO: better width calculations that don't assume always uniform data spacing;w                      // 4973
                .attr('width', (availableWidth / data[0].values.length) * .9 );                                        // 4974
                                                                                                                       // 4975
            bars.watchTransition(renderWatch, 'bars')                                                                  // 4976
                .attr('y', function(d,i) {                                                                             // 4977
                    var rval = getY(d,i) < 0 ?                                                                         // 4978
                        y(0) :                                                                                         // 4979
                            y(0) - y(getY(d,i)) < 1 ?                                                                  // 4980
                        y(0) - 1 :                                                                                     // 4981
                        y(getY(d,i));                                                                                  // 4982
                    return nv.utils.NaNtoZero(rval);                                                                   // 4983
                })                                                                                                     // 4984
                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });
                                                                                                                       // 4986
        });                                                                                                            // 4987
                                                                                                                       // 4988
        renderWatch.renderEnd('historicalBar immediate');                                                              // 4989
        return chart;                                                                                                  // 4990
    }                                                                                                                  // 4991
                                                                                                                       // 4992
    //Create methods to allow outside functions to highlight a specific bar.                                           // 4993
    chart.highlightPoint = function(pointIndex, isHoverOver) {                                                         // 4994
        container                                                                                                      // 4995
            .select(".nv-bars .nv-bar-0-" + pointIndex)                                                                // 4996
            .classed("hover", isHoverOver)                                                                             // 4997
        ;                                                                                                              // 4998
    };                                                                                                                 // 4999
                                                                                                                       // 5000
    chart.clearHighlights = function() {                                                                               // 5001
        container                                                                                                      // 5002
            .select(".nv-bars .nv-bar.hover")                                                                          // 5003
            .classed("hover", false)                                                                                   // 5004
        ;                                                                                                              // 5005
    };                                                                                                                 // 5006
                                                                                                                       // 5007
    //============================================================                                                     // 5008
    // Expose Public Variables                                                                                         // 5009
    //------------------------------------------------------------                                                     // 5010
                                                                                                                       // 5011
    chart.dispatch = dispatch;                                                                                         // 5012
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 5013
                                                                                                                       // 5014
    chart._options = Object.create({}, {                                                                               // 5015
        // simple options, just get/set the necessary values                                                           // 5016
        width:   {get: function(){return width;}, set: function(_){width=_;}},                                         // 5017
        height:  {get: function(){return height;}, set: function(_){height=_;}},                                       // 5018
        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},                                       // 5019
        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},                                       // 5020
        padData: {get: function(){return padData;}, set: function(_){padData=_;}},                                     // 5021
        x:       {get: function(){return getX;}, set: function(_){getX=_;}},                                           // 5022
        y:       {get: function(){return getY;}, set: function(_){getY=_;}},                                           // 5023
        xScale:  {get: function(){return x;}, set: function(_){x=_;}},                                                 // 5024
        yScale:  {get: function(){return y;}, set: function(_){y=_;}},                                                 // 5025
        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                     // 5026
        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                     // 5027
        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},                                       // 5028
        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},                                       // 5029
        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},                               // 5030
        id:          {get: function(){return id;}, set: function(_){id=_;}},                                           // 5031
        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},                         // 5032
                                                                                                                       // 5033
        // options that require extra logic in the setter                                                              // 5034
        margin: {get: function(){return margin;}, set: function(_){                                                    // 5035
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 5036
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 5037
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 5038
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 5039
        }},                                                                                                            // 5040
        color:  {get: function(){return color;}, set: function(_){                                                     // 5041
            color = nv.utils.getColor(_);                                                                              // 5042
        }}                                                                                                             // 5043
    });                                                                                                                // 5044
                                                                                                                       // 5045
    nv.utils.initOptions(chart);                                                                                       // 5046
                                                                                                                       // 5047
    return chart;                                                                                                      // 5048
};                                                                                                                     // 5049
                                                                                                                       // 5050
nv.models.historicalBarChart = function(bar_model) {                                                                   // 5051
    "use strict";                                                                                                      // 5052
                                                                                                                       // 5053
    //============================================================                                                     // 5054
    // Public Variables with Default Settings                                                                          // 5055
    //------------------------------------------------------------                                                     // 5056
                                                                                                                       // 5057
    var bars = bar_model || nv.models.historicalBar()                                                                  // 5058
        , xAxis = nv.models.axis()                                                                                     // 5059
        , yAxis = nv.models.axis()                                                                                     // 5060
        , legend = nv.models.legend()                                                                                  // 5061
        , interactiveLayer = nv.interactiveGuideline()                                                                 // 5062
        , tooltip = nv.models.tooltip()                                                                                // 5063
        ;                                                                                                              // 5064
                                                                                                                       // 5065
                                                                                                                       // 5066
    var margin = {top: 30, right: 90, bottom: 50, left: 90}                                                            // 5067
        , color = nv.utils.defaultColor()                                                                              // 5068
        , width = null                                                                                                 // 5069
        , height = null                                                                                                // 5070
        , showLegend = false                                                                                           // 5071
        , showXAxis = true                                                                                             // 5072
        , showYAxis = true                                                                                             // 5073
        , rightAlignYAxis = false                                                                                      // 5074
        , useInteractiveGuideline = false                                                                              // 5075
        , x                                                                                                            // 5076
        , y                                                                                                            // 5077
        , state = {}                                                                                                   // 5078
        , defaultState = null                                                                                          // 5079
        , noData = null                                                                                                // 5080
        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')                             // 5081
        , transitionDuration = 250                                                                                     // 5082
        ;                                                                                                              // 5083
                                                                                                                       // 5084
    xAxis.orient('bottom').tickPadding(7);                                                                             // 5085
    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');                                                               // 5086
    tooltip                                                                                                            // 5087
        .duration(0)                                                                                                   // 5088
        .headerEnabled(false)                                                                                          // 5089
        .valueFormatter(function(d, i) {                                                                               // 5090
            return yAxis.tickFormat()(d, i);                                                                           // 5091
        })                                                                                                             // 5092
        .headerFormatter(function(d, i) {                                                                              // 5093
            return xAxis.tickFormat()(d, i);                                                                           // 5094
        });                                                                                                            // 5095
                                                                                                                       // 5096
                                                                                                                       // 5097
    //============================================================                                                     // 5098
    // Private Variables                                                                                               // 5099
    //------------------------------------------------------------                                                     // 5100
                                                                                                                       // 5101
    var renderWatch = nv.utils.renderWatch(dispatch, 0);                                                               // 5102
                                                                                                                       // 5103
    function chart(selection) {                                                                                        // 5104
        selection.each(function(data) {                                                                                // 5105
            renderWatch.reset();                                                                                       // 5106
            renderWatch.models(bars);                                                                                  // 5107
            if (showXAxis) renderWatch.models(xAxis);                                                                  // 5108
            if (showYAxis) renderWatch.models(yAxis);                                                                  // 5109
                                                                                                                       // 5110
            var container = d3.select(this),                                                                           // 5111
                that = this;                                                                                           // 5112
            nv.utils.initSVG(container);                                                                               // 5113
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 5114
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 5115
                                                                                                                       // 5116
            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };             // 5117
            chart.container = this;                                                                                    // 5118
                                                                                                                       // 5119
            //set state.disabled                                                                                       // 5120
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 5121
                                                                                                                       // 5122
            if (!defaultState) {                                                                                       // 5123
                var key;                                                                                               // 5124
                defaultState = {};                                                                                     // 5125
                for (key in state) {                                                                                   // 5126
                    if (state[key] instanceof Array)                                                                   // 5127
                        defaultState[key] = state[key].slice(0);                                                       // 5128
                    else                                                                                               // 5129
                        defaultState[key] = state[key];                                                                // 5130
                }                                                                                                      // 5131
            }                                                                                                          // 5132
                                                                                                                       // 5133
            // Display noData message if there's nothing to show.                                                      // 5134
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 5135
                nv.utils.noData(chart, container)                                                                      // 5136
                return chart;                                                                                          // 5137
            } else {                                                                                                   // 5138
                container.selectAll('.nv-noData').remove();                                                            // 5139
            }                                                                                                          // 5140
                                                                                                                       // 5141
            // Setup Scales                                                                                            // 5142
            x = bars.xScale();                                                                                         // 5143
            y = bars.yScale();                                                                                         // 5144
                                                                                                                       // 5145
            // Setup containers and skeleton of chart                                                                  // 5146
            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);                            // 5147
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');     // 5148
            var g = wrap.select('g');                                                                                  // 5149
                                                                                                                       // 5150
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 5151
            gEnter.append('g').attr('class', 'nv-y nv-axis');                                                          // 5152
            gEnter.append('g').attr('class', 'nv-barsWrap');                                                           // 5153
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 5154
            gEnter.append('g').attr('class', 'nv-interactive');                                                        // 5155
                                                                                                                       // 5156
            // Legend                                                                                                  // 5157
            if (showLegend) {                                                                                          // 5158
                legend.width(availableWidth);                                                                          // 5159
                                                                                                                       // 5160
                g.select('.nv-legendWrap')                                                                             // 5161
                    .datum(data)                                                                                       // 5162
                    .call(legend);                                                                                     // 5163
                                                                                                                       // 5164
                if ( margin.top != legend.height()) {                                                                  // 5165
                    margin.top = legend.height();                                                                      // 5166
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 5167
                }                                                                                                      // 5168
                                                                                                                       // 5169
                wrap.select('.nv-legendWrap')                                                                          // 5170
                    .attr('transform', 'translate(0,' + (-margin.top) +')')                                            // 5171
            }                                                                                                          // 5172
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 5173
                                                                                                                       // 5174
            if (rightAlignYAxis) {                                                                                     // 5175
                g.select(".nv-y.nv-axis")                                                                              // 5176
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 5177
            }                                                                                                          // 5178
                                                                                                                       // 5179
            //Set up interactive layer                                                                                 // 5180
            if (useInteractiveGuideline) {                                                                             // 5181
                interactiveLayer                                                                                       // 5182
                    .width(availableWidth)                                                                             // 5183
                    .height(availableHeight)                                                                           // 5184
                    .margin({left:margin.left, top:margin.top})                                                        // 5185
                    .svgContainer(container)                                                                           // 5186
                    .xScale(x);                                                                                        // 5187
                wrap.select(".nv-interactive").call(interactiveLayer);                                                 // 5188
            }                                                                                                          // 5189
            bars                                                                                                       // 5190
                .width(availableWidth)                                                                                 // 5191
                .height(availableHeight)                                                                               // 5192
                .color(data.map(function(d,i) {                                                                        // 5193
                    return d.color || color(d, i);                                                                     // 5194
                }).filter(function(d,i) { return !data[i].disabled }));                                                // 5195
                                                                                                                       // 5196
            var barsWrap = g.select('.nv-barsWrap')                                                                    // 5197
                .datum(data.filter(function(d) { return !d.disabled }));                                               // 5198
            barsWrap.transition().call(bars);                                                                          // 5199
                                                                                                                       // 5200
            // Setup Axes                                                                                              // 5201
            if (showXAxis) {                                                                                           // 5202
                xAxis                                                                                                  // 5203
                    .scale(x)                                                                                          // 5204
                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                           // 5205
                    .tickSize(-availableHeight, 0);                                                                    // 5206
                                                                                                                       // 5207
                g.select('.nv-x.nv-axis')                                                                              // 5208
                    .attr('transform', 'translate(0,' + y.range()[0] + ')');                                           // 5209
                g.select('.nv-x.nv-axis')                                                                              // 5210
                    .transition()                                                                                      // 5211
                    .call(xAxis);                                                                                      // 5212
            }                                                                                                          // 5213
                                                                                                                       // 5214
            if (showYAxis) {                                                                                           // 5215
                yAxis                                                                                                  // 5216
                    .scale(y)                                                                                          // 5217
                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )                                           // 5218
                    .tickSize( -availableWidth, 0);                                                                    // 5219
                                                                                                                       // 5220
                g.select('.nv-y.nv-axis')                                                                              // 5221
                    .transition()                                                                                      // 5222
                    .call(yAxis);                                                                                      // 5223
            }                                                                                                          // 5224
                                                                                                                       // 5225
            //============================================================                                             // 5226
            // Event Handling/Dispatching (in chart's scope)                                                           // 5227
            //------------------------------------------------------------                                             // 5228
                                                                                                                       // 5229
            interactiveLayer.dispatch.on('elementMousemove', function(e) {                                             // 5230
                bars.clearHighlights();                                                                                // 5231
                                                                                                                       // 5232
                var singlePoint, pointIndex, pointXLocation, allData = [];                                             // 5233
                data                                                                                                   // 5234
                    .filter(function(series, i) {                                                                      // 5235
                        series.seriesIndex = i;                                                                        // 5236
                        return !series.disabled;                                                                       // 5237
                    })                                                                                                 // 5238
                    .forEach(function(series,i) {                                                                      // 5239
                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());                    // 5240
                        bars.highlightPoint(pointIndex,true);                                                          // 5241
                        var point = series.values[pointIndex];                                                         // 5242
                        if (point === undefined) return;                                                               // 5243
                        if (singlePoint === undefined) singlePoint = point;                                            // 5244
                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
                        allData.push({                                                                                 // 5246
                            key: series.key,                                                                           // 5247
                            value: chart.y()(point, pointIndex),                                                       // 5248
                            color: color(series,series.seriesIndex),                                                   // 5249
                            data: series.values[pointIndex]                                                            // 5250
                        });                                                                                            // 5251
                    });                                                                                                // 5252
                                                                                                                       // 5253
                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));                                    // 5254
                interactiveLayer.tooltip                                                                               // 5255
                    .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})                        // 5256
                    .chartContainer(that.parentNode)                                                                   // 5257
                    .valueFormatter(function(d,i) {                                                                    // 5258
                        return yAxis.tickFormat()(d);                                                                  // 5259
                    })                                                                                                 // 5260
                    .data({                                                                                            // 5261
                        value: xValue,                                                                                 // 5262
                        index: pointIndex,                                                                             // 5263
                        series: allData                                                                                // 5264
                    })();                                                                                              // 5265
                                                                                                                       // 5266
                interactiveLayer.renderGuideLine(pointXLocation);                                                      // 5267
                                                                                                                       // 5268
            });                                                                                                        // 5269
                                                                                                                       // 5270
            interactiveLayer.dispatch.on("elementMouseout",function(e) {                                               // 5271
                dispatch.tooltipHide();                                                                                // 5272
                bars.clearHighlights();                                                                                // 5273
            });                                                                                                        // 5274
                                                                                                                       // 5275
            legend.dispatch.on('legendClick', function(d,i) {                                                          // 5276
                d.disabled = !d.disabled;                                                                              // 5277
                                                                                                                       // 5278
                if (!data.filter(function(d) { return !d.disabled }).length) {                                         // 5279
                    data.map(function(d) {                                                                             // 5280
                        d.disabled = false;                                                                            // 5281
                        wrap.selectAll('.nv-series').classed('disabled', false);                                       // 5282
                        return d;                                                                                      // 5283
                    });                                                                                                // 5284
                }                                                                                                      // 5285
                                                                                                                       // 5286
                state.disabled = data.map(function(d) { return !!d.disabled });                                        // 5287
                dispatch.stateChange(state);                                                                           // 5288
                                                                                                                       // 5289
                selection.transition().call(chart);                                                                    // 5290
            });                                                                                                        // 5291
                                                                                                                       // 5292
            legend.dispatch.on('legendDblclick', function(d) {                                                         // 5293
                //Double clicking should always enable current series, and disabled all others.                        // 5294
                data.forEach(function(d) {                                                                             // 5295
                    d.disabled = true;                                                                                 // 5296
                });                                                                                                    // 5297
                d.disabled = false;                                                                                    // 5298
                                                                                                                       // 5299
                state.disabled = data.map(function(d) { return !!d.disabled });                                        // 5300
                dispatch.stateChange(state);                                                                           // 5301
                chart.update();                                                                                        // 5302
            });                                                                                                        // 5303
                                                                                                                       // 5304
            dispatch.on('changeState', function(e) {                                                                   // 5305
                if (typeof e.disabled !== 'undefined') {                                                               // 5306
                    data.forEach(function(series,i) {                                                                  // 5307
                        series.disabled = e.disabled[i];                                                               // 5308
                    });                                                                                                // 5309
                                                                                                                       // 5310
                    state.disabled = e.disabled;                                                                       // 5311
                }                                                                                                      // 5312
                                                                                                                       // 5313
                chart.update();                                                                                        // 5314
            });                                                                                                        // 5315
        });                                                                                                            // 5316
                                                                                                                       // 5317
        renderWatch.renderEnd('historicalBarChart immediate');                                                         // 5318
        return chart;                                                                                                  // 5319
    }                                                                                                                  // 5320
                                                                                                                       // 5321
    //============================================================                                                     // 5322
    // Event Handling/Dispatching (out of chart's scope)                                                               // 5323
    //------------------------------------------------------------                                                     // 5324
                                                                                                                       // 5325
    bars.dispatch.on('elementMouseover.tooltip', function(evt) {                                                       // 5326
        evt['series'] = {                                                                                              // 5327
            key: chart.x()(evt.data),                                                                                  // 5328
            value: chart.y()(evt.data),                                                                                // 5329
            color: evt.color                                                                                           // 5330
        };                                                                                                             // 5331
        tooltip.data(evt).hidden(false);                                                                               // 5332
    });                                                                                                                // 5333
                                                                                                                       // 5334
    bars.dispatch.on('elementMouseout.tooltip', function(evt) {                                                        // 5335
        tooltip.hidden(true);                                                                                          // 5336
    });                                                                                                                // 5337
                                                                                                                       // 5338
    bars.dispatch.on('elementMousemove.tooltip', function(evt) {                                                       // 5339
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 5340
    });                                                                                                                // 5341
                                                                                                                       // 5342
    //============================================================                                                     // 5343
    // Expose Public Variables                                                                                         // 5344
    //------------------------------------------------------------                                                     // 5345
                                                                                                                       // 5346
    // expose chart's sub-components                                                                                   // 5347
    chart.dispatch = dispatch;                                                                                         // 5348
    chart.bars = bars;                                                                                                 // 5349
    chart.legend = legend;                                                                                             // 5350
    chart.xAxis = xAxis;                                                                                               // 5351
    chart.yAxis = yAxis;                                                                                               // 5352
    chart.interactiveLayer = interactiveLayer;                                                                         // 5353
    chart.tooltip = tooltip;                                                                                           // 5354
                                                                                                                       // 5355
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 5356
                                                                                                                       // 5357
    chart._options = Object.create({}, {                                                                               // 5358
        // simple options, just get/set the necessary values                                                           // 5359
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 5360
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 5361
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 5362
        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                               // 5363
        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                               // 5364
        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                   // 5365
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 5366
                                                                                                                       // 5367
        // deprecated options                                                                                          // 5368
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 5369
            // deprecated after 1.7.1                                                                                  // 5370
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 5371
            tooltip.enabled(!!_);                                                                                      // 5372
        }},                                                                                                            // 5373
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 5374
            // deprecated after 1.7.1                                                                                  // 5375
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 5376
            tooltip.contentGenerator(_);                                                                               // 5377
        }},                                                                                                            // 5378
                                                                                                                       // 5379
        // options that require extra logic in the setter                                                              // 5380
        margin: {get: function(){return margin;}, set: function(_){                                                    // 5381
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 5382
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 5383
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 5384
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 5385
        }},                                                                                                            // 5386
        color:  {get: function(){return color;}, set: function(_){                                                     // 5387
            color = nv.utils.getColor(_);                                                                              // 5388
            legend.color(color);                                                                                       // 5389
            bars.color(color);                                                                                         // 5390
        }},                                                                                                            // 5391
        duration:    {get: function(){return transitionDuration;}, set: function(_){                                   // 5392
            transitionDuration=_;                                                                                      // 5393
            renderWatch.reset(transitionDuration);                                                                     // 5394
            yAxis.duration(transitionDuration);                                                                        // 5395
            xAxis.duration(transitionDuration);                                                                        // 5396
        }},                                                                                                            // 5397
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 5398
            rightAlignYAxis = _;                                                                                       // 5399
            yAxis.orient( (_) ? 'right' : 'left');                                                                     // 5400
        }},                                                                                                            // 5401
        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){                  // 5402
            useInteractiveGuideline = _;                                                                               // 5403
            if (_ === true) {                                                                                          // 5404
                chart.interactive(false);                                                                              // 5405
            }                                                                                                          // 5406
        }}                                                                                                             // 5407
    });                                                                                                                // 5408
                                                                                                                       // 5409
    nv.utils.inheritOptions(chart, bars);                                                                              // 5410
    nv.utils.initOptions(chart);                                                                                       // 5411
                                                                                                                       // 5412
    return chart;                                                                                                      // 5413
};                                                                                                                     // 5414
                                                                                                                       // 5415
                                                                                                                       // 5416
// ohlcChart is just a historical chart with ohlc bars and some tweaks                                                 // 5417
nv.models.ohlcBarChart = function() {                                                                                  // 5418
    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());                                                     // 5419
                                                                                                                       // 5420
    // special default tooltip since we show multiple values per x                                                     // 5421
    chart.useInteractiveGuideline(true);                                                                               // 5422
    chart.interactiveLayer.tooltip.contentGenerator(function(data) {                                                   // 5423
        // we assume only one series exists for this chart                                                             // 5424
        var d = data.series[0].data;                                                                                   // 5425
        // match line colors as defined in nv.d3.css                                                                   // 5426
        var color = d.open < d.close ? "2ca02c" : "d62728";                                                            // 5427
        return '' +                                                                                                    // 5428
            '<h3 style="color: #' + color + '">' + data.value + '</h3>' +                                              // 5429
            '<table>' +                                                                                                // 5430
            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +                               // 5431
            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +                             // 5432
            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +                                // 5433
            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +                                 // 5434
            '</table>';                                                                                                // 5435
    });                                                                                                                // 5436
    return chart;                                                                                                      // 5437
};                                                                                                                     // 5438
                                                                                                                       // 5439
// candlestickChart is just a historical chart with candlestick bars and some tweaks                                   // 5440
nv.models.candlestickBarChart = function() {                                                                           // 5441
    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());                                              // 5442
                                                                                                                       // 5443
    // special default tooltip since we show multiple values per x                                                     // 5444
    chart.useInteractiveGuideline(true);                                                                               // 5445
    chart.interactiveLayer.tooltip.contentGenerator(function(data) {                                                   // 5446
        // we assume only one series exists for this chart                                                             // 5447
        var d = data.series[0].data;                                                                                   // 5448
        // match line colors as defined in nv.d3.css                                                                   // 5449
        var color = d.open < d.close ? "2ca02c" : "d62728";                                                            // 5450
        return '' +                                                                                                    // 5451
            '<h3 style="color: #' + color + '">' + data.value + '</h3>' +                                              // 5452
            '<table>' +                                                                                                // 5453
            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +                               // 5454
            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +                             // 5455
            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +                                // 5456
            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +                                 // 5457
            '</table>';                                                                                                // 5458
    });                                                                                                                // 5459
    return chart;                                                                                                      // 5460
};                                                                                                                     // 5461
nv.models.legend = function() {                                                                                        // 5462
    "use strict";                                                                                                      // 5463
                                                                                                                       // 5464
    //============================================================                                                     // 5465
    // Public Variables with Default Settings                                                                          // 5466
    //------------------------------------------------------------                                                     // 5467
                                                                                                                       // 5468
    var margin = {top: 5, right: 0, bottom: 5, left: 0}                                                                // 5469
        , width = 400                                                                                                  // 5470
        , height = 20                                                                                                  // 5471
        , getKey = function(d) { return d.key }                                                                        // 5472
        , color = nv.utils.getColor()                                                                                  // 5473
        , align = true                                                                                                 // 5474
        , padding = 32 //define how much space between legend items. - recommend 32 for furious version                // 5475
        , rightAlign = true                                                                                            // 5476
        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.       // 5477
        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)
        , expanded = false                                                                                             // 5479
        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')  // 5480
        , vers = 'classic' //Options are "classic" and "furious"                                                       // 5481
        ;                                                                                                              // 5482
                                                                                                                       // 5483
    function chart(selection) {                                                                                        // 5484
        selection.each(function(data) {                                                                                // 5485
            var availableWidth = width - margin.left - margin.right,                                                   // 5486
                container = d3.select(this);                                                                           // 5487
            nv.utils.initSVG(container);                                                                               // 5488
                                                                                                                       // 5489
            // Setup containers and skeleton of chart                                                                  // 5490
            var wrap = container.selectAll('g.nv-legend').data([data]);                                                // 5491
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');                         // 5492
            var g = wrap.select('g');                                                                                  // 5493
                                                                                                                       // 5494
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 5495
                                                                                                                       // 5496
            var series = g.selectAll('.nv-series')                                                                     // 5497
                .data(function(d) {                                                                                    // 5498
                    if(vers != 'furious') return d;                                                                    // 5499
                                                                                                                       // 5500
                    return d.filter(function(n) {                                                                      // 5501
                        return expanded ? true : !n.disengaged;                                                        // 5502
                    });                                                                                                // 5503
                });                                                                                                    // 5504
                                                                                                                       // 5505
            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');                                   // 5506
            var seriesShape;                                                                                           // 5507
                                                                                                                       // 5508
            var versPadding;                                                                                           // 5509
            switch(vers) {                                                                                             // 5510
                case 'furious' :                                                                                       // 5511
                    versPadding = 23;                                                                                  // 5512
                    break;                                                                                             // 5513
                case 'classic' :                                                                                       // 5514
                    versPadding = 20;                                                                                  // 5515
            }                                                                                                          // 5516
                                                                                                                       // 5517
            if(vers == 'classic') {                                                                                    // 5518
                seriesEnter.append('circle')                                                                           // 5519
                    .style('stroke-width', 2)                                                                          // 5520
                    .attr('class','nv-legend-symbol')                                                                  // 5521
                    .attr('r', 5);                                                                                     // 5522
                                                                                                                       // 5523
                seriesShape = series.select('circle');                                                                 // 5524
            } else if (vers == 'furious') {                                                                            // 5525
                seriesEnter.append('rect')                                                                             // 5526
                    .style('stroke-width', 2)                                                                          // 5527
                    .attr('class','nv-legend-symbol')                                                                  // 5528
                    .attr('rx', 3)                                                                                     // 5529
                    .attr('ry', 3);                                                                                    // 5530
                                                                                                                       // 5531
                seriesShape = series.select('.nv-legend-symbol');                                                      // 5532
                                                                                                                       // 5533
                seriesEnter.append('g')                                                                                // 5534
                    .attr('class', 'nv-check-box')                                                                     // 5535
                    .property('innerHTML','<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>')
                    .attr('transform', 'translate(-10,-8)scale(0.5)');                                                 // 5537
                                                                                                                       // 5538
                var seriesCheckbox = series.select('.nv-check-box');                                                   // 5539
                                                                                                                       // 5540
                seriesCheckbox.each(function(d,i) {                                                                    // 5541
                    d3.select(this).selectAll('path')                                                                  // 5542
                        .attr('stroke', setTextColor(d,i));                                                            // 5543
                });                                                                                                    // 5544
            }                                                                                                          // 5545
                                                                                                                       // 5546
            seriesEnter.append('text')                                                                                 // 5547
                .attr('text-anchor', 'start')                                                                          // 5548
                .attr('class','nv-legend-text')                                                                        // 5549
                .attr('dy', '.32em')                                                                                   // 5550
                .attr('dx', '8');                                                                                      // 5551
                                                                                                                       // 5552
            var seriesText = series.select('text.nv-legend-text');                                                     // 5553
                                                                                                                       // 5554
            series                                                                                                     // 5555
                .on('mouseover', function(d,i) {                                                                       // 5556
                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects                   // 5557
                })                                                                                                     // 5558
                .on('mouseout', function(d,i) {                                                                        // 5559
                    dispatch.legendMouseout(d,i);                                                                      // 5560
                })                                                                                                     // 5561
                .on('click', function(d,i) {                                                                           // 5562
                    dispatch.legendClick(d,i);                                                                         // 5563
                    // make sure we re-get data in case it was modified                                                // 5564
                    var data = series.data();                                                                          // 5565
                    if (updateState) {                                                                                 // 5566
                        if(vers =='classic') {                                                                         // 5567
                            if (radioButtonMode) {                                                                     // 5568
                                //Radio button mode: set every series to disabled,                                     // 5569
                                //  and enable the clicked series.                                                     // 5570
                                data.forEach(function(series) { series.disabled = true});                              // 5571
                                d.disabled = false;                                                                    // 5572
                            }                                                                                          // 5573
                            else {                                                                                     // 5574
                                d.disabled = !d.disabled;                                                              // 5575
                                if (data.every(function(series) { return series.disabled})) {                          // 5576
                                    //the default behavior of NVD3 legends is, if every single series                  // 5577
                                    // is disabled, turn all series' back on.                                          // 5578
                                    data.forEach(function(series) { series.disabled = false});                         // 5579
                                }                                                                                      // 5580
                            }                                                                                          // 5581
                        } else if(vers == 'furious') {                                                                 // 5582
                            if(expanded) {                                                                             // 5583
                                d.disengaged = !d.disengaged;                                                          // 5584
                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;          // 5585
                                d.disabled = d.disengaged || d.userDisabled;                                           // 5586
                            } else if (!expanded) {                                                                    // 5587
                                d.disabled = !d.disabled;                                                              // 5588
                                d.userDisabled = d.disabled;                                                           // 5589
                                var engaged = data.filter(function(d) { return !d.disengaged; });                      // 5590
                                if (engaged.every(function(series) { return series.userDisabled })) {                  // 5591
                                    //the default behavior of NVD3 legends is, if every single series                  // 5592
                                    // is disabled, turn all series' back on.                                          // 5593
                                    data.forEach(function(series) {                                                    // 5594
                                        series.disabled = series.userDisabled = false;                                 // 5595
                                    });                                                                                // 5596
                                }                                                                                      // 5597
                            }                                                                                          // 5598
                        }                                                                                              // 5599
                        dispatch.stateChange({                                                                         // 5600
                            disabled: data.map(function(d) { return !!d.disabled }),                                   // 5601
                            disengaged: data.map(function(d) { return !!d.disengaged })                                // 5602
                        });                                                                                            // 5603
                                                                                                                       // 5604
                    }                                                                                                  // 5605
                })                                                                                                     // 5606
                .on('dblclick', function(d,i) {                                                                        // 5607
                    if(vers == 'furious' && expanded) return;                                                          // 5608
                    dispatch.legendDblclick(d,i);                                                                      // 5609
                    if (updateState) {                                                                                 // 5610
                        // make sure we re-get data in case it was modified                                            // 5611
                        var data = series.data();                                                                      // 5612
                        //the default behavior of NVD3 legends, when double clicking one,                              // 5613
                        // is to set all other series' to false, and make the double clicked series enabled.           // 5614
                        data.forEach(function(series) {                                                                // 5615
                            series.disabled = true;                                                                    // 5616
                            if(vers == 'furious') series.userDisabled = series.disabled;                               // 5617
                        });                                                                                            // 5618
                        d.disabled = false;                                                                            // 5619
                        if(vers == 'furious') d.userDisabled = d.disabled;                                             // 5620
                        dispatch.stateChange({                                                                         // 5621
                            disabled: data.map(function(d) { return !!d.disabled })                                    // 5622
                        });                                                                                            // 5623
                    }                                                                                                  // 5624
                });                                                                                                    // 5625
                                                                                                                       // 5626
            series.classed('nv-disabled', function(d) { return d.userDisabled });                                      // 5627
            series.exit().remove();                                                                                    // 5628
                                                                                                                       // 5629
            seriesText                                                                                                 // 5630
                .attr('fill', setTextColor)                                                                            // 5631
                .text(getKey);                                                                                         // 5632
                                                                                                                       // 5633
            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option) // 5634
            // NEW ALIGNING CODE, TODO: clean up                                                                       // 5635
            var legendWidth = 0;                                                                                       // 5636
            if (align) {                                                                                               // 5637
                                                                                                                       // 5638
                var seriesWidths = [];                                                                                 // 5639
                series.each(function(d,i) {                                                                            // 5640
                    var legendText = d3.select(this).select('text');                                                   // 5641
                    var nodeTextLength;                                                                                // 5642
                    try {                                                                                              // 5643
                        nodeTextLength = legendText.node().getComputedTextLength();                                    // 5644
                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead
                        if(nodeTextLength <= 0) throw Error();                                                         // 5646
                    }                                                                                                  // 5647
                    catch(e) {                                                                                         // 5648
                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);                                     // 5649
                    }                                                                                                  // 5650
                                                                                                                       // 5651
                    seriesWidths.push(nodeTextLength + padding);                                                       // 5652
                });                                                                                                    // 5653
                                                                                                                       // 5654
                var seriesPerRow = 0;                                                                                  // 5655
                var columnWidths = [];                                                                                 // 5656
                legendWidth = 0;                                                                                       // 5657
                                                                                                                       // 5658
                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {                          // 5659
                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];                                           // 5660
                    legendWidth += seriesWidths[seriesPerRow++];                                                       // 5661
                }                                                                                                      // 5662
                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row                              // 5663
                                                                                                                       // 5664
                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {                                           // 5665
                    columnWidths = [];                                                                                 // 5666
                    seriesPerRow--;                                                                                    // 5667
                                                                                                                       // 5668
                    for (var k = 0; k < seriesWidths.length; k++) {                                                    // 5669
                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )                                  // 5670
                            columnWidths[k % seriesPerRow] = seriesWidths[k];                                          // 5671
                    }                                                                                                  // 5672
                                                                                                                       // 5673
                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {                              // 5674
                        return prev + cur;                                                                             // 5675
                    });                                                                                                // 5676
                }                                                                                                      // 5677
                                                                                                                       // 5678
                var xPositions = [];                                                                                   // 5679
                for (var i = 0, curX = 0; i < seriesPerRow; i++) {                                                     // 5680
                    xPositions[i] = curX;                                                                              // 5681
                    curX += columnWidths[i];                                                                           // 5682
                }                                                                                                      // 5683
                                                                                                                       // 5684
                series                                                                                                 // 5685
                    .attr('transform', function(d, i) {                                                                // 5686
                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
                    });                                                                                                // 5688
                                                                                                                       // 5689
                //position legend as far right as possible within the total width                                      // 5690
                if (rightAlign) {                                                                                      // 5691
                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')'); // 5692
                }                                                                                                      // 5693
                else {                                                                                                 // 5694
                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');                                       // 5695
                }                                                                                                      // 5696
                                                                                                                       // 5697
                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);   // 5698
                                                                                                                       // 5699
            } else {                                                                                                   // 5700
                                                                                                                       // 5701
                var ypos = 5,                                                                                          // 5702
                    newxpos = 5,                                                                                       // 5703
                    maxwidth = 0,                                                                                      // 5704
                    xpos;                                                                                              // 5705
                series                                                                                                 // 5706
                    .attr('transform', function(d, i) {                                                                // 5707
                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;          // 5708
                        xpos = newxpos;                                                                                // 5709
                                                                                                                       // 5710
                        if (width < margin.left + margin.right + xpos + length) {                                      // 5711
                            newxpos = xpos = 5;                                                                        // 5712
                            ypos += versPadding;                                                                       // 5713
                        }                                                                                              // 5714
                                                                                                                       // 5715
                        newxpos += length;                                                                             // 5716
                        if (newxpos > maxwidth) maxwidth = newxpos;                                                    // 5717
                                                                                                                       // 5718
                        if(legendWidth < xpos + maxwidth) {                                                            // 5719
                            legendWidth = xpos + maxwidth;                                                             // 5720
                        }                                                                                              // 5721
                        return 'translate(' + xpos + ',' + ypos + ')';                                                 // 5722
                    });                                                                                                // 5723
                                                                                                                       // 5724
                //position legend as far right as possible within the total width                                      // 5725
                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');        // 5726
                                                                                                                       // 5727
                height = margin.top + margin.bottom + ypos + 15;                                                       // 5728
            }                                                                                                          // 5729
                                                                                                                       // 5730
            if(vers == 'furious') {                                                                                    // 5731
                // Size rectangles after text is placed                                                                // 5732
                seriesShape                                                                                            // 5733
                    .attr('width', function(d,i) {                                                                     // 5734
                        return seriesText[0][i].getComputedTextLength() + 27;                                          // 5735
                    })                                                                                                 // 5736
                    .attr('height', 18)                                                                                // 5737
                    .attr('y', -9)                                                                                     // 5738
                    .attr('x', -15);                                                                                   // 5739
                                                                                                                       // 5740
                // The background for the expanded legend (UI)                                                         // 5741
                gEnter.insert('rect',':first-child')                                                                   // 5742
                    .attr('class', 'nv-legend-bg')                                                                     // 5743
                    .attr('fill', '#eee')                                                                              // 5744
                    // .attr('stroke', '#444')                                                                         // 5745
                    .attr('opacity',0);                                                                                // 5746
                                                                                                                       // 5747
                var seriesBG = g.select('.nv-legend-bg');                                                              // 5748
                                                                                                                       // 5749
                seriesBG                                                                                               // 5750
                .transition().duration(300)                                                                            // 5751
                    .attr('x', -versPadding )                                                                          // 5752
                    .attr('width', legendWidth + versPadding - 12)                                                     // 5753
                    .attr('height', height + 10)                                                                       // 5754
                    .attr('y', -margin.top - 10)                                                                       // 5755
                    .attr('opacity', expanded ? 1 : 0);                                                                // 5756
                                                                                                                       // 5757
                                                                                                                       // 5758
            }                                                                                                          // 5759
                                                                                                                       // 5760
            seriesShape                                                                                                // 5761
                .style('fill', setBGColor)                                                                             // 5762
                .style('fill-opacity', setBGOpacity)                                                                   // 5763
                .style('stroke', setBGColor);                                                                          // 5764
        });                                                                                                            // 5765
                                                                                                                       // 5766
        function setTextColor(d,i) {                                                                                   // 5767
            if(vers != 'furious') return '#000';                                                                       // 5768
            if(expanded) {                                                                                             // 5769
                return d.disengaged ? '#000' : '#fff';                                                                 // 5770
            } else if (!expanded) {                                                                                    // 5771
                if(!d.color) d.color = color(d,i);                                                                     // 5772
                return !!d.disabled ? d.color : '#fff';                                                                // 5773
            }                                                                                                          // 5774
        }                                                                                                              // 5775
                                                                                                                       // 5776
        function setBGColor(d,i) {                                                                                     // 5777
            if(expanded && vers == 'furious') {                                                                        // 5778
                return d.disengaged ? '#eee' : d.color || color(d,i);                                                  // 5779
            } else {                                                                                                   // 5780
                return d.color || color(d,i);                                                                          // 5781
            }                                                                                                          // 5782
        }                                                                                                              // 5783
                                                                                                                       // 5784
                                                                                                                       // 5785
        function setBGOpacity(d,i) {                                                                                   // 5786
            if(expanded && vers == 'furious') {                                                                        // 5787
                return 1;                                                                                              // 5788
            } else {                                                                                                   // 5789
                return !!d.disabled ? 0 : 1;                                                                           // 5790
            }                                                                                                          // 5791
        }                                                                                                              // 5792
                                                                                                                       // 5793
        return chart;                                                                                                  // 5794
    }                                                                                                                  // 5795
                                                                                                                       // 5796
    //============================================================                                                     // 5797
    // Expose Public Variables                                                                                         // 5798
    //------------------------------------------------------------                                                     // 5799
                                                                                                                       // 5800
    chart.dispatch = dispatch;                                                                                         // 5801
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 5802
                                                                                                                       // 5803
    chart._options = Object.create({}, {                                                                               // 5804
        // simple options, just get/set the necessary values                                                           // 5805
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 5806
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 5807
        key:        {get: function(){return getKey;}, set: function(_){getKey=_;}},                                    // 5808
        align:      {get: function(){return align;}, set: function(_){align=_;}},                                      // 5809
        rightAlign:    {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},                         // 5810
        padding:       {get: function(){return padding;}, set: function(_){padding=_;}},                               // 5811
        updateState:   {get: function(){return updateState;}, set: function(_){updateState=_;}},                       // 5812
        radioButtonMode:    {get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},          // 5813
        expanded:   {get: function(){return expanded;}, set: function(_){expanded=_;}},                                // 5814
        vers:   {get: function(){return vers;}, set: function(_){vers=_;}},                                            // 5815
                                                                                                                       // 5816
        // options that require extra logic in the setter                                                              // 5817
        margin: {get: function(){return margin;}, set: function(_){                                                    // 5818
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 5819
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 5820
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 5821
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 5822
        }},                                                                                                            // 5823
        color:  {get: function(){return color;}, set: function(_){                                                     // 5824
            color = nv.utils.getColor(_);                                                                              // 5825
        }}                                                                                                             // 5826
    });                                                                                                                // 5827
                                                                                                                       // 5828
    nv.utils.initOptions(chart);                                                                                       // 5829
                                                                                                                       // 5830
    return chart;                                                                                                      // 5831
};                                                                                                                     // 5832
                                                                                                                       // 5833
nv.models.line = function() {                                                                                          // 5834
    "use strict";                                                                                                      // 5835
    //============================================================                                                     // 5836
    // Public Variables with Default Settings                                                                          // 5837
    //------------------------------------------------------------                                                     // 5838
                                                                                                                       // 5839
    var  scatter = nv.models.scatter()                                                                                 // 5840
        ;                                                                                                              // 5841
                                                                                                                       // 5842
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 5843
        , width = 960                                                                                                  // 5844
        , height = 500                                                                                                 // 5845
        , container = null                                                                                             // 5846
        , strokeWidth = 1.5                                                                                            // 5847
        , color = nv.utils.defaultColor() // a function that returns a color                                           // 5848
        , getX = function(d) { return d.x } // accessor to get the x value from a data point                           // 5849
        , getY = function(d) { return d.y } // accessor to get the y value from a data point                           // 5850
        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined
        , isArea = function(d) { return d.area } // decides if a line is an area or just a line                        // 5852
        , clipEdge = false // if true, masks lines within x and y scale                                                // 5853
        , x //can be accessed via chart.xScale()                                                                       // 5854
        , y //can be accessed via chart.yScale()                                                                       // 5855
        , interpolate = "linear" // controls the line interpolation                                                    // 5856
        , duration = 250                                                                                               // 5857
        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')                   // 5858
        ;                                                                                                              // 5859
                                                                                                                       // 5860
    scatter                                                                                                            // 5861
        .pointSize(16) // default size                                                                                 // 5862
        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor     // 5863
    ;                                                                                                                  // 5864
                                                                                                                       // 5865
    //============================================================                                                     // 5866
                                                                                                                       // 5867
                                                                                                                       // 5868
    //============================================================                                                     // 5869
    // Private Variables                                                                                               // 5870
    //------------------------------------------------------------                                                     // 5871
                                                                                                                       // 5872
    var x0, y0 //used to store previous scales                                                                         // 5873
        , renderWatch = nv.utils.renderWatch(dispatch, duration)                                                       // 5874
        ;                                                                                                              // 5875
                                                                                                                       // 5876
    //============================================================                                                     // 5877
                                                                                                                       // 5878
                                                                                                                       // 5879
    function chart(selection) {                                                                                        // 5880
        renderWatch.reset();                                                                                           // 5881
        renderWatch.models(scatter);                                                                                   // 5882
        selection.each(function(data) {                                                                                // 5883
            container = d3.select(this);                                                                               // 5884
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 5885
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 5886
            nv.utils.initSVG(container);                                                                               // 5887
                                                                                                                       // 5888
            // Setup Scales                                                                                            // 5889
            x = scatter.xScale();                                                                                      // 5890
            y = scatter.yScale();                                                                                      // 5891
                                                                                                                       // 5892
            x0 = x0 || x;                                                                                              // 5893
            y0 = y0 || y;                                                                                              // 5894
                                                                                                                       // 5895
            // Setup containers and skeleton of chart                                                                  // 5896
            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);                                          // 5897
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');                            // 5898
            var defsEnter = wrapEnter.append('defs');                                                                  // 5899
            var gEnter = wrapEnter.append('g');                                                                        // 5900
            var g = wrap.select('g');                                                                                  // 5901
                                                                                                                       // 5902
            gEnter.append('g').attr('class', 'nv-groups');                                                             // 5903
            gEnter.append('g').attr('class', 'nv-scatterWrap');                                                        // 5904
                                                                                                                       // 5905
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 5906
                                                                                                                       // 5907
            scatter                                                                                                    // 5908
                .width(availableWidth)                                                                                 // 5909
                .height(availableHeight);                                                                              // 5910
                                                                                                                       // 5911
            var scatterWrap = wrap.select('.nv-scatterWrap');                                                          // 5912
            scatterWrap.call(scatter);                                                                                 // 5913
                                                                                                                       // 5914
            defsEnter.append('clipPath')                                                                               // 5915
                .attr('id', 'nv-edge-clip-' + scatter.id())                                                            // 5916
                .append('rect');                                                                                       // 5917
                                                                                                                       // 5918
            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')                                                     // 5919
                .attr('width', availableWidth)                                                                         // 5920
                .attr('height', (availableHeight > 0) ? availableHeight : 0);                                          // 5921
                                                                                                                       // 5922
            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');                         // 5923
            scatterWrap                                                                                                // 5924
                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');                         // 5925
                                                                                                                       // 5926
            var groups = wrap.select('.nv-groups').selectAll('.nv-group')                                              // 5927
                .data(function(d) { return d }, function(d) { return d.key });                                         // 5928
            groups.enter().append('g')                                                                                 // 5929
                .style('stroke-opacity', 1e-6)                                                                         // 5930
                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })                            // 5931
                .style('fill-opacity', 1e-6);                                                                          // 5932
                                                                                                                       // 5933
            groups.exit().remove();                                                                                    // 5934
                                                                                                                       // 5935
            groups                                                                                                     // 5936
                .attr('class', function(d,i) {                                                                         // 5937
                    return (d.classed || '') + ' nv-group nv-series-' + i;                                             // 5938
                })                                                                                                     // 5939
                .classed('hover', function(d) { return d.hover })                                                      // 5940
                .style('fill', function(d,i){ return color(d, i) })                                                    // 5941
                .style('stroke', function(d,i){ return color(d, i)});                                                  // 5942
            groups.watchTransition(renderWatch, 'line: groups')                                                        // 5943
                .style('stroke-opacity', 1)                                                                            // 5944
                .style('fill-opacity', function(d) { return d.fillOpacity || .5});                                     // 5945
                                                                                                                       // 5946
            var areaPaths = groups.selectAll('path.nv-area')                                                           // 5947
                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area
            areaPaths.enter().append('path')                                                                           // 5949
                .attr('class', 'nv-area')                                                                              // 5950
                .attr('d', function(d) {                                                                               // 5951
                    return d3.svg.area()                                                                               // 5952
                        .interpolate(interpolate)                                                                      // 5953
                        .defined(defined)                                                                              // 5954
                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })                                 // 5955
                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })                                // 5956
                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })
                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this // 5958
                        .apply(this, [d.values])                                                                       // 5959
                });                                                                                                    // 5960
            groups.exit().selectAll('path.nv-area')                                                                    // 5961
                .remove();                                                                                             // 5962
                                                                                                                       // 5963
            areaPaths.watchTransition(renderWatch, 'line: areaPaths')                                                  // 5964
                .attr('d', function(d) {                                                                               // 5965
                    return d3.svg.area()                                                                               // 5966
                        .interpolate(interpolate)                                                                      // 5967
                        .defined(defined)                                                                              // 5968
                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })                                  // 5969
                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })                                 // 5970
                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })
                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this // 5972
                        .apply(this, [d.values])                                                                       // 5973
                });                                                                                                    // 5974
                                                                                                                       // 5975
            var linePaths = groups.selectAll('path.nv-line')                                                           // 5976
                .data(function(d) { return [d.values] });                                                              // 5977
                                                                                                                       // 5978
            linePaths.enter().append('path')                                                                           // 5979
                .attr('class', 'nv-line')                                                                              // 5980
                .attr('d',                                                                                             // 5981
                    d3.svg.line()                                                                                      // 5982
                    .interpolate(interpolate)                                                                          // 5983
                    .defined(defined)                                                                                  // 5984
                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })                                     // 5985
                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })                                     // 5986
            );                                                                                                         // 5987
                                                                                                                       // 5988
            linePaths.watchTransition(renderWatch, 'line: linePaths')                                                  // 5989
                .attr('d',                                                                                             // 5990
                    d3.svg.line()                                                                                      // 5991
                    .interpolate(interpolate)                                                                          // 5992
                    .defined(defined)                                                                                  // 5993
                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })                                      // 5994
                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })                                      // 5995
            );                                                                                                         // 5996
                                                                                                                       // 5997
            //store old scales for use in transitions on update                                                        // 5998
            x0 = x.copy();                                                                                             // 5999
            y0 = y.copy();                                                                                             // 6000
        });                                                                                                            // 6001
        renderWatch.renderEnd('line immediate');                                                                       // 6002
        return chart;                                                                                                  // 6003
    }                                                                                                                  // 6004
                                                                                                                       // 6005
                                                                                                                       // 6006
    //============================================================                                                     // 6007
    // Expose Public Variables                                                                                         // 6008
    //------------------------------------------------------------                                                     // 6009
                                                                                                                       // 6010
    chart.dispatch = dispatch;                                                                                         // 6011
    chart.scatter = scatter;                                                                                           // 6012
    // Pass through events                                                                                             // 6013
    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });                  // 6014
    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });          // 6015
    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });            // 6016
                                                                                                                       // 6017
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 6018
                                                                                                                       // 6019
    chart._options = Object.create({}, {                                                                               // 6020
        // simple options, just get/set the necessary values                                                           // 6021
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 6022
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 6023
        defined: {get: function(){return defined;}, set: function(_){defined=_;}},                                     // 6024
        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},                    // 6025
        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},                               // 6026
                                                                                                                       // 6027
        // options that require extra logic in the setter                                                              // 6028
        margin: {get: function(){return margin;}, set: function(_){                                                    // 6029
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 6030
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 6031
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 6032
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 6033
        }},                                                                                                            // 6034
        duration: {get: function(){return duration;}, set: function(_){                                                // 6035
            duration = _;                                                                                              // 6036
            renderWatch.reset(duration);                                                                               // 6037
            scatter.duration(duration);                                                                                // 6038
        }},                                                                                                            // 6039
        isArea: {get: function(){return isArea;}, set: function(_){                                                    // 6040
            isArea = d3.functor(_);                                                                                    // 6041
        }},                                                                                                            // 6042
        x: {get: function(){return getX;}, set: function(_){                                                           // 6043
            getX = _;                                                                                                  // 6044
            scatter.x(_);                                                                                              // 6045
        }},                                                                                                            // 6046
        y: {get: function(){return getY;}, set: function(_){                                                           // 6047
            getY = _;                                                                                                  // 6048
            scatter.y(_);                                                                                              // 6049
        }},                                                                                                            // 6050
        color:  {get: function(){return color;}, set: function(_){                                                     // 6051
            color = nv.utils.getColor(_);                                                                              // 6052
            scatter.color(color);                                                                                      // 6053
        }}                                                                                                             // 6054
    });                                                                                                                // 6055
                                                                                                                       // 6056
    nv.utils.inheritOptions(chart, scatter);                                                                           // 6057
    nv.utils.initOptions(chart);                                                                                       // 6058
                                                                                                                       // 6059
    return chart;                                                                                                      // 6060
};                                                                                                                     // 6061
nv.models.lineChart = function() {                                                                                     // 6062
    "use strict";                                                                                                      // 6063
                                                                                                                       // 6064
    //============================================================                                                     // 6065
    // Public Variables with Default Settings                                                                          // 6066
    //------------------------------------------------------------                                                     // 6067
                                                                                                                       // 6068
    var lines = nv.models.line()                                                                                       // 6069
        , xAxis = nv.models.axis()                                                                                     // 6070
        , yAxis = nv.models.axis()                                                                                     // 6071
        , legend = nv.models.legend()                                                                                  // 6072
        , interactiveLayer = nv.interactiveGuideline()                                                                 // 6073
        , tooltip = nv.models.tooltip()                                                                                // 6074
        ;                                                                                                              // 6075
                                                                                                                       // 6076
    var margin = {top: 30, right: 20, bottom: 50, left: 60}                                                            // 6077
        , color = nv.utils.defaultColor()                                                                              // 6078
        , width = null                                                                                                 // 6079
        , height = null                                                                                                // 6080
        , showLegend = true                                                                                            // 6081
        , showXAxis = true                                                                                             // 6082
        , showYAxis = true                                                                                             // 6083
        , rightAlignYAxis = false                                                                                      // 6084
        , useInteractiveGuideline = false                                                                              // 6085
        , x                                                                                                            // 6086
        , y                                                                                                            // 6087
        , state = nv.utils.state()                                                                                     // 6088
        , defaultState = null                                                                                          // 6089
        , noData = null                                                                                                // 6090
        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')              // 6091
        , duration = 250                                                                                               // 6092
        ;                                                                                                              // 6093
                                                                                                                       // 6094
    // set options on sub-objects for this chart                                                                       // 6095
    xAxis.orient('bottom').tickPadding(7);                                                                             // 6096
    yAxis.orient(rightAlignYAxis ? 'right' : 'left');                                                                  // 6097
    tooltip.valueFormatter(function(d, i) {                                                                            // 6098
        return yAxis.tickFormat()(d, i);                                                                               // 6099
    }).headerFormatter(function(d, i) {                                                                                // 6100
        return xAxis.tickFormat()(d, i);                                                                               // 6101
    });                                                                                                                // 6102
                                                                                                                       // 6103
                                                                                                                       // 6104
    //============================================================                                                     // 6105
    // Private Variables                                                                                               // 6106
    //------------------------------------------------------------                                                     // 6107
                                                                                                                       // 6108
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 6109
                                                                                                                       // 6110
    var stateGetter = function(data) {                                                                                 // 6111
        return function(){                                                                                             // 6112
            return {                                                                                                   // 6113
                active: data.map(function(d) { return !d.disabled })                                                   // 6114
            };                                                                                                         // 6115
        }                                                                                                              // 6116
    };                                                                                                                 // 6117
                                                                                                                       // 6118
    var stateSetter = function(data) {                                                                                 // 6119
        return function(state) {                                                                                       // 6120
            if (state.active !== undefined)                                                                            // 6121
                data.forEach(function(series,i) {                                                                      // 6122
                    series.disabled = !state.active[i];                                                                // 6123
                });                                                                                                    // 6124
        }                                                                                                              // 6125
    };                                                                                                                 // 6126
                                                                                                                       // 6127
    function chart(selection) {                                                                                        // 6128
        renderWatch.reset();                                                                                           // 6129
        renderWatch.models(lines);                                                                                     // 6130
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 6131
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 6132
                                                                                                                       // 6133
        selection.each(function(data) {                                                                                // 6134
            var container = d3.select(this),                                                                           // 6135
                that = this;                                                                                           // 6136
            nv.utils.initSVG(container);                                                                               // 6137
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 6138
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 6139
                                                                                                                       // 6140
            chart.update = function() {                                                                                // 6141
                if (duration === 0)                                                                                    // 6142
                    container.call(chart);                                                                             // 6143
                else                                                                                                   // 6144
                    container.transition().duration(duration).call(chart)                                              // 6145
            };                                                                                                         // 6146
            chart.container = this;                                                                                    // 6147
                                                                                                                       // 6148
            state                                                                                                      // 6149
                .setter(stateSetter(data), chart.update)                                                               // 6150
                .getter(stateGetter(data))                                                                             // 6151
                .update();                                                                                             // 6152
                                                                                                                       // 6153
            // DEPRECATED set state.disableddisabled                                                                   // 6154
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 6155
                                                                                                                       // 6156
            if (!defaultState) {                                                                                       // 6157
                var key;                                                                                               // 6158
                defaultState = {};                                                                                     // 6159
                for (key in state) {                                                                                   // 6160
                    if (state[key] instanceof Array)                                                                   // 6161
                        defaultState[key] = state[key].slice(0);                                                       // 6162
                    else                                                                                               // 6163
                        defaultState[key] = state[key];                                                                // 6164
                }                                                                                                      // 6165
            }                                                                                                          // 6166
                                                                                                                       // 6167
            // Display noData message if there's nothing to show.                                                      // 6168
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 6169
                nv.utils.noData(chart, container)                                                                      // 6170
                return chart;                                                                                          // 6171
            } else {                                                                                                   // 6172
                container.selectAll('.nv-noData').remove();                                                            // 6173
            }                                                                                                          // 6174
                                                                                                                       // 6175
                                                                                                                       // 6176
            // Setup Scales                                                                                            // 6177
            x = lines.xScale();                                                                                        // 6178
            y = lines.yScale();                                                                                        // 6179
                                                                                                                       // 6180
            // Setup containers and skeleton of chart                                                                  // 6181
            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);                                     // 6182
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');              // 6183
            var g = wrap.select('g');                                                                                  // 6184
                                                                                                                       // 6185
            gEnter.append("rect").style("opacity",0);                                                                  // 6186
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 6187
            gEnter.append('g').attr('class', 'nv-y nv-axis');                                                          // 6188
            gEnter.append('g').attr('class', 'nv-linesWrap');                                                          // 6189
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 6190
            gEnter.append('g').attr('class', 'nv-interactive');                                                        // 6191
                                                                                                                       // 6192
            g.select("rect")                                                                                           // 6193
                .attr("width",availableWidth)                                                                          // 6194
                .attr("height",(availableHeight > 0) ? availableHeight : 0);                                           // 6195
                                                                                                                       // 6196
            // Legend                                                                                                  // 6197
            if (showLegend) {                                                                                          // 6198
                legend.width(availableWidth);                                                                          // 6199
                                                                                                                       // 6200
                g.select('.nv-legendWrap')                                                                             // 6201
                    .datum(data)                                                                                       // 6202
                    .call(legend);                                                                                     // 6203
                                                                                                                       // 6204
                if ( margin.top != legend.height()) {                                                                  // 6205
                    margin.top = legend.height();                                                                      // 6206
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 6207
                }                                                                                                      // 6208
                                                                                                                       // 6209
                wrap.select('.nv-legendWrap')                                                                          // 6210
                    .attr('transform', 'translate(0,' + (-margin.top) +')')                                            // 6211
            }                                                                                                          // 6212
                                                                                                                       // 6213
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 6214
                                                                                                                       // 6215
            if (rightAlignYAxis) {                                                                                     // 6216
                g.select(".nv-y.nv-axis")                                                                              // 6217
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 6218
            }                                                                                                          // 6219
                                                                                                                       // 6220
            //Set up interactive layer                                                                                 // 6221
            if (useInteractiveGuideline) {                                                                             // 6222
                interactiveLayer                                                                                       // 6223
                    .width(availableWidth)                                                                             // 6224
                    .height(availableHeight)                                                                           // 6225
                    .margin({left:margin.left, top:margin.top})                                                        // 6226
                    .svgContainer(container)                                                                           // 6227
                    .xScale(x);                                                                                        // 6228
                wrap.select(".nv-interactive").call(interactiveLayer);                                                 // 6229
            }                                                                                                          // 6230
                                                                                                                       // 6231
            lines                                                                                                      // 6232
                .width(availableWidth)                                                                                 // 6233
                .height(availableHeight)                                                                               // 6234
                .color(data.map(function(d,i) {                                                                        // 6235
                    return d.color || color(d, i);                                                                     // 6236
                }).filter(function(d,i) { return !data[i].disabled }));                                                // 6237
                                                                                                                       // 6238
                                                                                                                       // 6239
            var linesWrap = g.select('.nv-linesWrap')                                                                  // 6240
                .datum(data.filter(function(d) { return !d.disabled }));                                               // 6241
                                                                                                                       // 6242
            linesWrap.call(lines);                                                                                     // 6243
                                                                                                                       // 6244
            // Setup Axes                                                                                              // 6245
            if (showXAxis) {                                                                                           // 6246
                xAxis                                                                                                  // 6247
                    .scale(x)                                                                                          // 6248
                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )                                            // 6249
                    .tickSize(-availableHeight, 0);                                                                    // 6250
                                                                                                                       // 6251
                g.select('.nv-x.nv-axis')                                                                              // 6252
                    .attr('transform', 'translate(0,' + y.range()[0] + ')');                                           // 6253
                g.select('.nv-x.nv-axis')                                                                              // 6254
                    .call(xAxis);                                                                                      // 6255
            }                                                                                                          // 6256
                                                                                                                       // 6257
            if (showYAxis) {                                                                                           // 6258
                yAxis                                                                                                  // 6259
                    .scale(y)                                                                                          // 6260
                    ._ticks(nv.utils.calcTicksY(availableHeight/36, data) )                                            // 6261
                    .tickSize( -availableWidth, 0);                                                                    // 6262
                                                                                                                       // 6263
                g.select('.nv-y.nv-axis')                                                                              // 6264
                    .call(yAxis);                                                                                      // 6265
            }                                                                                                          // 6266
                                                                                                                       // 6267
            //============================================================                                             // 6268
            // Event Handling/Dispatching (in chart's scope)                                                           // 6269
            //------------------------------------------------------------                                             // 6270
                                                                                                                       // 6271
            legend.dispatch.on('stateChange', function(newState) {                                                     // 6272
                for (var key in newState)                                                                              // 6273
                    state[key] = newState[key];                                                                        // 6274
                dispatch.stateChange(state);                                                                           // 6275
                chart.update();                                                                                        // 6276
            });                                                                                                        // 6277
                                                                                                                       // 6278
            interactiveLayer.dispatch.on('elementMousemove', function(e) {                                             // 6279
                lines.clearHighlights();                                                                               // 6280
                var singlePoint, pointIndex, pointXLocation, allData = [];                                             // 6281
                data                                                                                                   // 6282
                    .filter(function(series, i) {                                                                      // 6283
                        series.seriesIndex = i;                                                                        // 6284
                        return !series.disabled;                                                                       // 6285
                    })                                                                                                 // 6286
                    .forEach(function(series,i) {                                                                      // 6287
                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());                    // 6288
                        var point = series.values[pointIndex];                                                         // 6289
                        var pointYValue = chart.y()(point, pointIndex);                                                // 6290
                        if (pointYValue != null) {                                                                     // 6291
                            lines.highlightPoint(i, pointIndex, true);                                                 // 6292
                        }                                                                                              // 6293
                        if (point === undefined) return;                                                               // 6294
                        if (singlePoint === undefined) singlePoint = point;                                            // 6295
                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
                        allData.push({                                                                                 // 6297
                            key: series.key,                                                                           // 6298
                            value: pointYValue,                                                                        // 6299
                            color: color(series,series.seriesIndex)                                                    // 6300
                        });                                                                                            // 6301
                    });                                                                                                // 6302
                //Highlight the tooltip entry based on which point the mouse is closest to.                            // 6303
                if (allData.length > 2) {                                                                              // 6304
                    var yValue = chart.yScale().invert(e.mouseY);                                                      // 6305
                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);              // 6306
                    var threshold = 0.03 * domainExtent;                                                               // 6307
                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);
                    if (indexToHighlight !== null)                                                                     // 6309
                        allData[indexToHighlight].highlight = true;                                                    // 6310
                }                                                                                                      // 6311
                                                                                                                       // 6312
                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));                                    // 6313
                interactiveLayer.tooltip                                                                               // 6314
                    .position({left: e.mouseX + margin.left, top: e.mouseY + margin.top})                              // 6315
                    .chartContainer(that.parentNode)                                                                   // 6316
                    .valueFormatter(function(d,i) {                                                                    // 6317
                        return d == null ? "N/A" : yAxis.tickFormat()(d);                                              // 6318
                    })                                                                                                 // 6319
                    .data({                                                                                            // 6320
                        value: xValue,                                                                                 // 6321
                        index: pointIndex,                                                                             // 6322
                        series: allData                                                                                // 6323
                    })();                                                                                              // 6324
                                                                                                                       // 6325
                interactiveLayer.renderGuideLine(pointXLocation);                                                      // 6326
                                                                                                                       // 6327
            });                                                                                                        // 6328
                                                                                                                       // 6329
            interactiveLayer.dispatch.on('elementClick', function(e) {                                                 // 6330
                var pointXLocation, allData = [];                                                                      // 6331
                                                                                                                       // 6332
                data.filter(function(series, i) {                                                                      // 6333
                    series.seriesIndex = i;                                                                            // 6334
                    return !series.disabled;                                                                           // 6335
                }).forEach(function(series) {                                                                          // 6336
                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());                    // 6337
                    var point = series.values[pointIndex];                                                             // 6338
                    if (typeof point === 'undefined') return;                                                          // 6339
                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
                    var yPos = chart.yScale()(chart.y()(point,pointIndex));                                            // 6341
                    allData.push({                                                                                     // 6342
                        point: point,                                                                                  // 6343
                        pointIndex: pointIndex,                                                                        // 6344
                        pos: [pointXLocation, yPos],                                                                   // 6345
                        seriesIndex: series.seriesIndex,                                                               // 6346
                        series: series                                                                                 // 6347
                    });                                                                                                // 6348
                });                                                                                                    // 6349
                                                                                                                       // 6350
                lines.dispatch.elementClick(allData);                                                                  // 6351
            });                                                                                                        // 6352
                                                                                                                       // 6353
            interactiveLayer.dispatch.on("elementMouseout",function(e) {                                               // 6354
                lines.clearHighlights();                                                                               // 6355
            });                                                                                                        // 6356
                                                                                                                       // 6357
            dispatch.on('changeState', function(e) {                                                                   // 6358
                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {                          // 6359
                    data.forEach(function(series,i) {                                                                  // 6360
                        series.disabled = e.disabled[i];                                                               // 6361
                    });                                                                                                // 6362
                                                                                                                       // 6363
                    state.disabled = e.disabled;                                                                       // 6364
                }                                                                                                      // 6365
                                                                                                                       // 6366
                chart.update();                                                                                        // 6367
            });                                                                                                        // 6368
                                                                                                                       // 6369
        });                                                                                                            // 6370
                                                                                                                       // 6371
        renderWatch.renderEnd('lineChart immediate');                                                                  // 6372
        return chart;                                                                                                  // 6373
    }                                                                                                                  // 6374
                                                                                                                       // 6375
    //============================================================                                                     // 6376
    // Event Handling/Dispatching (out of chart's scope)                                                               // 6377
    //------------------------------------------------------------                                                     // 6378
                                                                                                                       // 6379
    lines.dispatch.on('elementMouseover.tooltip', function(evt) {                                                      // 6380
        tooltip.data(evt).position(evt.pos).hidden(false);                                                             // 6381
    });                                                                                                                // 6382
                                                                                                                       // 6383
    lines.dispatch.on('elementMouseout.tooltip', function(evt) {                                                       // 6384
        tooltip.hidden(true)                                                                                           // 6385
    });                                                                                                                // 6386
                                                                                                                       // 6387
    //============================================================                                                     // 6388
    // Expose Public Variables                                                                                         // 6389
    //------------------------------------------------------------                                                     // 6390
                                                                                                                       // 6391
    // expose chart's sub-components                                                                                   // 6392
    chart.dispatch = dispatch;                                                                                         // 6393
    chart.lines = lines;                                                                                               // 6394
    chart.legend = legend;                                                                                             // 6395
    chart.xAxis = xAxis;                                                                                               // 6396
    chart.yAxis = yAxis;                                                                                               // 6397
    chart.interactiveLayer = interactiveLayer;                                                                         // 6398
    chart.tooltip = tooltip;                                                                                           // 6399
                                                                                                                       // 6400
    chart.dispatch = dispatch;                                                                                         // 6401
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 6402
                                                                                                                       // 6403
    chart._options = Object.create({}, {                                                                               // 6404
        // simple options, just get/set the necessary values                                                           // 6405
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 6406
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 6407
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 6408
        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                          // 6409
        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                            // 6410
        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                   // 6411
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 6412
                                                                                                                       // 6413
        // deprecated options                                                                                          // 6414
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 6415
            // deprecated after 1.7.1                                                                                  // 6416
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 6417
            tooltip.enabled(!!_);                                                                                      // 6418
        }},                                                                                                            // 6419
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 6420
            // deprecated after 1.7.1                                                                                  // 6421
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 6422
            tooltip.contentGenerator(_);                                                                               // 6423
        }},                                                                                                            // 6424
                                                                                                                       // 6425
        // options that require extra logic in the setter                                                              // 6426
        margin: {get: function(){return margin;}, set: function(_){                                                    // 6427
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 6428
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 6429
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 6430
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 6431
        }},                                                                                                            // 6432
        duration: {get: function(){return duration;}, set: function(_){                                                // 6433
            duration = _;                                                                                              // 6434
            renderWatch.reset(duration);                                                                               // 6435
            lines.duration(duration);                                                                                  // 6436
            xAxis.duration(duration);                                                                                  // 6437
            yAxis.duration(duration);                                                                                  // 6438
        }},                                                                                                            // 6439
        color:  {get: function(){return color;}, set: function(_){                                                     // 6440
            color = nv.utils.getColor(_);                                                                              // 6441
            legend.color(color);                                                                                       // 6442
            lines.color(color);                                                                                        // 6443
        }},                                                                                                            // 6444
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 6445
            rightAlignYAxis = _;                                                                                       // 6446
            yAxis.orient( rightAlignYAxis ? 'right' : 'left');                                                         // 6447
        }},                                                                                                            // 6448
        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){                  // 6449
            useInteractiveGuideline = _;                                                                               // 6450
            if (useInteractiveGuideline) {                                                                             // 6451
                lines.interactive(false);                                                                              // 6452
                lines.useVoronoi(false);                                                                               // 6453
            }                                                                                                          // 6454
        }}                                                                                                             // 6455
    });                                                                                                                // 6456
                                                                                                                       // 6457
    nv.utils.inheritOptions(chart, lines);                                                                             // 6458
    nv.utils.initOptions(chart);                                                                                       // 6459
                                                                                                                       // 6460
    return chart;                                                                                                      // 6461
};                                                                                                                     // 6462
nv.models.linePlusBarChart = function() {                                                                              // 6463
    "use strict";                                                                                                      // 6464
                                                                                                                       // 6465
    //============================================================                                                     // 6466
    // Public Variables with Default Settings                                                                          // 6467
    //------------------------------------------------------------                                                     // 6468
                                                                                                                       // 6469
    var lines = nv.models.line()                                                                                       // 6470
        , lines2 = nv.models.line()                                                                                    // 6471
        , bars = nv.models.historicalBar()                                                                             // 6472
        , bars2 = nv.models.historicalBar()                                                                            // 6473
        , xAxis = nv.models.axis()                                                                                     // 6474
        , x2Axis = nv.models.axis()                                                                                    // 6475
        , y1Axis = nv.models.axis()                                                                                    // 6476
        , y2Axis = nv.models.axis()                                                                                    // 6477
        , y3Axis = nv.models.axis()                                                                                    // 6478
        , y4Axis = nv.models.axis()                                                                                    // 6479
        , legend = nv.models.legend()                                                                                  // 6480
        , brush = d3.svg.brush()                                                                                       // 6481
        , tooltip = nv.models.tooltip()                                                                                // 6482
        ;                                                                                                              // 6483
                                                                                                                       // 6484
    var margin = {top: 30, right: 30, bottom: 30, left: 60}                                                            // 6485
        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}                                                          // 6486
        , width = null                                                                                                 // 6487
        , height = null                                                                                                // 6488
        , getX = function(d) { return d.x }                                                                            // 6489
        , getY = function(d) { return d.y }                                                                            // 6490
        , color = nv.utils.defaultColor()                                                                              // 6491
        , showLegend = true                                                                                            // 6492
        , focusEnable = true                                                                                           // 6493
        , focusShowAxisY = false                                                                                       // 6494
        , focusShowAxisX = true                                                                                        // 6495
        , focusHeight = 50                                                                                             // 6496
        , extent                                                                                                       // 6497
        , brushExtent = null                                                                                           // 6498
        , x                                                                                                            // 6499
        , x2                                                                                                           // 6500
        , y1                                                                                                           // 6501
        , y2                                                                                                           // 6502
        , y3                                                                                                           // 6503
        , y4                                                                                                           // 6504
        , noData = null                                                                                                // 6505
        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')                                                // 6506
        , transitionDuration = 0                                                                                       // 6507
        , state = nv.utils.state()                                                                                     // 6508
        , defaultState = null                                                                                          // 6509
        , legendLeftAxisHint = ' (left axis)'                                                                          // 6510
        , legendRightAxisHint = ' (right axis)'                                                                        // 6511
        ;                                                                                                              // 6512
                                                                                                                       // 6513
    lines.clipEdge(true);                                                                                              // 6514
    lines2.interactive(false);                                                                                         // 6515
    // We don't want any points emitted for the focus chart's scatter graph.                                           // 6516
    lines2.pointActive(function(d) { return false });                                                                  // 6517
    xAxis.orient('bottom').tickPadding(5);                                                                             // 6518
    y1Axis.orient('left');                                                                                             // 6519
    y2Axis.orient('right');                                                                                            // 6520
    x2Axis.orient('bottom').tickPadding(5);                                                                            // 6521
    y3Axis.orient('left');                                                                                             // 6522
    y4Axis.orient('right');                                                                                            // 6523
                                                                                                                       // 6524
    tooltip.headerEnabled(true).headerFormatter(function(d, i) {                                                       // 6525
        return xAxis.tickFormat()(d, i);                                                                               // 6526
    });                                                                                                                // 6527
                                                                                                                       // 6528
    //============================================================                                                     // 6529
    // Private Variables                                                                                               // 6530
    //------------------------------------------------------------                                                     // 6531
                                                                                                                       // 6532
    var stateGetter = function(data) {                                                                                 // 6533
        return function(){                                                                                             // 6534
            return {                                                                                                   // 6535
                active: data.map(function(d) { return !d.disabled })                                                   // 6536
            };                                                                                                         // 6537
        }                                                                                                              // 6538
    };                                                                                                                 // 6539
                                                                                                                       // 6540
    var stateSetter = function(data) {                                                                                 // 6541
        return function(state) {                                                                                       // 6542
            if (state.active !== undefined)                                                                            // 6543
                data.forEach(function(series,i) {                                                                      // 6544
                    series.disabled = !state.active[i];                                                                // 6545
                });                                                                                                    // 6546
        }                                                                                                              // 6547
    };                                                                                                                 // 6548
                                                                                                                       // 6549
    var allDisabled = function(data) {                                                                                 // 6550
      return data.every(function(series) {                                                                             // 6551
        return series.disabled;                                                                                        // 6552
      });                                                                                                              // 6553
    }                                                                                                                  // 6554
                                                                                                                       // 6555
    function chart(selection) {                                                                                        // 6556
        selection.each(function(data) {                                                                                // 6557
            var container = d3.select(this),                                                                           // 6558
                that = this;                                                                                           // 6559
            nv.utils.initSVG(container);                                                                               // 6560
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 6561
                availableHeight1 = nv.utils.availableHeight(height, container, margin)                                 // 6562
                    - (focusEnable ? focusHeight : 0),                                                                 // 6563
                availableHeight2 = focusHeight - margin2.top - margin2.bottom;                                         // 6564
                                                                                                                       // 6565
            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };            // 6566
            chart.container = this;                                                                                    // 6567
                                                                                                                       // 6568
            state                                                                                                      // 6569
                .setter(stateSetter(data), chart.update)                                                               // 6570
                .getter(stateGetter(data))                                                                             // 6571
                .update();                                                                                             // 6572
                                                                                                                       // 6573
            // DEPRECATED set state.disableddisabled                                                                   // 6574
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 6575
                                                                                                                       // 6576
            if (!defaultState) {                                                                                       // 6577
                var key;                                                                                               // 6578
                defaultState = {};                                                                                     // 6579
                for (key in state) {                                                                                   // 6580
                    if (state[key] instanceof Array)                                                                   // 6581
                        defaultState[key] = state[key].slice(0);                                                       // 6582
                    else                                                                                               // 6583
                        defaultState[key] = state[key];                                                                // 6584
                }                                                                                                      // 6585
            }                                                                                                          // 6586
                                                                                                                       // 6587
            // Display No Data message if there's nothing to show.                                                     // 6588
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 6589
                nv.utils.noData(chart, container)                                                                      // 6590
                return chart;                                                                                          // 6591
            } else {                                                                                                   // 6592
                container.selectAll('.nv-noData').remove();                                                            // 6593
            }                                                                                                          // 6594
                                                                                                                       // 6595
            // Setup Scales                                                                                            // 6596
            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });                                   // 6597
            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240
                                                                                                                       // 6599
            x = bars.xScale();                                                                                         // 6600
            x2 = x2Axis.scale();                                                                                       // 6601
            y1 = bars.yScale();                                                                                        // 6602
            y2 = lines.yScale();                                                                                       // 6603
            y3 = bars2.yScale();                                                                                       // 6604
            y4 = lines2.yScale();                                                                                      // 6605
                                                                                                                       // 6606
            var series1 = data                                                                                         // 6607
                .filter(function(d) { return !d.disabled && d.bar })                                                   // 6608
                .map(function(d) {                                                                                     // 6609
                    return d.values.map(function(d,i) {                                                                // 6610
                        return { x: getX(d,i), y: getY(d,i) }                                                          // 6611
                    })                                                                                                 // 6612
                });                                                                                                    // 6613
                                                                                                                       // 6614
            var series2 = data                                                                                         // 6615
                .filter(function(d) { return !d.disabled && !d.bar })                                                  // 6616
                .map(function(d) {                                                                                     // 6617
                    return d.values.map(function(d,i) {                                                                // 6618
                        return { x: getX(d,i), y: getY(d,i) }                                                          // 6619
                    })                                                                                                 // 6620
                });                                                                                                    // 6621
                                                                                                                       // 6622
            x.range([0, availableWidth]);                                                                              // 6623
                                                                                                                       // 6624
            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))                     // 6625
                .range([0, availableWidth]);                                                                           // 6626
                                                                                                                       // 6627
            // Setup containers and skeleton of chart                                                                  // 6628
            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);                                   // 6629
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');            // 6630
            var g = wrap.select('g');                                                                                  // 6631
                                                                                                                       // 6632
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 6633
                                                                                                                       // 6634
            // this is the main chart                                                                                  // 6635
            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');                                             // 6636
            focusEnter.append('g').attr('class', 'nv-x nv-axis');                                                      // 6637
            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');                                                     // 6638
            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');                                                     // 6639
            focusEnter.append('g').attr('class', 'nv-barsWrap');                                                       // 6640
            focusEnter.append('g').attr('class', 'nv-linesWrap');                                                      // 6641
                                                                                                                       // 6642
            // context chart is where you can focus in                                                                 // 6643
            var contextEnter = gEnter.append('g').attr('class', 'nv-context');                                         // 6644
            contextEnter.append('g').attr('class', 'nv-x nv-axis');                                                    // 6645
            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');                                                   // 6646
            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');                                                   // 6647
            contextEnter.append('g').attr('class', 'nv-barsWrap');                                                     // 6648
            contextEnter.append('g').attr('class', 'nv-linesWrap');                                                    // 6649
            contextEnter.append('g').attr('class', 'nv-brushBackground');                                              // 6650
            contextEnter.append('g').attr('class', 'nv-x nv-brush');                                                   // 6651
                                                                                                                       // 6652
            //============================================================                                             // 6653
            // Legend                                                                                                  // 6654
            //------------------------------------------------------------                                             // 6655
                                                                                                                       // 6656
            if (showLegend) {                                                                                          // 6657
                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;                                // 6658
                var legendXPosition = legend.align() ? legendWidth : 0;                                                // 6659
                                                                                                                       // 6660
                legend.width(legendWidth);                                                                             // 6661
                                                                                                                       // 6662
                g.select('.nv-legendWrap')                                                                             // 6663
                    .datum(data.map(function(series) {                                                                 // 6664
                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;       // 6665
                        series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);     // 6666
                        return series;                                                                                 // 6667
                    }))                                                                                                // 6668
                    .call(legend);                                                                                     // 6669
                                                                                                                       // 6670
                if ( margin.top != legend.height()) {                                                                  // 6671
                    margin.top = legend.height();                                                                      // 6672
                    // FIXME: shouldn't this be "- (focusEnabled ? focusHeight : 0)"?                                  // 6673
                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;              // 6674
                }                                                                                                      // 6675
                                                                                                                       // 6676
                g.select('.nv-legendWrap')                                                                             // 6677
                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');                     // 6678
            }                                                                                                          // 6679
                                                                                                                       // 6680
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 6681
                                                                                                                       // 6682
            //============================================================                                             // 6683
            // Context chart (focus chart) components                                                                  // 6684
            //------------------------------------------------------------                                             // 6685
                                                                                                                       // 6686
            // hide or show the focus context chart                                                                    // 6687
            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');                                // 6688
                                                                                                                       // 6689
            bars2                                                                                                      // 6690
                .width(availableWidth)                                                                                 // 6691
                .height(availableHeight2)                                                                              // 6692
                .color(data.map(function (d, i) {                                                                      // 6693
                    return d.color || color(d, i);                                                                     // 6694
                }).filter(function (d, i) {                                                                            // 6695
                    return !data[i].disabled && data[i].bar                                                            // 6696
                }));                                                                                                   // 6697
            lines2                                                                                                     // 6698
                .width(availableWidth)                                                                                 // 6699
                .height(availableHeight2)                                                                              // 6700
                .color(data.map(function (d, i) {                                                                      // 6701
                    return d.color || color(d, i);                                                                     // 6702
                }).filter(function (d, i) {                                                                            // 6703
                    return !data[i].disabled && !data[i].bar                                                           // 6704
                }));                                                                                                   // 6705
                                                                                                                       // 6706
            var bars2Wrap = g.select('.nv-context .nv-barsWrap')                                                       // 6707
                .datum(dataBars.length ? dataBars : [                                                                  // 6708
                    {values: []}                                                                                       // 6709
                ]);                                                                                                    // 6710
            var lines2Wrap = g.select('.nv-context .nv-linesWrap')                                                     // 6711
                .datum(allDisabled(dataLines) ?                                                                        // 6712
                       [{values: []}] :                                                                                // 6713
                       dataLines.filter(function(dataLine) {                                                           // 6714
                         return !dataLine.disabled;                                                                    // 6715
                       }));                                                                                            // 6716
                                                                                                                       // 6717
            g.select('.nv-context')                                                                                    // 6718
                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');          // 6719
                                                                                                                       // 6720
            bars2Wrap.transition().call(bars2);                                                                        // 6721
            lines2Wrap.transition().call(lines2);                                                                      // 6722
                                                                                                                       // 6723
            // context (focus chart) axis controls                                                                     // 6724
            if (focusShowAxisX) {                                                                                      // 6725
                x2Axis                                                                                                 // 6726
                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))                                          // 6727
                    .tickSize(-availableHeight2, 0);                                                                   // 6728
                g.select('.nv-context .nv-x.nv-axis')                                                                  // 6729
                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');                                          // 6730
                g.select('.nv-context .nv-x.nv-axis').transition()                                                     // 6731
                    .call(x2Axis);                                                                                     // 6732
            }                                                                                                          // 6733
                                                                                                                       // 6734
            if (focusShowAxisY) {                                                                                      // 6735
                y3Axis                                                                                                 // 6736
                    .scale(y3)                                                                                         // 6737
                    ._ticks( availableHeight2 / 36 )                                                                   // 6738
                    .tickSize( -availableWidth, 0);                                                                    // 6739
                y4Axis                                                                                                 // 6740
                    .scale(y4)                                                                                         // 6741
                    ._ticks( availableHeight2 / 36 )                                                                   // 6742
                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none      // 6743
                                                                                                                       // 6744
                g.select('.nv-context .nv-y3.nv-axis')                                                                 // 6745
                    .style('opacity', dataBars.length ? 1 : 0)                                                         // 6746
                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');                                          // 6747
                g.select('.nv-context .nv-y2.nv-axis')                                                                 // 6748
                    .style('opacity', dataLines.length ? 1 : 0)                                                        // 6749
                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');                                          // 6750
                                                                                                                       // 6751
                g.select('.nv-context .nv-y1.nv-axis').transition()                                                    // 6752
                    .call(y3Axis);                                                                                     // 6753
                g.select('.nv-context .nv-y2.nv-axis').transition()                                                    // 6754
                    .call(y4Axis);                                                                                     // 6755
            }                                                                                                          // 6756
                                                                                                                       // 6757
            // Setup Brush                                                                                             // 6758
            brush.x(x2).on('brush', onBrush);                                                                          // 6759
                                                                                                                       // 6760
            if (brushExtent) brush.extent(brushExtent);                                                                // 6761
                                                                                                                       // 6762
            var brushBG = g.select('.nv-brushBackground').selectAll('g')                                               // 6763
                .data([brushExtent || brush.extent()]);                                                                // 6764
                                                                                                                       // 6765
            var brushBGenter = brushBG.enter()                                                                         // 6766
                .append('g');                                                                                          // 6767
                                                                                                                       // 6768
            brushBGenter.append('rect')                                                                                // 6769
                .attr('class', 'left')                                                                                 // 6770
                .attr('x', 0)                                                                                          // 6771
                .attr('y', 0)                                                                                          // 6772
                .attr('height', availableHeight2);                                                                     // 6773
                                                                                                                       // 6774
            brushBGenter.append('rect')                                                                                // 6775
                .attr('class', 'right')                                                                                // 6776
                .attr('x', 0)                                                                                          // 6777
                .attr('y', 0)                                                                                          // 6778
                .attr('height', availableHeight2);                                                                     // 6779
                                                                                                                       // 6780
            var gBrush = g.select('.nv-x.nv-brush')                                                                    // 6781
                .call(brush);                                                                                          // 6782
            gBrush.selectAll('rect')                                                                                   // 6783
                //.attr('y', -5)                                                                                       // 6784
                .attr('height', availableHeight2);                                                                     // 6785
            gBrush.selectAll('.resize').append('path').attr('d', resizePath);                                          // 6786
                                                                                                                       // 6787
            //============================================================                                             // 6788
            // Event Handling/Dispatching (in chart's scope)                                                           // 6789
            //------------------------------------------------------------                                             // 6790
                                                                                                                       // 6791
            legend.dispatch.on('stateChange', function(newState) {                                                     // 6792
                for (var key in newState)                                                                              // 6793
                    state[key] = newState[key];                                                                        // 6794
                dispatch.stateChange(state);                                                                           // 6795
                chart.update();                                                                                        // 6796
            });                                                                                                        // 6797
                                                                                                                       // 6798
            // Update chart from a state object passed to event handler                                                // 6799
            dispatch.on('changeState', function(e) {                                                                   // 6800
                if (typeof e.disabled !== 'undefined') {                                                               // 6801
                    data.forEach(function(series,i) {                                                                  // 6802
                        series.disabled = e.disabled[i];                                                               // 6803
                    });                                                                                                // 6804
                    state.disabled = e.disabled;                                                                       // 6805
                }                                                                                                      // 6806
                chart.update();                                                                                        // 6807
            });                                                                                                        // 6808
                                                                                                                       // 6809
            //============================================================                                             // 6810
            // Functions                                                                                               // 6811
            //------------------------------------------------------------                                             // 6812
                                                                                                                       // 6813
            // Taken from crossfilter (http://square.github.com/crossfilter/)                                          // 6814
            function resizePath(d) {                                                                                   // 6815
                var e = +(d == 'e'),                                                                                   // 6816
                    x = e ? 1 : -1,                                                                                    // 6817
                    y = availableHeight2 / 3;                                                                          // 6818
                return 'M' + (.5 * x) + ',' + y                                                                        // 6819
                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)                                                // 6820
                    + 'V' + (2 * y - 6)                                                                                // 6821
                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)                                                 // 6822
                    + 'Z'                                                                                              // 6823
                    + 'M' + (2.5 * x) + ',' + (y + 8)                                                                  // 6824
                    + 'V' + (2 * y - 8)                                                                                // 6825
                    + 'M' + (4.5 * x) + ',' + (y + 8)                                                                  // 6826
                    + 'V' + (2 * y - 8);                                                                               // 6827
            }                                                                                                          // 6828
                                                                                                                       // 6829
                                                                                                                       // 6830
            function updateBrushBG() {                                                                                 // 6831
                if (!brush.empty()) brush.extent(brushExtent);                                                         // 6832
                brushBG                                                                                                // 6833
                    .data([brush.empty() ? x2.domain() : brushExtent])                                                 // 6834
                    .each(function(d,i) {                                                                              // 6835
                        var leftWidth = x2(d[0]) - x2.range()[0],                                                      // 6836
                            rightWidth = x2.range()[1] - x2(d[1]);                                                     // 6837
                        d3.select(this).select('.left')                                                                // 6838
                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);                                            // 6839
                                                                                                                       // 6840
                        d3.select(this).select('.right')                                                               // 6841
                            .attr('x', x2(d[1]))                                                                       // 6842
                            .attr('width', rightWidth < 0 ? 0 : rightWidth);                                           // 6843
                    });                                                                                                // 6844
            }                                                                                                          // 6845
                                                                                                                       // 6846
            function onBrush() {                                                                                       // 6847
                brushExtent = brush.empty() ? null : brush.extent();                                                   // 6848
                extent = brush.empty() ? x2.domain() : brush.extent();                                                 // 6849
                dispatch.brush({extent: extent, brush: brush});                                                        // 6850
                updateBrushBG();                                                                                       // 6851
                                                                                                                       // 6852
                // Prepare Main (Focus) Bars and Lines                                                                 // 6853
                bars                                                                                                   // 6854
                    .width(availableWidth)                                                                             // 6855
                    .height(availableHeight1)                                                                          // 6856
                    .color(data.map(function(d,i) {                                                                    // 6857
                        return d.color || color(d, i);                                                                 // 6858
                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));                             // 6859
                                                                                                                       // 6860
                lines                                                                                                  // 6861
                    .width(availableWidth)                                                                             // 6862
                    .height(availableHeight1)                                                                          // 6863
                    .color(data.map(function(d,i) {                                                                    // 6864
                        return d.color || color(d, i);                                                                 // 6865
                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));                            // 6866
                                                                                                                       // 6867
                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')                                                 // 6868
                    .datum(!dataBars.length ? [{values:[]}] :                                                          // 6869
                        dataBars                                                                                       // 6870
                            .map(function(d,i) {                                                                       // 6871
                                return {                                                                               // 6872
                                    key: d.key,                                                                        // 6873
                                    values: d.values.filter(function(d,i) {                                            // 6874
                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];               // 6875
                                    })                                                                                 // 6876
                                }                                                                                      // 6877
                            })                                                                                         // 6878
                );                                                                                                     // 6879
                                                                                                                       // 6880
                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')                                               // 6881
                    .datum(allDisabled(dataLines) ? [{values:[]}] :                                                    // 6882
                           dataLines                                                                                   // 6883
                           .filter(function(dataLine) { return !dataLine.disabled; })                                  // 6884
                           .map(function(d,i) {                                                                        // 6885
                                return {                                                                               // 6886
                                    area: d.area,                                                                      // 6887
                                    fillOpacity: d.fillOpacity,                                                        // 6888
                                    key: d.key,                                                                        // 6889
                                    values: d.values.filter(function(d,i) {                                            // 6890
                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];             // 6891
                                    })                                                                                 // 6892
                                }                                                                                      // 6893
                            })                                                                                         // 6894
                );                                                                                                     // 6895
                                                                                                                       // 6896
                // Update Main (Focus) X Axis                                                                          // 6897
                if (dataBars.length) {                                                                                 // 6898
                    x = bars.xScale();                                                                                 // 6899
                } else {                                                                                               // 6900
                    x = lines.xScale();                                                                                // 6901
                }                                                                                                      // 6902
                                                                                                                       // 6903
                xAxis                                                                                                  // 6904
                    .scale(x)                                                                                          // 6905
                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                           // 6906
                    .tickSize(-availableHeight1, 0);                                                                   // 6907
                                                                                                                       // 6908
                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);                                           // 6909
                                                                                                                       // 6910
                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)                                    // 6911
                    .call(xAxis);                                                                                      // 6912
                                                                                                                       // 6913
                // Update Main (Focus) Bars and Lines                                                                  // 6914
                focusBarsWrap.transition().duration(transitionDuration).call(bars);                                    // 6915
                focusLinesWrap.transition().duration(transitionDuration).call(lines);                                  // 6916
                                                                                                                       // 6917
                // Setup and Update Main (Focus) Y Axes                                                                // 6918
                g.select('.nv-focus .nv-x.nv-axis')                                                                    // 6919
                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');                                          // 6920
                                                                                                                       // 6921
                y1Axis                                                                                                 // 6922
                    .scale(y1)                                                                                         // 6923
                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )                                          // 6924
                    .tickSize(-availableWidth, 0);                                                                     // 6925
                y2Axis                                                                                                 // 6926
                    .scale(y2)                                                                                         // 6927
                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )                                          // 6928
                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none      // 6929
                                                                                                                       // 6930
                g.select('.nv-focus .nv-y1.nv-axis')                                                                   // 6931
                    .style('opacity', dataBars.length ? 1 : 0);                                                        // 6932
                g.select('.nv-focus .nv-y2.nv-axis')                                                                   // 6933
                    .style('opacity', dataLines.length && !allDisabled(dataLines) ? 1 : 0)                             // 6934
                    .attr('transform', 'translate(' + x.range()[1] + ',0)');                                           // 6935
                                                                                                                       // 6936
                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)                         // 6937
                    .call(y1Axis);                                                                                     // 6938
                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)                         // 6939
                    .call(y2Axis);                                                                                     // 6940
            }                                                                                                          // 6941
                                                                                                                       // 6942
            onBrush();                                                                                                 // 6943
                                                                                                                       // 6944
        });                                                                                                            // 6945
                                                                                                                       // 6946
        return chart;                                                                                                  // 6947
    }                                                                                                                  // 6948
                                                                                                                       // 6949
    //============================================================                                                     // 6950
    // Event Handling/Dispatching (out of chart's scope)                                                               // 6951
    //------------------------------------------------------------                                                     // 6952
                                                                                                                       // 6953
    lines.dispatch.on('elementMouseover.tooltip', function(evt) {                                                      // 6954
        tooltip                                                                                                        // 6955
            .duration(100)                                                                                             // 6956
            .valueFormatter(function(d, i) {                                                                           // 6957
                return y2Axis.tickFormat()(d, i);                                                                      // 6958
            })                                                                                                         // 6959
            .data(evt)                                                                                                 // 6960
            .position(evt.pos)                                                                                         // 6961
            .hidden(false);                                                                                            // 6962
    });                                                                                                                // 6963
                                                                                                                       // 6964
    lines.dispatch.on('elementMouseout.tooltip', function(evt) {                                                       // 6965
        tooltip.hidden(true)                                                                                           // 6966
    });                                                                                                                // 6967
                                                                                                                       // 6968
    bars.dispatch.on('elementMouseover.tooltip', function(evt) {                                                       // 6969
        evt.value = chart.x()(evt.data);                                                                               // 6970
        evt['series'] = {                                                                                              // 6971
            value: chart.y()(evt.data),                                                                                // 6972
            color: evt.color                                                                                           // 6973
        };                                                                                                             // 6974
        tooltip                                                                                                        // 6975
            .duration(0)                                                                                               // 6976
            .valueFormatter(function(d, i) {                                                                           // 6977
                return y1Axis.tickFormat()(d, i);                                                                      // 6978
            })                                                                                                         // 6979
            .data(evt)                                                                                                 // 6980
            .hidden(false);                                                                                            // 6981
    });                                                                                                                // 6982
                                                                                                                       // 6983
    bars.dispatch.on('elementMouseout.tooltip', function(evt) {                                                        // 6984
        tooltip.hidden(true);                                                                                          // 6985
    });                                                                                                                // 6986
                                                                                                                       // 6987
    bars.dispatch.on('elementMousemove.tooltip', function(evt) {                                                       // 6988
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 6989
    });                                                                                                                // 6990
                                                                                                                       // 6991
    //============================================================                                                     // 6992
                                                                                                                       // 6993
                                                                                                                       // 6994
    //============================================================                                                     // 6995
    // Expose Public Variables                                                                                         // 6996
    //------------------------------------------------------------                                                     // 6997
                                                                                                                       // 6998
    // expose chart's sub-components                                                                                   // 6999
    chart.dispatch = dispatch;                                                                                         // 7000
    chart.legend = legend;                                                                                             // 7001
    chart.lines = lines;                                                                                               // 7002
    chart.lines2 = lines2;                                                                                             // 7003
    chart.bars = bars;                                                                                                 // 7004
    chart.bars2 = bars2;                                                                                               // 7005
    chart.xAxis = xAxis;                                                                                               // 7006
    chart.x2Axis = x2Axis;                                                                                             // 7007
    chart.y1Axis = y1Axis;                                                                                             // 7008
    chart.y2Axis = y2Axis;                                                                                             // 7009
    chart.y3Axis = y3Axis;                                                                                             // 7010
    chart.y4Axis = y4Axis;                                                                                             // 7011
    chart.tooltip = tooltip;                                                                                           // 7012
                                                                                                                       // 7013
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 7014
                                                                                                                       // 7015
    chart._options = Object.create({}, {                                                                               // 7016
        // simple options, just get/set the necessary values                                                           // 7017
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 7018
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 7019
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 7020
        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},                      // 7021
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 7022
        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},                      // 7023
        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},                      // 7024
        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},             // 7025
        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},             // 7026
        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}}, // 7027
        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},
                                                                                                                       // 7029
        // deprecated options                                                                                          // 7030
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 7031
            // deprecated after 1.7.1                                                                                  // 7032
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 7033
            tooltip.enabled(!!_);                                                                                      // 7034
        }},                                                                                                            // 7035
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 7036
            // deprecated after 1.7.1                                                                                  // 7037
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 7038
            tooltip.contentGenerator(_);                                                                               // 7039
        }},                                                                                                            // 7040
                                                                                                                       // 7041
        // options that require extra logic in the setter                                                              // 7042
        margin: {get: function(){return margin;}, set: function(_){                                                    // 7043
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 7044
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 7045
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 7046
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 7047
        }},                                                                                                            // 7048
        focusMargin: {get: function(){return margin2;}, set: function(_){                                              // 7049
            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;                                          // 7050
            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;                                        // 7051
            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;                                       // 7052
            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;                                         // 7053
        }},                                                                                                            // 7054
        duration: {get: function(){return transitionDuration;}, set: function(_){                                      // 7055
            transitionDuration = _;                                                                                    // 7056
        }},                                                                                                            // 7057
        color:  {get: function(){return color;}, set: function(_){                                                     // 7058
            color = nv.utils.getColor(_);                                                                              // 7059
            legend.color(color);                                                                                       // 7060
        }},                                                                                                            // 7061
        x: {get: function(){return getX;}, set: function(_){                                                           // 7062
            getX = _;                                                                                                  // 7063
            lines.x(_);                                                                                                // 7064
            lines2.x(_);                                                                                               // 7065
            bars.x(_);                                                                                                 // 7066
            bars2.x(_);                                                                                                // 7067
        }},                                                                                                            // 7068
        y: {get: function(){return getY;}, set: function(_){                                                           // 7069
            getY = _;                                                                                                  // 7070
            lines.y(_);                                                                                                // 7071
            lines2.y(_);                                                                                               // 7072
            bars.y(_);                                                                                                 // 7073
            bars2.y(_);                                                                                                // 7074
        }}                                                                                                             // 7075
    });                                                                                                                // 7076
                                                                                                                       // 7077
    nv.utils.inheritOptions(chart, lines);                                                                             // 7078
    nv.utils.initOptions(chart);                                                                                       // 7079
                                                                                                                       // 7080
    return chart;                                                                                                      // 7081
};                                                                                                                     // 7082
nv.models.lineWithFocusChart = function() {                                                                            // 7083
    "use strict";                                                                                                      // 7084
                                                                                                                       // 7085
    //============================================================                                                     // 7086
    // Public Variables with Default Settings                                                                          // 7087
    //------------------------------------------------------------                                                     // 7088
                                                                                                                       // 7089
    var lines = nv.models.line()                                                                                       // 7090
        , lines2 = nv.models.line()                                                                                    // 7091
        , xAxis = nv.models.axis()                                                                                     // 7092
        , yAxis = nv.models.axis()                                                                                     // 7093
        , x2Axis = nv.models.axis()                                                                                    // 7094
        , y2Axis = nv.models.axis()                                                                                    // 7095
        , legend = nv.models.legend()                                                                                  // 7096
        , brush = d3.svg.brush()                                                                                       // 7097
        , tooltip = nv.models.tooltip()                                                                                // 7098
        , interactiveLayer = nv.interactiveGuideline()                                                                 // 7099
        ;                                                                                                              // 7100
                                                                                                                       // 7101
    var margin = {top: 30, right: 30, bottom: 30, left: 60}                                                            // 7102
        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}                                                          // 7103
        , color = nv.utils.defaultColor()                                                                              // 7104
        , width = null                                                                                                 // 7105
        , height = null                                                                                                // 7106
        , height2 = 50                                                                                                 // 7107
        , useInteractiveGuideline = false                                                                              // 7108
        , x                                                                                                            // 7109
        , y                                                                                                            // 7110
        , x2                                                                                                           // 7111
        , y2                                                                                                           // 7112
        , showLegend = true                                                                                            // 7113
        , brushExtent = null                                                                                           // 7114
        , noData = null                                                                                                // 7115
        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')                                                // 7116
        , transitionDuration = 250                                                                                     // 7117
        , state = nv.utils.state()                                                                                     // 7118
        , defaultState = null                                                                                          // 7119
        ;                                                                                                              // 7120
                                                                                                                       // 7121
    lines.clipEdge(true).duration(0);                                                                                  // 7122
    lines2.interactive(false);                                                                                         // 7123
    // We don't want any points emitted for the focus chart's scatter graph.                                           // 7124
    lines2.pointActive(function(d) { return false });                                                                  // 7125
    xAxis.orient('bottom').tickPadding(5);                                                                             // 7126
    yAxis.orient('left');                                                                                              // 7127
    x2Axis.orient('bottom').tickPadding(5);                                                                            // 7128
    y2Axis.orient('left');                                                                                             // 7129
                                                                                                                       // 7130
    tooltip.valueFormatter(function(d, i) {                                                                            // 7131
        return yAxis.tickFormat()(d, i);                                                                               // 7132
    }).headerFormatter(function(d, i) {                                                                                // 7133
        return xAxis.tickFormat()(d, i);                                                                               // 7134
    });                                                                                                                // 7135
                                                                                                                       // 7136
    //============================================================                                                     // 7137
    // Private Variables                                                                                               // 7138
    //------------------------------------------------------------                                                     // 7139
                                                                                                                       // 7140
    var stateGetter = function(data) {                                                                                 // 7141
        return function(){                                                                                             // 7142
            return {                                                                                                   // 7143
                active: data.map(function(d) { return !d.disabled })                                                   // 7144
            };                                                                                                         // 7145
        }                                                                                                              // 7146
    };                                                                                                                 // 7147
                                                                                                                       // 7148
    var stateSetter = function(data) {                                                                                 // 7149
        return function(state) {                                                                                       // 7150
            if (state.active !== undefined)                                                                            // 7151
                data.forEach(function(series,i) {                                                                      // 7152
                    series.disabled = !state.active[i];                                                                // 7153
                });                                                                                                    // 7154
        }                                                                                                              // 7155
    };                                                                                                                 // 7156
                                                                                                                       // 7157
    function chart(selection) {                                                                                        // 7158
        selection.each(function(data) {                                                                                // 7159
            var container = d3.select(this),                                                                           // 7160
                that = this;                                                                                           // 7161
            nv.utils.initSVG(container);                                                                               // 7162
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 7163
                availableHeight1 = nv.utils.availableHeight(height, container, margin) - height2,                      // 7164
                availableHeight2 = height2 - margin2.top - margin2.bottom;                                             // 7165
                                                                                                                       // 7166
            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };             // 7167
            chart.container = this;                                                                                    // 7168
                                                                                                                       // 7169
            state                                                                                                      // 7170
                .setter(stateSetter(data), chart.update)                                                               // 7171
                .getter(stateGetter(data))                                                                             // 7172
                .update();                                                                                             // 7173
                                                                                                                       // 7174
            // DEPRECATED set state.disableddisabled                                                                   // 7175
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 7176
                                                                                                                       // 7177
            if (!defaultState) {                                                                                       // 7178
                var key;                                                                                               // 7179
                defaultState = {};                                                                                     // 7180
                for (key in state) {                                                                                   // 7181
                    if (state[key] instanceof Array)                                                                   // 7182
                        defaultState[key] = state[key].slice(0);                                                       // 7183
                    else                                                                                               // 7184
                        defaultState[key] = state[key];                                                                // 7185
                }                                                                                                      // 7186
            }                                                                                                          // 7187
                                                                                                                       // 7188
            // Display No Data message if there's nothing to show.                                                     // 7189
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 7190
                nv.utils.noData(chart, container)                                                                      // 7191
                return chart;                                                                                          // 7192
            } else {                                                                                                   // 7193
                container.selectAll('.nv-noData').remove();                                                            // 7194
            }                                                                                                          // 7195
                                                                                                                       // 7196
            // Setup Scales                                                                                            // 7197
            x = lines.xScale();                                                                                        // 7198
            y = lines.yScale();                                                                                        // 7199
            x2 = lines2.xScale();                                                                                      // 7200
            y2 = lines2.yScale();                                                                                      // 7201
                                                                                                                       // 7202
            // Setup containers and skeleton of chart                                                                  // 7203
            var wrap = container.selectAll('g.nv-wrap.nv-lineWithFocusChart').data([data]);                            // 7204
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineWithFocusChart').append('g');     // 7205
            var g = wrap.select('g');                                                                                  // 7206
                                                                                                                       // 7207
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 7208
                                                                                                                       // 7209
            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');                                             // 7210
            focusEnter.append('g').attr('class', 'nv-x nv-axis');                                                      // 7211
            focusEnter.append('g').attr('class', 'nv-y nv-axis');                                                      // 7212
            focusEnter.append('g').attr('class', 'nv-linesWrap');                                                      // 7213
            focusEnter.append('g').attr('class', 'nv-interactive');                                                    // 7214
                                                                                                                       // 7215
            var contextEnter = gEnter.append('g').attr('class', 'nv-context');                                         // 7216
            contextEnter.append('g').attr('class', 'nv-x nv-axis');                                                    // 7217
            contextEnter.append('g').attr('class', 'nv-y nv-axis');                                                    // 7218
            contextEnter.append('g').attr('class', 'nv-linesWrap');                                                    // 7219
            contextEnter.append('g').attr('class', 'nv-brushBackground');                                              // 7220
            contextEnter.append('g').attr('class', 'nv-x nv-brush');                                                   // 7221
                                                                                                                       // 7222
            // Legend                                                                                                  // 7223
            if (showLegend) {                                                                                          // 7224
                legend.width(availableWidth);                                                                          // 7225
                                                                                                                       // 7226
                g.select('.nv-legendWrap')                                                                             // 7227
                    .datum(data)                                                                                       // 7228
                    .call(legend);                                                                                     // 7229
                                                                                                                       // 7230
                if ( margin.top != legend.height()) {                                                                  // 7231
                    margin.top = legend.height();                                                                      // 7232
                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - height2;                  // 7233
                }                                                                                                      // 7234
                                                                                                                       // 7235
                g.select('.nv-legendWrap')                                                                             // 7236
                    .attr('transform', 'translate(0,' + (-margin.top) +')')                                            // 7237
            }                                                                                                          // 7238
                                                                                                                       // 7239
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 7240
                                                                                                                       // 7241
                                                                                                                       // 7242
            //Set up interactive layer                                                                                 // 7243
            if (useInteractiveGuideline) {                                                                             // 7244
                interactiveLayer                                                                                       // 7245
                    .width(availableWidth)                                                                             // 7246
                    .height(availableHeight1)                                                                          // 7247
                    .margin({left:margin.left, top:margin.top})                                                        // 7248
                    .svgContainer(container)                                                                           // 7249
                    .xScale(x);                                                                                        // 7250
                wrap.select(".nv-interactive").call(interactiveLayer);                                                 // 7251
            }                                                                                                          // 7252
                                                                                                                       // 7253
            // Main Chart Component(s)                                                                                 // 7254
            lines                                                                                                      // 7255
                .width(availableWidth)                                                                                 // 7256
                .height(availableHeight1)                                                                              // 7257
                .color(                                                                                                // 7258
                data                                                                                                   // 7259
                    .map(function(d,i) {                                                                               // 7260
                        return d.color || color(d, i);                                                                 // 7261
                    })                                                                                                 // 7262
                    .filter(function(d,i) {                                                                            // 7263
                        return !data[i].disabled;                                                                      // 7264
                    })                                                                                                 // 7265
            );                                                                                                         // 7266
                                                                                                                       // 7267
            lines2                                                                                                     // 7268
                .defined(lines.defined())                                                                              // 7269
                .width(availableWidth)                                                                                 // 7270
                .height(availableHeight2)                                                                              // 7271
                .color(                                                                                                // 7272
                data                                                                                                   // 7273
                    .map(function(d,i) {                                                                               // 7274
                        return d.color || color(d, i);                                                                 // 7275
                    })                                                                                                 // 7276
                    .filter(function(d,i) {                                                                            // 7277
                        return !data[i].disabled;                                                                      // 7278
                    })                                                                                                 // 7279
            );                                                                                                         // 7280
                                                                                                                       // 7281
            g.select('.nv-context')                                                                                    // 7282
                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')           // 7283
                                                                                                                       // 7284
            var contextLinesWrap = g.select('.nv-context .nv-linesWrap')                                               // 7285
                .datum(data.filter(function(d) { return !d.disabled }))                                                // 7286
                                                                                                                       // 7287
            d3.transition(contextLinesWrap).call(lines2);                                                              // 7288
                                                                                                                       // 7289
            // Setup Main (Focus) Axes                                                                                 // 7290
            xAxis                                                                                                      // 7291
                .scale(x)                                                                                              // 7292
                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                               // 7293
                .tickSize(-availableHeight1, 0);                                                                       // 7294
                                                                                                                       // 7295
            yAxis                                                                                                      // 7296
                .scale(y)                                                                                              // 7297
                ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )                                              // 7298
                .tickSize( -availableWidth, 0);                                                                        // 7299
                                                                                                                       // 7300
            g.select('.nv-focus .nv-x.nv-axis')                                                                        // 7301
                .attr('transform', 'translate(0,' + availableHeight1 + ')');                                           // 7302
                                                                                                                       // 7303
            // Setup Brush                                                                                             // 7304
            brush                                                                                                      // 7305
                .x(x2)                                                                                                 // 7306
                .on('brush', function() {                                                                              // 7307
                    onBrush();                                                                                         // 7308
                });                                                                                                    // 7309
                                                                                                                       // 7310
            if (brushExtent) brush.extent(brushExtent);                                                                // 7311
                                                                                                                       // 7312
            var brushBG = g.select('.nv-brushBackground').selectAll('g')                                               // 7313
                .data([brushExtent || brush.extent()])                                                                 // 7314
                                                                                                                       // 7315
            var brushBGenter = brushBG.enter()                                                                         // 7316
                .append('g');                                                                                          // 7317
                                                                                                                       // 7318
            brushBGenter.append('rect')                                                                                // 7319
                .attr('class', 'left')                                                                                 // 7320
                .attr('x', 0)                                                                                          // 7321
                .attr('y', 0)                                                                                          // 7322
                .attr('height', availableHeight2);                                                                     // 7323
                                                                                                                       // 7324
            brushBGenter.append('rect')                                                                                // 7325
                .attr('class', 'right')                                                                                // 7326
                .attr('x', 0)                                                                                          // 7327
                .attr('y', 0)                                                                                          // 7328
                .attr('height', availableHeight2);                                                                     // 7329
                                                                                                                       // 7330
            var gBrush = g.select('.nv-x.nv-brush')                                                                    // 7331
                .call(brush);                                                                                          // 7332
            gBrush.selectAll('rect')                                                                                   // 7333
                .attr('height', availableHeight2);                                                                     // 7334
            gBrush.selectAll('.resize').append('path').attr('d', resizePath);                                          // 7335
                                                                                                                       // 7336
            onBrush();                                                                                                 // 7337
                                                                                                                       // 7338
            // Setup Secondary (Context) Axes                                                                          // 7339
            x2Axis                                                                                                     // 7340
                .scale(x2)                                                                                             // 7341
                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                               // 7342
                .tickSize(-availableHeight2, 0);                                                                       // 7343
                                                                                                                       // 7344
            g.select('.nv-context .nv-x.nv-axis')                                                                      // 7345
                .attr('transform', 'translate(0,' + y2.range()[0] + ')');                                              // 7346
            d3.transition(g.select('.nv-context .nv-x.nv-axis'))                                                       // 7347
                .call(x2Axis);                                                                                         // 7348
                                                                                                                       // 7349
            y2Axis                                                                                                     // 7350
                .scale(y2)                                                                                             // 7351
                ._ticks( nv.utils.calcTicksY(availableHeight2/36, data) )                                              // 7352
                .tickSize( -availableWidth, 0);                                                                        // 7353
                                                                                                                       // 7354
            d3.transition(g.select('.nv-context .nv-y.nv-axis'))                                                       // 7355
                .call(y2Axis);                                                                                         // 7356
                                                                                                                       // 7357
            g.select('.nv-context .nv-x.nv-axis')                                                                      // 7358
                .attr('transform', 'translate(0,' + y2.range()[0] + ')');                                              // 7359
                                                                                                                       // 7360
            //============================================================                                             // 7361
            // Event Handling/Dispatching (in chart's scope)                                                           // 7362
            //------------------------------------------------------------                                             // 7363
                                                                                                                       // 7364
            legend.dispatch.on('stateChange', function(newState) {                                                     // 7365
                for (var key in newState)                                                                              // 7366
                    state[key] = newState[key];                                                                        // 7367
                dispatch.stateChange(state);                                                                           // 7368
                chart.update();                                                                                        // 7369
            });                                                                                                        // 7370
                                                                                                                       // 7371
            interactiveLayer.dispatch.on('elementMousemove', function(e) {                                             // 7372
                lines.clearHighlights();                                                                               // 7373
                var singlePoint, pointIndex, pointXLocation, allData = [];                                             // 7374
                data                                                                                                   // 7375
                    .filter(function(series, i) {                                                                      // 7376
                        series.seriesIndex = i;                                                                        // 7377
                        return !series.disabled;                                                                       // 7378
                    })                                                                                                 // 7379
                    .forEach(function(series,i) {                                                                      // 7380
                            var extent = brush.empty() ? x2.domain() : brush.extent();                                 // 7381
                            var currentValues = series.values.filter(function(d,i) {                                   // 7382
                            return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];                         // 7383
                        });                                                                                            // 7384
                                                                                                                       // 7385
                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());                    // 7386
                        var point = currentValues[pointIndex];                                                         // 7387
                        var pointYValue = chart.y()(point, pointIndex);                                                // 7388
                        if (pointYValue != null) {                                                                     // 7389
                            lines.highlightPoint(i, pointIndex, true);                                                 // 7390
                        }                                                                                              // 7391
                        if (point === undefined) return;                                                               // 7392
                        if (singlePoint === undefined) singlePoint = point;                                            // 7393
                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
                        allData.push({                                                                                 // 7395
                            key: series.key,                                                                           // 7396
                            value: chart.y()(point, pointIndex),                                                       // 7397
                            color: color(series,series.seriesIndex)                                                    // 7398
                        });                                                                                            // 7399
                    });                                                                                                // 7400
                //Highlight the tooltip entry based on which point the mouse is closest to.                            // 7401
                if (allData.length > 2) {                                                                              // 7402
                    var yValue = chart.yScale().invert(e.mouseY);                                                      // 7403
                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);              // 7404
                    var threshold = 0.03 * domainExtent;                                                               // 7405
                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);
                    if (indexToHighlight !== null)                                                                     // 7407
                        allData[indexToHighlight].highlight = true;                                                    // 7408
                }                                                                                                      // 7409
                                                                                                                       // 7410
                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));                                    // 7411
                interactiveLayer.tooltip                                                                               // 7412
                    .position({left: e.mouseX + margin.left, top: e.mouseY + margin.top})                              // 7413
                    .chartContainer(that.parentNode)                                                                   // 7414
                    .valueFormatter(function(d,i) {                                                                    // 7415
                        return d == null ? "N/A" : yAxis.tickFormat()(d);                                              // 7416
                    })                                                                                                 // 7417
                    .data({                                                                                            // 7418
                        value: xValue,                                                                                 // 7419
                        index: pointIndex,                                                                             // 7420
                        series: allData                                                                                // 7421
                    })();                                                                                              // 7422
                                                                                                                       // 7423
                interactiveLayer.renderGuideLine(pointXLocation);                                                      // 7424
                                                                                                                       // 7425
            });                                                                                                        // 7426
                                                                                                                       // 7427
            interactiveLayer.dispatch.on("elementMouseout",function(e) {                                               // 7428
                lines.clearHighlights();                                                                               // 7429
            });                                                                                                        // 7430
                                                                                                                       // 7431
            dispatch.on('changeState', function(e) {                                                                   // 7432
                if (typeof e.disabled !== 'undefined') {                                                               // 7433
                    data.forEach(function(series,i) {                                                                  // 7434
                        series.disabled = e.disabled[i];                                                               // 7435
                    });                                                                                                // 7436
                }                                                                                                      // 7437
                chart.update();                                                                                        // 7438
            });                                                                                                        // 7439
                                                                                                                       // 7440
            //============================================================                                             // 7441
            // Functions                                                                                               // 7442
            //------------------------------------------------------------                                             // 7443
                                                                                                                       // 7444
            // Taken from crossfilter (http://square.github.com/crossfilter/)                                          // 7445
            function resizePath(d) {                                                                                   // 7446
                var e = +(d == 'e'),                                                                                   // 7447
                    x = e ? 1 : -1,                                                                                    // 7448
                    y = availableHeight2 / 3;                                                                          // 7449
                return 'M' + (.5 * x) + ',' + y                                                                        // 7450
                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)                                                // 7451
                    + 'V' + (2 * y - 6)                                                                                // 7452
                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)                                                 // 7453
                    + 'Z'                                                                                              // 7454
                    + 'M' + (2.5 * x) + ',' + (y + 8)                                                                  // 7455
                    + 'V' + (2 * y - 8)                                                                                // 7456
                    + 'M' + (4.5 * x) + ',' + (y + 8)                                                                  // 7457
                    + 'V' + (2 * y - 8);                                                                               // 7458
            }                                                                                                          // 7459
                                                                                                                       // 7460
                                                                                                                       // 7461
            function updateBrushBG() {                                                                                 // 7462
                if (!brush.empty()) brush.extent(brushExtent);                                                         // 7463
                brushBG                                                                                                // 7464
                    .data([brush.empty() ? x2.domain() : brushExtent])                                                 // 7465
                    .each(function(d,i) {                                                                              // 7466
                        var leftWidth = x2(d[0]) - x.range()[0],                                                       // 7467
                            rightWidth = availableWidth - x2(d[1]);                                                    // 7468
                        d3.select(this).select('.left')                                                                // 7469
                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);                                            // 7470
                                                                                                                       // 7471
                        d3.select(this).select('.right')                                                               // 7472
                            .attr('x', x2(d[1]))                                                                       // 7473
                            .attr('width', rightWidth < 0 ? 0 : rightWidth);                                           // 7474
                    });                                                                                                // 7475
            }                                                                                                          // 7476
                                                                                                                       // 7477
                                                                                                                       // 7478
            function onBrush() {                                                                                       // 7479
                brushExtent = brush.empty() ? null : brush.extent();                                                   // 7480
                var extent = brush.empty() ? x2.domain() : brush.extent();                                             // 7481
                                                                                                                       // 7482
                //The brush extent cannot be less than one.  If it is, don't update the line chart.                    // 7483
                if (Math.abs(extent[0] - extent[1]) <= 1) {                                                            // 7484
                    return;                                                                                            // 7485
                }                                                                                                      // 7486
                                                                                                                       // 7487
                dispatch.brush({extent: extent, brush: brush});                                                        // 7488
                                                                                                                       // 7489
                                                                                                                       // 7490
                updateBrushBG();                                                                                       // 7491
                                                                                                                       // 7492
                // Update Main (Focus)                                                                                 // 7493
                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')                                               // 7494
                    .datum(                                                                                            // 7495
                    data                                                                                               // 7496
                        .filter(function(d) { return !d.disabled })                                                    // 7497
                        .map(function(d,i) {                                                                           // 7498
                            return {                                                                                   // 7499
                                key: d.key,                                                                            // 7500
                                area: d.area,                                                                          // 7501
                                values: d.values.filter(function(d,i) {                                                // 7502
                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];                 // 7503
                                })                                                                                     // 7504
                            }                                                                                          // 7505
                        })                                                                                             // 7506
                );                                                                                                     // 7507
                focusLinesWrap.transition().duration(transitionDuration).call(lines);                                  // 7508
                                                                                                                       // 7509
                                                                                                                       // 7510
                // Update Main (Focus) Axes                                                                            // 7511
                g.select('.nv-focus .nv-x.nv-axis').transition().duration(transitionDuration)                          // 7512
                    .call(xAxis);                                                                                      // 7513
                g.select('.nv-focus .nv-y.nv-axis').transition().duration(transitionDuration)                          // 7514
                    .call(yAxis);                                                                                      // 7515
            }                                                                                                          // 7516
        });                                                                                                            // 7517
                                                                                                                       // 7518
        return chart;                                                                                                  // 7519
    }                                                                                                                  // 7520
                                                                                                                       // 7521
    //============================================================                                                     // 7522
    // Event Handling/Dispatching (out of chart's scope)                                                               // 7523
    //------------------------------------------------------------                                                     // 7524
                                                                                                                       // 7525
    lines.dispatch.on('elementMouseover.tooltip', function(evt) {                                                      // 7526
        tooltip.data(evt).position(evt.pos).hidden(false);                                                             // 7527
    });                                                                                                                // 7528
                                                                                                                       // 7529
    lines.dispatch.on('elementMouseout.tooltip', function(evt) {                                                       // 7530
        tooltip.hidden(true)                                                                                           // 7531
    });                                                                                                                // 7532
                                                                                                                       // 7533
    //============================================================                                                     // 7534
    // Expose Public Variables                                                                                         // 7535
    //------------------------------------------------------------                                                     // 7536
                                                                                                                       // 7537
    // expose chart's sub-components                                                                                   // 7538
    chart.dispatch = dispatch;                                                                                         // 7539
    chart.legend = legend;                                                                                             // 7540
    chart.lines = lines;                                                                                               // 7541
    chart.lines2 = lines2;                                                                                             // 7542
    chart.xAxis = xAxis;                                                                                               // 7543
    chart.yAxis = yAxis;                                                                                               // 7544
    chart.x2Axis = x2Axis;                                                                                             // 7545
    chart.y2Axis = y2Axis;                                                                                             // 7546
    chart.interactiveLayer = interactiveLayer;                                                                         // 7547
    chart.tooltip = tooltip;                                                                                           // 7548
                                                                                                                       // 7549
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 7550
                                                                                                                       // 7551
    chart._options = Object.create({}, {                                                                               // 7552
        // simple options, just get/set the necessary values                                                           // 7553
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 7554
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 7555
        focusHeight:     {get: function(){return height2;}, set: function(_){height2=_;}},                             // 7556
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 7557
        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},                         // 7558
        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                   // 7559
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 7560
                                                                                                                       // 7561
        // deprecated options                                                                                          // 7562
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 7563
            // deprecated after 1.7.1                                                                                  // 7564
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 7565
            tooltip.enabled(!!_);                                                                                      // 7566
        }},                                                                                                            // 7567
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 7568
            // deprecated after 1.7.1                                                                                  // 7569
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 7570
            tooltip.contentGenerator(_);                                                                               // 7571
        }},                                                                                                            // 7572
                                                                                                                       // 7573
        // options that require extra logic in the setter                                                              // 7574
        margin: {get: function(){return margin;}, set: function(_){                                                    // 7575
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 7576
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 7577
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 7578
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 7579
        }},                                                                                                            // 7580
        focusMargin: {get: function(){return margin2;}, set: function(_){                                              // 7581
            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;                                          // 7582
            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;                                        // 7583
            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;                                       // 7584
            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;                                         // 7585
        }},                                                                                                            // 7586
        color:  {get: function(){return color;}, set: function(_){                                                     // 7587
            color = nv.utils.getColor(_);                                                                              // 7588
            legend.color(color);                                                                                       // 7589
            // line color is handled above?                                                                            // 7590
        }},                                                                                                            // 7591
        interpolate: {get: function(){return lines.interpolate();}, set: function(_){                                  // 7592
            lines.interpolate(_);                                                                                      // 7593
            lines2.interpolate(_);                                                                                     // 7594
        }},                                                                                                            // 7595
        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){                                   // 7596
            xAxis.tickFormat(_);                                                                                       // 7597
            x2Axis.tickFormat(_);                                                                                      // 7598
        }},                                                                                                            // 7599
        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){                                   // 7600
            yAxis.tickFormat(_);                                                                                       // 7601
            y2Axis.tickFormat(_);                                                                                      // 7602
        }},                                                                                                            // 7603
        duration:    {get: function(){return transitionDuration;}, set: function(_){                                   // 7604
            transitionDuration=_;                                                                                      // 7605
            yAxis.duration(transitionDuration);                                                                        // 7606
            y2Axis.duration(transitionDuration);                                                                       // 7607
            xAxis.duration(transitionDuration);                                                                        // 7608
            x2Axis.duration(transitionDuration);                                                                       // 7609
        }},                                                                                                            // 7610
        x: {get: function(){return lines.x();}, set: function(_){                                                      // 7611
            lines.x(_);                                                                                                // 7612
            lines2.x(_);                                                                                               // 7613
        }},                                                                                                            // 7614
        y: {get: function(){return lines.y();}, set: function(_){                                                      // 7615
            lines.y(_);                                                                                                // 7616
            lines2.y(_);                                                                                               // 7617
        }},                                                                                                            // 7618
        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){                  // 7619
            useInteractiveGuideline = _;                                                                               // 7620
            if (useInteractiveGuideline) {                                                                             // 7621
                lines.interactive(false);                                                                              // 7622
                lines.useVoronoi(false);                                                                               // 7623
            }                                                                                                          // 7624
        }}                                                                                                             // 7625
    });                                                                                                                // 7626
                                                                                                                       // 7627
    nv.utils.inheritOptions(chart, lines);                                                                             // 7628
    nv.utils.initOptions(chart);                                                                                       // 7629
                                                                                                                       // 7630
    return chart;                                                                                                      // 7631
};                                                                                                                     // 7632
                                                                                                                       // 7633
nv.models.multiBar = function() {                                                                                      // 7634
    "use strict";                                                                                                      // 7635
                                                                                                                       // 7636
    //============================================================                                                     // 7637
    // Public Variables with Default Settings                                                                          // 7638
    //------------------------------------------------------------                                                     // 7639
                                                                                                                       // 7640
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 7641
        , width = 960                                                                                                  // 7642
        , height = 500                                                                                                 // 7643
        , x = d3.scale.ordinal()                                                                                       // 7644
        , y = d3.scale.linear()                                                                                        // 7645
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 7646
        , container = null                                                                                             // 7647
        , getX = function(d) { return d.x }                                                                            // 7648
        , getY = function(d) { return d.y }                                                                            // 7649
        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
        , clipEdge = true                                                                                              // 7651
        , stacked = false                                                                                              // 7652
        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function       // 7653
        , color = nv.utils.defaultColor()                                                                              // 7654
        , hideable = false                                                                                             // 7655
        , barColor = null // adding the ability to set the color for each rather than the whole group                  // 7656
        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled
        , duration = 500                                                                                               // 7658
        , xDomain                                                                                                      // 7659
        , yDomain                                                                                                      // 7660
        , xRange                                                                                                       // 7661
        , yRange                                                                                                       // 7662
        , groupSpacing = 0.1                                                                                           // 7663
        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
        ;                                                                                                              // 7665
                                                                                                                       // 7666
    //============================================================                                                     // 7667
    // Private Variables                                                                                               // 7668
    //------------------------------------------------------------                                                     // 7669
                                                                                                                       // 7670
    var x0, y0 //used to store previous scales                                                                         // 7671
        , renderWatch = nv.utils.renderWatch(dispatch, duration)                                                       // 7672
        ;                                                                                                              // 7673
                                                                                                                       // 7674
    var last_datalength = 0;                                                                                           // 7675
                                                                                                                       // 7676
    function chart(selection) {                                                                                        // 7677
        renderWatch.reset();                                                                                           // 7678
        selection.each(function(data) {                                                                                // 7679
            var availableWidth = width - margin.left - margin.right,                                                   // 7680
                availableHeight = height - margin.top - margin.bottom;                                                 // 7681
                                                                                                                       // 7682
            container = d3.select(this);                                                                               // 7683
            nv.utils.initSVG(container);                                                                               // 7684
            var nonStackableCount = 0;                                                                                 // 7685
            // This function defines the requirements for render complete                                              // 7686
            var endFn = function(d, i) {                                                                               // 7687
                if (d.series === data.length - 1 && i === data[0].values.length - 1)                                   // 7688
                    return true;                                                                                       // 7689
                return false;                                                                                          // 7690
            };                                                                                                         // 7691
                                                                                                                       // 7692
            if(hideable && data.length) hideable = [{                                                                  // 7693
                values: data[0].values.map(function(d) {                                                               // 7694
                        return {                                                                                       // 7695
                            x: d.x,                                                                                    // 7696
                            y: 0,                                                                                      // 7697
                            series: d.series,                                                                          // 7698
                            size: 0.01                                                                                 // 7699
                        };}                                                                                            // 7700
                )}];                                                                                                   // 7701
                                                                                                                       // 7702
            if (stacked) {                                                                                             // 7703
                var parsed = d3.layout.stack()                                                                         // 7704
                    .offset(stackOffset)                                                                               // 7705
                    .values(function(d){ return d.values })                                                            // 7706
                    .y(getY)                                                                                           // 7707
                (!data.length && hideable ? hideable : data);                                                          // 7708
                                                                                                                       // 7709
                parsed.forEach(function(series, i){                                                                    // 7710
                    // if series is non-stackable, use un-parsed data                                                  // 7711
                    if (series.nonStackable) {                                                                         // 7712
                        data[i].nonStackableSeries = nonStackableCount++;                                              // 7713
                        parsed[i] = data[i];                                                                           // 7714
                    } else {                                                                                           // 7715
                        // don't stack this seires on top of the nonStackable seriees                                  // 7716
                        if (i > 0 && parsed[i - 1].nonStackable){                                                      // 7717
                            parsed[i].values.map(function(d,j){                                                        // 7718
                                d.y0 -= parsed[i - 1].values[j].y;                                                     // 7719
                                d.y1 = d.y0 + d.y;                                                                     // 7720
                            });                                                                                        // 7721
                        }                                                                                              // 7722
                    }                                                                                                  // 7723
                });                                                                                                    // 7724
                data = parsed;                                                                                         // 7725
            }                                                                                                          // 7726
            //add series index and key to each data point for reference                                                // 7727
            data.forEach(function(series, i) {                                                                         // 7728
                series.values.forEach(function(point) {                                                                // 7729
                    point.series = i;                                                                                  // 7730
                    point.key = series.key;                                                                            // 7731
                });                                                                                                    // 7732
            });                                                                                                        // 7733
                                                                                                                       // 7734
            // HACK for negative value stacking                                                                        // 7735
            if (stacked) {                                                                                             // 7736
                data[0].values.map(function(d,i) {                                                                     // 7737
                    var posBase = 0, negBase = 0;                                                                      // 7738
                    data.map(function(d, idx) {                                                                        // 7739
                        if (!data[idx].nonStackable) {                                                                 // 7740
                            var f = d.values[i]                                                                        // 7741
                            f.size = Math.abs(f.y);                                                                    // 7742
                            if (f.y<0)  {                                                                              // 7743
                                f.y1 = negBase;                                                                        // 7744
                                negBase = negBase - f.size;                                                            // 7745
                            } else                                                                                     // 7746
                            {                                                                                          // 7747
                                f.y1 = f.size + posBase;                                                               // 7748
                                posBase = posBase + f.size;                                                            // 7749
                            }                                                                                          // 7750
                        }                                                                                              // 7751
                                                                                                                       // 7752
                    });                                                                                                // 7753
                });                                                                                                    // 7754
            }                                                                                                          // 7755
            // Setup Scales                                                                                            // 7756
            // remap and flatten the data for use in calculating the scales' domains                                   // 7757
            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate       // 7758
                data.map(function(d, idx) {                                                                            // 7759
                    return d.values.map(function(d,i) {                                                                // 7760
                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }                             // 7761
                    })                                                                                                 // 7762
                });                                                                                                    // 7763
                                                                                                                       // 7764
            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))                                  // 7765
                .rangeBands(xRange || [0, availableWidth], groupSpacing);                                              // 7766
                                                                                                                       // 7767
            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {                                       // 7768
                var domain = d.y;                                                                                      // 7769
                // increase the domain range if this series is stackable                                               // 7770
                if (stacked && !data[d.idx].nonStackable) {                                                            // 7771
                    if (d.y > 0){                                                                                      // 7772
                        domain = d.y1                                                                                  // 7773
                    } else {                                                                                           // 7774
                        domain = d.y1 + d.y                                                                            // 7775
                    }                                                                                                  // 7776
                }                                                                                                      // 7777
                return domain;                                                                                         // 7778
            }).concat(forceY)))                                                                                        // 7779
            .range(yRange || [availableHeight, 0]);                                                                    // 7780
                                                                                                                       // 7781
            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
            if (x.domain()[0] === x.domain()[1])                                                                       // 7783
                x.domain()[0] ?                                                                                        // 7784
                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])             // 7785
                    : x.domain([-1,1]);                                                                                // 7786
                                                                                                                       // 7787
            if (y.domain()[0] === y.domain()[1])                                                                       // 7788
                y.domain()[0] ?                                                                                        // 7789
                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])             // 7790
                    : y.domain([-1,1]);                                                                                // 7791
                                                                                                                       // 7792
            x0 = x0 || x;                                                                                              // 7793
            y0 = y0 || y;                                                                                              // 7794
                                                                                                                       // 7795
            // Setup containers and skeleton of chart                                                                  // 7796
            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);                                      // 7797
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');                        // 7798
            var defsEnter = wrapEnter.append('defs');                                                                  // 7799
            var gEnter = wrapEnter.append('g');                                                                        // 7800
            var g = wrap.select('g');                                                                                  // 7801
                                                                                                                       // 7802
            gEnter.append('g').attr('class', 'nv-groups');                                                             // 7803
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 7804
                                                                                                                       // 7805
            defsEnter.append('clipPath')                                                                               // 7806
                .attr('id', 'nv-edge-clip-' + id)                                                                      // 7807
                .append('rect');                                                                                       // 7808
            wrap.select('#nv-edge-clip-' + id + ' rect')                                                               // 7809
                .attr('width', availableWidth)                                                                         // 7810
                .attr('height', availableHeight);                                                                      // 7811
                                                                                                                       // 7812
            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');                                      // 7813
                                                                                                                       // 7814
            var groups = wrap.select('.nv-groups').selectAll('.nv-group')                                              // 7815
                .data(function(d) { return d }, function(d,i) { return i });                                           // 7816
            groups.enter().append('g')                                                                                 // 7817
                .style('stroke-opacity', 1e-6)                                                                         // 7818
                .style('fill-opacity', 1e-6);                                                                          // 7819
                                                                                                                       // 7820
            var exitTransition = renderWatch                                                                           // 7821
                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))           // 7822
                .attr('y', function(d, i, j) {                                                                         // 7823
                    var yVal = y0(0) || 0;                                                                             // 7824
                    if (stacked) {                                                                                     // 7825
                        if (data[d.series] && !data[d.series].nonStackable) {                                          // 7826
                            yVal = y0(d.y0);                                                                           // 7827
                        }                                                                                              // 7828
                    }                                                                                                  // 7829
                    return yVal;                                                                                       // 7830
                })                                                                                                     // 7831
                .attr('height', 0)                                                                                     // 7832
                .remove();                                                                                             // 7833
            if (exitTransition.delay)                                                                                  // 7834
                exitTransition.delay(function(d,i) {                                                                   // 7835
                    var delay = i * (duration / (last_datalength + 1)) - i;                                            // 7836
                    return delay;                                                                                      // 7837
                });                                                                                                    // 7838
            groups                                                                                                     // 7839
                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })                                     // 7840
                .classed('hover', function(d) { return d.hover })                                                      // 7841
                .style('fill', function(d,i){ return color(d, i) })                                                    // 7842
                .style('stroke', function(d,i){ return color(d, i) });                                                 // 7843
            groups                                                                                                     // 7844
                .style('stroke-opacity', 1)                                                                            // 7845
                .style('fill-opacity', 0.75);                                                                          // 7846
                                                                                                                       // 7847
            var bars = groups.selectAll('rect.nv-bar')                                                                 // 7848
                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });                 // 7849
            bars.exit().remove();                                                                                      // 7850
                                                                                                                       // 7851
            var barsEnter = bars.enter().append('rect')                                                                // 7852
                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})      // 7853
                    .attr('x', function(d,i,j) {                                                                       // 7854
                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )               // 7855
                    })                                                                                                 // 7856
                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })        // 7857
                    .attr('height', 0)                                                                                 // 7858
                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })
                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })                  // 7860
                ;                                                                                                      // 7861
            bars                                                                                                       // 7862
                .style('fill', function(d,i,j){ return color(d, j, i);  })                                             // 7863
                .style('stroke', function(d,i,j){ return color(d, j, i); })                                            // 7864
                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here                    // 7865
                    d3.select(this).classed('hover', true);                                                            // 7866
                    dispatch.elementMouseover({                                                                        // 7867
                        data: d,                                                                                       // 7868
                        index: i,                                                                                      // 7869
                        color: d3.select(this).style("fill")                                                           // 7870
                    });                                                                                                // 7871
                })                                                                                                     // 7872
                .on('mouseout', function(d,i) {                                                                        // 7873
                    d3.select(this).classed('hover', false);                                                           // 7874
                    dispatch.elementMouseout({                                                                         // 7875
                        data: d,                                                                                       // 7876
                        index: i,                                                                                      // 7877
                        color: d3.select(this).style("fill")                                                           // 7878
                    });                                                                                                // 7879
                })                                                                                                     // 7880
                .on('mousemove', function(d,i) {                                                                       // 7881
                    dispatch.elementMousemove({                                                                        // 7882
                        data: d,                                                                                       // 7883
                        index: i,                                                                                      // 7884
                        color: d3.select(this).style("fill")                                                           // 7885
                    });                                                                                                // 7886
                })                                                                                                     // 7887
                .on('click', function(d,i) {                                                                           // 7888
                    dispatch.elementClick({                                                                            // 7889
                        data: d,                                                                                       // 7890
                        index: i,                                                                                      // 7891
                        color: d3.select(this).style("fill")                                                           // 7892
                    });                                                                                                // 7893
                    d3.event.stopPropagation();                                                                        // 7894
                })                                                                                                     // 7895
                .on('dblclick', function(d,i) {                                                                        // 7896
                    dispatch.elementDblClick({                                                                         // 7897
                        data: d,                                                                                       // 7898
                        index: i,                                                                                      // 7899
                        color: d3.select(this).style("fill")                                                           // 7900
                    });                                                                                                // 7901
                    d3.event.stopPropagation();                                                                        // 7902
                });                                                                                                    // 7903
            bars                                                                                                       // 7904
                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})          // 7905
                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })                      // 7906
                                                                                                                       // 7907
            if (barColor) {                                                                                            // 7908
                if (!disabled) disabled = data.map(function() { return true });                                        // 7909
                bars                                                                                                   // 7910
                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })
                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });
            }                                                                                                          // 7913
                                                                                                                       // 7914
            var barSelection =                                                                                         // 7915
                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))                                 // 7916
                    .delay(function(d,i) {                                                                             // 7917
                        return i * duration / data[0].values.length;                                                   // 7918
                    });                                                                                                // 7919
            if (stacked){                                                                                              // 7920
                barSelection                                                                                           // 7921
                    .attr('y', function(d,i,j) {                                                                       // 7922
                        var yVal = 0;                                                                                  // 7923
                        // if stackable, stack it on top of the previous series                                        // 7924
                        if (!data[j].nonStackable) {                                                                   // 7925
                            yVal = y(d.y1);                                                                            // 7926
                        } else {                                                                                       // 7927
                            if (getY(d,i) < 0){                                                                        // 7928
                                yVal = y(0);                                                                           // 7929
                            } else {                                                                                   // 7930
                                if (y(0) - y(getY(d,i)) < -1){                                                         // 7931
                                    yVal = y(0) - 1;                                                                   // 7932
                                } else {                                                                               // 7933
                                    yVal = y(getY(d, i)) || 0;                                                         // 7934
                                }                                                                                      // 7935
                            }                                                                                          // 7936
                        }                                                                                              // 7937
                        return yVal;                                                                                   // 7938
                    })                                                                                                 // 7939
                    .attr('height', function(d,i,j) {                                                                  // 7940
                        if (!data[j].nonStackable) {                                                                   // 7941
                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 1);                                       // 7942
                        } else {                                                                                       // 7943
                            return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;                                     // 7944
                        }                                                                                              // 7945
                    })                                                                                                 // 7946
                    .attr('x', function(d,i,j) {                                                                       // 7947
                        var width = 0;                                                                                 // 7948
                        if (data[j].nonStackable) {                                                                    // 7949
                            width = d.series * x.rangeBand() / data.length;                                            // 7950
                            if (data.length !== nonStackableCount){                                                    // 7951
                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);              // 7952
                            }                                                                                          // 7953
                        }                                                                                              // 7954
                        return width;                                                                                  // 7955
                    })                                                                                                 // 7956
                    .attr('width', function(d,i,j){                                                                    // 7957
                        if (!data[j].nonStackable) {                                                                   // 7958
                            return x.rangeBand();                                                                      // 7959
                        } else {                                                                                       // 7960
                            // if all series are nonStacable, take the full width                                      // 7961
                            var width = (x.rangeBand() / nonStackableCount);                                           // 7962
                            // otherwise, nonStackable graph will be only taking the half-width                        // 7963
                            // of the x rangeBand                                                                      // 7964
                            if (data.length !== nonStackableCount) {                                                   // 7965
                                width = x.rangeBand()/(nonStackableCount*2);                                           // 7966
                            }                                                                                          // 7967
                            return width;                                                                              // 7968
                        }                                                                                              // 7969
                    });                                                                                                // 7970
            }                                                                                                          // 7971
            else {                                                                                                     // 7972
                barSelection                                                                                           // 7973
                    .attr('x', function(d,i) {                                                                         // 7974
                        return d.series * x.rangeBand() / data.length;                                                 // 7975
                    })                                                                                                 // 7976
                    .attr('width', x.rangeBand() / data.length)                                                        // 7977
                    .attr('y', function(d,i) {                                                                         // 7978
                        return getY(d,i) < 0 ?                                                                         // 7979
                            y(0) :                                                                                     // 7980
                                y(0) - y(getY(d,i)) < 1 ?                                                              // 7981
                            y(0) - 1 :                                                                                 // 7982
                            y(getY(d,i)) || 0;                                                                         // 7983
                    })                                                                                                 // 7984
                    .attr('height', function(d,i) {                                                                    // 7985
                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;                                         // 7986
                    });                                                                                                // 7987
            }                                                                                                          // 7988
                                                                                                                       // 7989
            //store old scales for use in transitions on update                                                        // 7990
            x0 = x.copy();                                                                                             // 7991
            y0 = y.copy();                                                                                             // 7992
                                                                                                                       // 7993
            // keep track of the last data value length for transition calculations                                    // 7994
            if (data[0] && data[0].values) {                                                                           // 7995
                last_datalength = data[0].values.length;                                                               // 7996
            }                                                                                                          // 7997
                                                                                                                       // 7998
        });                                                                                                            // 7999
                                                                                                                       // 8000
        renderWatch.renderEnd('multibar immediate');                                                                   // 8001
                                                                                                                       // 8002
        return chart;                                                                                                  // 8003
    }                                                                                                                  // 8004
                                                                                                                       // 8005
    //============================================================                                                     // 8006
    // Expose Public Variables                                                                                         // 8007
    //------------------------------------------------------------                                                     // 8008
                                                                                                                       // 8009
    chart.dispatch = dispatch;                                                                                         // 8010
                                                                                                                       // 8011
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 8012
                                                                                                                       // 8013
    chart._options = Object.create({}, {                                                                               // 8014
        // simple options, just get/set the necessary values                                                           // 8015
        width:   {get: function(){return width;}, set: function(_){width=_;}},                                         // 8016
        height:  {get: function(){return height;}, set: function(_){height=_;}},                                       // 8017
        x:       {get: function(){return getX;}, set: function(_){getX=_;}},                                           // 8018
        y:       {get: function(){return getY;}, set: function(_){getY=_;}},                                           // 8019
        xScale:  {get: function(){return x;}, set: function(_){x=_;}},                                                 // 8020
        yScale:  {get: function(){return y;}, set: function(_){y=_;}},                                                 // 8021
        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                     // 8022
        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                     // 8023
        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},                                       // 8024
        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},                                       // 8025
        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},                                       // 8026
        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},                                     // 8027
        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},                         // 8028
        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},                               // 8029
        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},                               // 8030
        id:          {get: function(){return id;}, set: function(_){id=_;}},                                           // 8031
        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},                               // 8032
        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},                       // 8033
                                                                                                                       // 8034
        // options that require extra logic in the setter                                                              // 8035
        margin: {get: function(){return margin;}, set: function(_){                                                    // 8036
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 8037
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 8038
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 8039
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 8040
        }},                                                                                                            // 8041
        duration: {get: function(){return duration;}, set: function(_){                                                // 8042
            duration = _;                                                                                              // 8043
            renderWatch.reset(duration);                                                                               // 8044
        }},                                                                                                            // 8045
        color:  {get: function(){return color;}, set: function(_){                                                     // 8046
            color = nv.utils.getColor(_);                                                                              // 8047
        }},                                                                                                            // 8048
        barColor:  {get: function(){return barColor;}, set: function(_){                                               // 8049
            barColor = _ ? nv.utils.getColor(_) : null;                                                                // 8050
        }}                                                                                                             // 8051
    });                                                                                                                // 8052
                                                                                                                       // 8053
    nv.utils.initOptions(chart);                                                                                       // 8054
                                                                                                                       // 8055
    return chart;                                                                                                      // 8056
};                                                                                                                     // 8057
nv.models.multiBarChart = function() {                                                                                 // 8058
    "use strict";                                                                                                      // 8059
                                                                                                                       // 8060
    //============================================================                                                     // 8061
    // Public Variables with Default Settings                                                                          // 8062
    //------------------------------------------------------------                                                     // 8063
                                                                                                                       // 8064
    var multibar = nv.models.multiBar()                                                                                // 8065
        , xAxis = nv.models.axis()                                                                                     // 8066
        , yAxis = nv.models.axis()                                                                                     // 8067
        , legend = nv.models.legend()                                                                                  // 8068
        , controls = nv.models.legend()                                                                                // 8069
        , tooltip = nv.models.tooltip()                                                                                // 8070
        ;                                                                                                              // 8071
                                                                                                                       // 8072
    var margin = {top: 30, right: 20, bottom: 50, left: 60}                                                            // 8073
        , width = null                                                                                                 // 8074
        , height = null                                                                                                // 8075
        , color = nv.utils.defaultColor()                                                                              // 8076
        , showControls = true                                                                                          // 8077
        , controlLabels = {}                                                                                           // 8078
        , showLegend = true                                                                                            // 8079
        , showXAxis = true                                                                                             // 8080
        , showYAxis = true                                                                                             // 8081
        , rightAlignYAxis = false                                                                                      // 8082
        , reduceXTicks = true // if false a tick will show for every data point                                        // 8083
        , staggerLabels = false                                                                                        // 8084
        , rotateLabels = 0                                                                                             // 8085
        , x //can be accessed via chart.xScale()                                                                       // 8086
        , y //can be accessed via chart.yScale()                                                                       // 8087
        , state = nv.utils.state()                                                                                     // 8088
        , defaultState = null                                                                                          // 8089
        , noData = null                                                                                                // 8090
        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')                                            // 8091
        , controlWidth = function() { return showControls ? 180 : 0 }                                                  // 8092
        , duration = 250                                                                                               // 8093
        ;                                                                                                              // 8094
                                                                                                                       // 8095
    state.stacked = false // DEPRECATED Maintained for backward compatibility                                          // 8096
                                                                                                                       // 8097
    multibar.stacked(false);                                                                                           // 8098
    xAxis                                                                                                              // 8099
        .orient('bottom')                                                                                              // 8100
        .tickPadding(7)                                                                                                // 8101
        .showMaxMin(false)                                                                                             // 8102
        .tickFormat(function(d) { return d })                                                                          // 8103
    ;                                                                                                                  // 8104
    yAxis                                                                                                              // 8105
        .orient((rightAlignYAxis) ? 'right' : 'left')                                                                  // 8106
        .tickFormat(d3.format(',.1f'))                                                                                 // 8107
    ;                                                                                                                  // 8108
                                                                                                                       // 8109
    tooltip                                                                                                            // 8110
        .duration(0)                                                                                                   // 8111
        .valueFormatter(function(d, i) {                                                                               // 8112
            return yAxis.tickFormat()(d, i);                                                                           // 8113
        })                                                                                                             // 8114
        .headerFormatter(function(d, i) {                                                                              // 8115
            return xAxis.tickFormat()(d, i);                                                                           // 8116
        });                                                                                                            // 8117
                                                                                                                       // 8118
    controls.updateState(false);                                                                                       // 8119
                                                                                                                       // 8120
    //============================================================                                                     // 8121
    // Private Variables                                                                                               // 8122
    //------------------------------------------------------------                                                     // 8123
                                                                                                                       // 8124
    var renderWatch = nv.utils.renderWatch(dispatch);                                                                  // 8125
    var stacked = false;                                                                                               // 8126
                                                                                                                       // 8127
    var stateGetter = function(data) {                                                                                 // 8128
        return function(){                                                                                             // 8129
            return {                                                                                                   // 8130
                active: data.map(function(d) { return !d.disabled }),                                                  // 8131
                stacked: stacked                                                                                       // 8132
            };                                                                                                         // 8133
        }                                                                                                              // 8134
    };                                                                                                                 // 8135
                                                                                                                       // 8136
    var stateSetter = function(data) {                                                                                 // 8137
        return function(state) {                                                                                       // 8138
            if (state.stacked !== undefined)                                                                           // 8139
                stacked = state.stacked;                                                                               // 8140
            if (state.active !== undefined)                                                                            // 8141
                data.forEach(function(series,i) {                                                                      // 8142
                    series.disabled = !state.active[i];                                                                // 8143
                });                                                                                                    // 8144
        }                                                                                                              // 8145
    };                                                                                                                 // 8146
                                                                                                                       // 8147
    function chart(selection) {                                                                                        // 8148
        renderWatch.reset();                                                                                           // 8149
        renderWatch.models(multibar);                                                                                  // 8150
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 8151
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 8152
                                                                                                                       // 8153
        selection.each(function(data) {                                                                                // 8154
            var container = d3.select(this),                                                                           // 8155
                that = this;                                                                                           // 8156
            nv.utils.initSVG(container);                                                                               // 8157
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 8158
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 8159
                                                                                                                       // 8160
            chart.update = function() {                                                                                // 8161
                if (duration === 0)                                                                                    // 8162
                    container.call(chart);                                                                             // 8163
                else                                                                                                   // 8164
                    container.transition()                                                                             // 8165
                        .duration(duration)                                                                            // 8166
                        .call(chart);                                                                                  // 8167
            };                                                                                                         // 8168
            chart.container = this;                                                                                    // 8169
                                                                                                                       // 8170
            state                                                                                                      // 8171
                .setter(stateSetter(data), chart.update)                                                               // 8172
                .getter(stateGetter(data))                                                                             // 8173
                .update();                                                                                             // 8174
                                                                                                                       // 8175
            // DEPRECATED set state.disableddisabled                                                                   // 8176
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 8177
                                                                                                                       // 8178
            if (!defaultState) {                                                                                       // 8179
                var key;                                                                                               // 8180
                defaultState = {};                                                                                     // 8181
                for (key in state) {                                                                                   // 8182
                    if (state[key] instanceof Array)                                                                   // 8183
                        defaultState[key] = state[key].slice(0);                                                       // 8184
                    else                                                                                               // 8185
                        defaultState[key] = state[key];                                                                // 8186
                }                                                                                                      // 8187
            }                                                                                                          // 8188
                                                                                                                       // 8189
            // Display noData message if there's nothing to show.                                                      // 8190
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 8191
                nv.utils.noData(chart, container)                                                                      // 8192
                return chart;                                                                                          // 8193
            } else {                                                                                                   // 8194
                container.selectAll('.nv-noData').remove();                                                            // 8195
            }                                                                                                          // 8196
                                                                                                                       // 8197
            // Setup Scales                                                                                            // 8198
            x = multibar.xScale();                                                                                     // 8199
            y = multibar.yScale();                                                                                     // 8200
                                                                                                                       // 8201
            // Setup containers and skeleton of chart                                                                  // 8202
            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);                            // 8203
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');     // 8204
            var g = wrap.select('g');                                                                                  // 8205
                                                                                                                       // 8206
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 8207
            gEnter.append('g').attr('class', 'nv-y nv-axis');                                                          // 8208
            gEnter.append('g').attr('class', 'nv-barsWrap');                                                           // 8209
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 8210
            gEnter.append('g').attr('class', 'nv-controlsWrap');                                                       // 8211
                                                                                                                       // 8212
            // Legend                                                                                                  // 8213
            if (showLegend) {                                                                                          // 8214
                legend.width(availableWidth - controlWidth());                                                         // 8215
                                                                                                                       // 8216
                g.select('.nv-legendWrap')                                                                             // 8217
                    .datum(data)                                                                                       // 8218
                    .call(legend);                                                                                     // 8219
                                                                                                                       // 8220
                if ( margin.top != legend.height()) {                                                                  // 8221
                    margin.top = legend.height();                                                                      // 8222
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 8223
                }                                                                                                      // 8224
                                                                                                                       // 8225
                g.select('.nv-legendWrap')                                                                             // 8226
                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');                      // 8227
            }                                                                                                          // 8228
                                                                                                                       // 8229
            // Controls                                                                                                // 8230
            if (showControls) {                                                                                        // 8231
                var controlsData = [                                                                                   // 8232
                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },                         // 8233
                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }                         // 8234
                ];                                                                                                     // 8235
                                                                                                                       // 8236
                controls.width(controlWidth()).color(['#444', '#444', '#444']);                                        // 8237
                g.select('.nv-controlsWrap')                                                                           // 8238
                    .datum(controlsData)                                                                               // 8239
                    .attr('transform', 'translate(0,' + (-margin.top) +')')                                            // 8240
                    .call(controls);                                                                                   // 8241
            }                                                                                                          // 8242
                                                                                                                       // 8243
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 8244
            if (rightAlignYAxis) {                                                                                     // 8245
                g.select(".nv-y.nv-axis")                                                                              // 8246
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 8247
            }                                                                                                          // 8248
                                                                                                                       // 8249
            // Main Chart Component(s)                                                                                 // 8250
            multibar                                                                                                   // 8251
                .disabled(data.map(function(series) { return series.disabled }))                                       // 8252
                .width(availableWidth)                                                                                 // 8253
                .height(availableHeight)                                                                               // 8254
                .color(data.map(function(d,i) {                                                                        // 8255
                    return d.color || color(d, i);                                                                     // 8256
                }).filter(function(d,i) { return !data[i].disabled }));                                                // 8257
                                                                                                                       // 8258
                                                                                                                       // 8259
            var barsWrap = g.select('.nv-barsWrap')                                                                    // 8260
                .datum(data.filter(function(d) { return !d.disabled }));                                               // 8261
                                                                                                                       // 8262
            barsWrap.call(multibar);                                                                                   // 8263
                                                                                                                       // 8264
            // Setup Axes                                                                                              // 8265
            if (showXAxis) {                                                                                           // 8266
                xAxis                                                                                                  // 8267
                    .scale(x)                                                                                          // 8268
                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                           // 8269
                    .tickSize(-availableHeight, 0);                                                                    // 8270
                                                                                                                       // 8271
                g.select('.nv-x.nv-axis')                                                                              // 8272
                    .attr('transform', 'translate(0,' + y.range()[0] + ')');                                           // 8273
                g.select('.nv-x.nv-axis')                                                                              // 8274
                    .call(xAxis);                                                                                      // 8275
                                                                                                                       // 8276
                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');                                             // 8277
                                                                                                                       // 8278
                xTicks                                                                                                 // 8279
                    .selectAll('line, text')                                                                           // 8280
                    .style('opacity', 1)                                                                               // 8281
                                                                                                                       // 8282
                if (staggerLabels) {                                                                                   // 8283
                    var getTranslate = function(x,y) {                                                                 // 8284
                        return "translate(" + x + "," + y + ")";                                                       // 8285
                    };                                                                                                 // 8286
                                                                                                                       // 8287
                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by                                       // 8288
                    // Issue #140                                                                                      // 8289
                    xTicks                                                                                             // 8290
                        .selectAll("text")                                                                             // 8291
                        .attr('transform', function(d,i,j) {                                                           // 8292
                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));                           // 8293
                        });                                                                                            // 8294
                                                                                                                       // 8295
                    var totalInBetweenTicks = d3.selectAll(".nv-x.nv-axis .nv-wrap g g text")[0].length;               // 8296
                    g.selectAll(".nv-x.nv-axis .nv-axisMaxMin text")                                                   // 8297
                        .attr("transform", function(d,i) {                                                             // 8298
                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);
                        });                                                                                            // 8300
                }                                                                                                      // 8301
                                                                                                                       // 8302
                if (reduceXTicks)                                                                                      // 8303
                    xTicks                                                                                             // 8304
                        .filter(function(d,i) {                                                                        // 8305
                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;                // 8306
                        })                                                                                             // 8307
                        .selectAll('text, line')                                                                       // 8308
                        .style('opacity', 0);                                                                          // 8309
                                                                                                                       // 8310
                if(rotateLabels)                                                                                       // 8311
                    xTicks                                                                                             // 8312
                        .selectAll('.tick text')                                                                       // 8313
                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')                                         // 8314
                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');                                     // 8315
                                                                                                                       // 8316
                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')                                            // 8317
                    .style('opacity', 1);                                                                              // 8318
            }                                                                                                          // 8319
                                                                                                                       // 8320
            if (showYAxis) {                                                                                           // 8321
                yAxis                                                                                                  // 8322
                    .scale(y)                                                                                          // 8323
                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )                                           // 8324
                    .tickSize( -availableWidth, 0);                                                                    // 8325
                                                                                                                       // 8326
                g.select('.nv-y.nv-axis')                                                                              // 8327
                    .call(yAxis);                                                                                      // 8328
            }                                                                                                          // 8329
                                                                                                                       // 8330
            //============================================================                                             // 8331
            // Event Handling/Dispatching (in chart's scope)                                                           // 8332
            //------------------------------------------------------------                                             // 8333
                                                                                                                       // 8334
            legend.dispatch.on('stateChange', function(newState) {                                                     // 8335
                for (var key in newState)                                                                              // 8336
                    state[key] = newState[key];                                                                        // 8337
                dispatch.stateChange(state);                                                                           // 8338
                chart.update();                                                                                        // 8339
            });                                                                                                        // 8340
                                                                                                                       // 8341
            controls.dispatch.on('legendClick', function(d,i) {                                                        // 8342
                if (!d.disabled) return;                                                                               // 8343
                controlsData = controlsData.map(function(s) {                                                          // 8344
                    s.disabled = true;                                                                                 // 8345
                    return s;                                                                                          // 8346
                });                                                                                                    // 8347
                d.disabled = false;                                                                                    // 8348
                                                                                                                       // 8349
                switch (d.key) {                                                                                       // 8350
                    case 'Grouped':                                                                                    // 8351
                    case controlLabels.grouped:                                                                        // 8352
                        multibar.stacked(false);                                                                       // 8353
                        break;                                                                                         // 8354
                    case 'Stacked':                                                                                    // 8355
                    case controlLabels.stacked:                                                                        // 8356
                        multibar.stacked(true);                                                                        // 8357
                        break;                                                                                         // 8358
                }                                                                                                      // 8359
                                                                                                                       // 8360
                state.stacked = multibar.stacked();                                                                    // 8361
                dispatch.stateChange(state);                                                                           // 8362
                chart.update();                                                                                        // 8363
            });                                                                                                        // 8364
                                                                                                                       // 8365
            // Update chart from a state object passed to event handler                                                // 8366
            dispatch.on('changeState', function(e) {                                                                   // 8367
                if (typeof e.disabled !== 'undefined') {                                                               // 8368
                    data.forEach(function(series,i) {                                                                  // 8369
                        series.disabled = e.disabled[i];                                                               // 8370
                    });                                                                                                // 8371
                    state.disabled = e.disabled;                                                                       // 8372
                }                                                                                                      // 8373
                if (typeof e.stacked !== 'undefined') {                                                                // 8374
                    multibar.stacked(e.stacked);                                                                       // 8375
                    state.stacked = e.stacked;                                                                         // 8376
                    stacked = e.stacked;                                                                               // 8377
                }                                                                                                      // 8378
                chart.update();                                                                                        // 8379
            });                                                                                                        // 8380
        });                                                                                                            // 8381
                                                                                                                       // 8382
        renderWatch.renderEnd('multibarchart immediate');                                                              // 8383
        return chart;                                                                                                  // 8384
    }                                                                                                                  // 8385
                                                                                                                       // 8386
    //============================================================                                                     // 8387
    // Event Handling/Dispatching (out of chart's scope)                                                               // 8388
    //------------------------------------------------------------                                                     // 8389
                                                                                                                       // 8390
    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {                                                   // 8391
        evt.value = chart.x()(evt.data);                                                                               // 8392
        evt['series'] = {                                                                                              // 8393
            key: evt.data.key,                                                                                         // 8394
            value: chart.y()(evt.data),                                                                                // 8395
            color: evt.color                                                                                           // 8396
        };                                                                                                             // 8397
        tooltip.data(evt).hidden(false);                                                                               // 8398
    });                                                                                                                // 8399
                                                                                                                       // 8400
    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {                                                    // 8401
        tooltip.hidden(true);                                                                                          // 8402
    });                                                                                                                // 8403
                                                                                                                       // 8404
    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {                                                   // 8405
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 8406
    });                                                                                                                // 8407
                                                                                                                       // 8408
    //============================================================                                                     // 8409
    // Expose Public Variables                                                                                         // 8410
    //------------------------------------------------------------                                                     // 8411
                                                                                                                       // 8412
    // expose chart's sub-components                                                                                   // 8413
    chart.dispatch = dispatch;                                                                                         // 8414
    chart.multibar = multibar;                                                                                         // 8415
    chart.legend = legend;                                                                                             // 8416
    chart.controls = controls;                                                                                         // 8417
    chart.xAxis = xAxis;                                                                                               // 8418
    chart.yAxis = yAxis;                                                                                               // 8419
    chart.state = state;                                                                                               // 8420
    chart.tooltip = tooltip;                                                                                           // 8421
                                                                                                                       // 8422
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 8423
                                                                                                                       // 8424
    chart._options = Object.create({}, {                                                                               // 8425
        // simple options, just get/set the necessary values                                                           // 8426
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 8427
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 8428
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 8429
        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},                      // 8430
        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},                   // 8431
        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                          // 8432
        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                            // 8433
        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                   // 8434
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 8435
        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},                   // 8436
        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},                   // 8437
        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},                // 8438
                                                                                                                       // 8439
        // deprecated options                                                                                          // 8440
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 8441
            // deprecated after 1.7.1                                                                                  // 8442
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 8443
            tooltip.enabled(!!_);                                                                                      // 8444
        }},                                                                                                            // 8445
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 8446
            // deprecated after 1.7.1                                                                                  // 8447
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 8448
            tooltip.contentGenerator(_);                                                                               // 8449
        }},                                                                                                            // 8450
                                                                                                                       // 8451
        // options that require extra logic in the setter                                                              // 8452
        margin: {get: function(){return margin;}, set: function(_){                                                    // 8453
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 8454
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 8455
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 8456
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 8457
        }},                                                                                                            // 8458
        duration: {get: function(){return duration;}, set: function(_){                                                // 8459
            duration = _;                                                                                              // 8460
            multibar.duration(duration);                                                                               // 8461
            xAxis.duration(duration);                                                                                  // 8462
            yAxis.duration(duration);                                                                                  // 8463
            renderWatch.reset(duration);                                                                               // 8464
        }},                                                                                                            // 8465
        color:  {get: function(){return color;}, set: function(_){                                                     // 8466
            color = nv.utils.getColor(_);                                                                              // 8467
            legend.color(color);                                                                                       // 8468
        }},                                                                                                            // 8469
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 8470
            rightAlignYAxis = _;                                                                                       // 8471
            yAxis.orient( rightAlignYAxis ? 'right' : 'left');                                                         // 8472
        }},                                                                                                            // 8473
        barColor:  {get: function(){return multibar.barColor;}, set: function(_){                                      // 8474
            multibar.barColor(_);                                                                                      // 8475
            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})                            // 8476
        }}                                                                                                             // 8477
    });                                                                                                                // 8478
                                                                                                                       // 8479
    nv.utils.inheritOptions(chart, multibar);                                                                          // 8480
    nv.utils.initOptions(chart);                                                                                       // 8481
                                                                                                                       // 8482
    return chart;                                                                                                      // 8483
};                                                                                                                     // 8484
                                                                                                                       // 8485
nv.models.multiBarHorizontal = function() {                                                                            // 8486
    "use strict";                                                                                                      // 8487
                                                                                                                       // 8488
    //============================================================                                                     // 8489
    // Public Variables with Default Settings                                                                          // 8490
    //------------------------------------------------------------                                                     // 8491
                                                                                                                       // 8492
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 8493
        , width = 960                                                                                                  // 8494
        , height = 500                                                                                                 // 8495
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 8496
        , container = null                                                                                             // 8497
        , x = d3.scale.ordinal()                                                                                       // 8498
        , y = d3.scale.linear()                                                                                        // 8499
        , getX = function(d) { return d.x }                                                                            // 8500
        , getY = function(d) { return d.y }                                                                            // 8501
        , getYerr = function(d) { return d.yErr }                                                                      // 8502
        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
        , color = nv.utils.defaultColor()                                                                              // 8504
        , barColor = null // adding the ability to set the color for each rather than the whole group                  // 8505
        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled
        , stacked = false                                                                                              // 8507
        , showValues = false                                                                                           // 8508
        , showBarLabels = false                                                                                        // 8509
        , valuePadding = 60                                                                                            // 8510
        , groupSpacing = 0.1                                                                                           // 8511
        , valueFormat = d3.format(',.2f')                                                                              // 8512
        , delay = 1200                                                                                                 // 8513
        , xDomain                                                                                                      // 8514
        , yDomain                                                                                                      // 8515
        , xRange                                                                                                       // 8516
        , yRange                                                                                                       // 8517
        , duration = 250                                                                                               // 8518
        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
        ;                                                                                                              // 8520
                                                                                                                       // 8521
    //============================================================                                                     // 8522
    // Private Variables                                                                                               // 8523
    //------------------------------------------------------------                                                     // 8524
                                                                                                                       // 8525
    var x0, y0; //used to store previous scales                                                                        // 8526
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 8527
                                                                                                                       // 8528
    function chart(selection) {                                                                                        // 8529
        renderWatch.reset();                                                                                           // 8530
        selection.each(function(data) {                                                                                // 8531
            var availableWidth = width - margin.left - margin.right,                                                   // 8532
                availableHeight = height - margin.top - margin.bottom;                                                 // 8533
                                                                                                                       // 8534
            container = d3.select(this);                                                                               // 8535
            nv.utils.initSVG(container);                                                                               // 8536
                                                                                                                       // 8537
            if (stacked)                                                                                               // 8538
                data = d3.layout.stack()                                                                               // 8539
                    .offset('zero')                                                                                    // 8540
                    .values(function(d){ return d.values })                                                            // 8541
                    .y(getY)                                                                                           // 8542
                (data);                                                                                                // 8543
                                                                                                                       // 8544
            //add series index and key to each data point for reference                                                // 8545
            data.forEach(function(series, i) {                                                                         // 8546
                series.values.forEach(function(point) {                                                                // 8547
                    point.series = i;                                                                                  // 8548
                    point.key = series.key;                                                                            // 8549
                });                                                                                                    // 8550
            });                                                                                                        // 8551
                                                                                                                       // 8552
            // HACK for negative value stacking                                                                        // 8553
            if (stacked)                                                                                               // 8554
                data[0].values.map(function(d,i) {                                                                     // 8555
                    var posBase = 0, negBase = 0;                                                                      // 8556
                    data.map(function(d) {                                                                             // 8557
                        var f = d.values[i]                                                                            // 8558
                        f.size = Math.abs(f.y);                                                                        // 8559
                        if (f.y<0)  {                                                                                  // 8560
                            f.y1 = negBase - f.size;                                                                   // 8561
                            negBase = negBase - f.size;                                                                // 8562
                        } else                                                                                         // 8563
                        {                                                                                              // 8564
                            f.y1 = posBase;                                                                            // 8565
                            posBase = posBase + f.size;                                                                // 8566
                        }                                                                                              // 8567
                    });                                                                                                // 8568
                });                                                                                                    // 8569
                                                                                                                       // 8570
            // Setup Scales                                                                                            // 8571
            // remap and flatten the data for use in calculating the scales' domains                                   // 8572
            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate       // 8573
                data.map(function(d) {                                                                                 // 8574
                    return d.values.map(function(d,i) {                                                                // 8575
                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }                                      // 8576
                    })                                                                                                 // 8577
                });                                                                                                    // 8578
                                                                                                                       // 8579
            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))                                  // 8580
                .rangeBands(xRange || [0, availableHeight], groupSpacing);                                             // 8581
                                                                                                                       // 8582
            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))
                                                                                                                       // 8584
            if (showValues && !stacked)                                                                                // 8585
                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);
            else                                                                                                       // 8587
                y.range(yRange || [0, availableWidth]);                                                                // 8588
                                                                                                                       // 8589
            x0 = x0 || x;                                                                                              // 8590
            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);                                        // 8591
                                                                                                                       // 8592
            // Setup containers and skeleton of chart                                                                  // 8593
            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);                      // 8594
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');              // 8595
            var defsEnter = wrapEnter.append('defs');                                                                  // 8596
            var gEnter = wrapEnter.append('g');                                                                        // 8597
            var g = wrap.select('g');                                                                                  // 8598
                                                                                                                       // 8599
            gEnter.append('g').attr('class', 'nv-groups');                                                             // 8600
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 8601
                                                                                                                       // 8602
            var groups = wrap.select('.nv-groups').selectAll('.nv-group')                                              // 8603
                .data(function(d) { return d }, function(d,i) { return i });                                           // 8604
            groups.enter().append('g')                                                                                 // 8605
                .style('stroke-opacity', 1e-6)                                                                         // 8606
                .style('fill-opacity', 1e-6);                                                                          // 8607
            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')                              // 8608
                .style('stroke-opacity', 1e-6)                                                                         // 8609
                .style('fill-opacity', 1e-6)                                                                           // 8610
                .remove();                                                                                             // 8611
            groups                                                                                                     // 8612
                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })                                     // 8613
                .classed('hover', function(d) { return d.hover })                                                      // 8614
                .style('fill', function(d,i){ return color(d, i) })                                                    // 8615
                .style('stroke', function(d,i){ return color(d, i) });                                                 // 8616
            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')                                          // 8617
                .style('stroke-opacity', 1)                                                                            // 8618
                .style('fill-opacity', .75);                                                                           // 8619
                                                                                                                       // 8620
            var bars = groups.selectAll('g.nv-bar')                                                                    // 8621
                .data(function(d) { return d.values });                                                                // 8622
            bars.exit().remove();                                                                                      // 8623
                                                                                                                       // 8624
            var barsEnter = bars.enter().append('g')                                                                   // 8625
                .attr('transform', function(d,i,j) {                                                                   // 8626
                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'
                });                                                                                                    // 8628
                                                                                                                       // 8629
            barsEnter.append('rect')                                                                                   // 8630
                .attr('width', 0)                                                                                      // 8631
                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )                                          // 8632
                                                                                                                       // 8633
            bars                                                                                                       // 8634
                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here                    // 8635
                    d3.select(this).classed('hover', true);                                                            // 8636
                    dispatch.elementMouseover({                                                                        // 8637
                        data: d,                                                                                       // 8638
                        index: i,                                                                                      // 8639
                        color: d3.select(this).style("fill")                                                           // 8640
                    });                                                                                                // 8641
                })                                                                                                     // 8642
                .on('mouseout', function(d,i) {                                                                        // 8643
                    d3.select(this).classed('hover', false);                                                           // 8644
                    dispatch.elementMouseout({                                                                         // 8645
                        data: d,                                                                                       // 8646
                        index: i,                                                                                      // 8647
                        color: d3.select(this).style("fill")                                                           // 8648
                    });                                                                                                // 8649
                })                                                                                                     // 8650
                .on('mouseout', function(d,i) {                                                                        // 8651
                    dispatch.elementMouseout({                                                                         // 8652
                        data: d,                                                                                       // 8653
                        index: i,                                                                                      // 8654
                        color: d3.select(this).style("fill")                                                           // 8655
                    });                                                                                                // 8656
                })                                                                                                     // 8657
                .on('mousemove', function(d,i) {                                                                       // 8658
                    dispatch.elementMousemove({                                                                        // 8659
                        data: d,                                                                                       // 8660
                        index: i,                                                                                      // 8661
                        color: d3.select(this).style("fill")                                                           // 8662
                    });                                                                                                // 8663
                })                                                                                                     // 8664
                .on('click', function(d,i) {                                                                           // 8665
                    dispatch.elementClick({                                                                            // 8666
                        data: d,                                                                                       // 8667
                        index: i,                                                                                      // 8668
                        color: d3.select(this).style("fill")                                                           // 8669
                    });                                                                                                // 8670
                    d3.event.stopPropagation();                                                                        // 8671
                })                                                                                                     // 8672
                .on('dblclick', function(d,i) {                                                                        // 8673
                    dispatch.elementDblClick({                                                                         // 8674
                        data: d,                                                                                       // 8675
                        index: i,                                                                                      // 8676
                        color: d3.select(this).style("fill")                                                           // 8677
                    });                                                                                                // 8678
                    d3.event.stopPropagation();                                                                        // 8679
                });                                                                                                    // 8680
                                                                                                                       // 8681
            if (getYerr(data[0],0)) {                                                                                  // 8682
                barsEnter.append('polyline');                                                                          // 8683
                                                                                                                       // 8684
                bars.select('polyline')                                                                                // 8685
                    .attr('fill', 'none')                                                                              // 8686
                    .attr('points', function(d,i) {                                                                    // 8687
                        var xerr = getYerr(d,i)                                                                        // 8688
                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);                           // 8689
                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];                                 // 8690
                        xerr = xerr.map(function(e) { return y(e) - y(0); });                                          // 8691
                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];
                        return a.map(function (path) { return path.join(',') }).join(' ');                             // 8693
                    })                                                                                                 // 8694
                    .attr('transform', function(d,i) {                                                                 // 8695
                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);                                   // 8696
                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'             // 8697
                    });                                                                                                // 8698
            }                                                                                                          // 8699
                                                                                                                       // 8700
            barsEnter.append('text');                                                                                  // 8701
                                                                                                                       // 8702
            if (showValues && !stacked) {                                                                              // 8703
                bars.select('text')                                                                                    // 8704
                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })                     // 8705
                    .attr('y', x.rangeBand() / (data.length * 2))                                                      // 8706
                    .attr('dy', '.32em')                                                                               // 8707
                    .text(function(d,i) {                                                                              // 8708
                        var t = valueFormat(getY(d,i))                                                                 // 8709
                            , yerr = getYerr(d,i);                                                                     // 8710
                        if (yerr === undefined)                                                                        // 8711
                            return t;                                                                                  // 8712
                        if (!yerr.length)                                                                              // 8713
                            return t + '±' + valueFormat(Math.abs(yerr));                                              // 8714
                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));        // 8715
                    });                                                                                                // 8716
                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')                                          // 8717
                    .select('text')                                                                                    // 8718
                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })                  // 8719
            } else {                                                                                                   // 8720
                bars.selectAll('text').text('');                                                                       // 8721
            }                                                                                                          // 8722
                                                                                                                       // 8723
            if (showBarLabels && !stacked) {                                                                           // 8724
                barsEnter.append('text').classed('nv-bar-label',true);                                                 // 8725
                bars.select('text.nv-bar-label')                                                                       // 8726
                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })                     // 8727
                    .attr('y', x.rangeBand() / (data.length * 2))                                                      // 8728
                    .attr('dy', '.32em')                                                                               // 8729
                    .text(function(d,i) { return getX(d,i) });                                                         // 8730
                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')                                          // 8731
                    .select('text.nv-bar-label')                                                                       // 8732
                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });                 // 8733
            }                                                                                                          // 8734
            else {                                                                                                     // 8735
                bars.selectAll('text.nv-bar-label').text('');                                                          // 8736
            }                                                                                                          // 8737
                                                                                                                       // 8738
            bars                                                                                                       // 8739
                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})          // 8740
                                                                                                                       // 8741
            if (barColor) {                                                                                            // 8742
                if (!disabled) disabled = data.map(function() { return true });                                        // 8743
                bars                                                                                                   // 8744
                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })
                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });
            }                                                                                                          // 8747
                                                                                                                       // 8748
            if (stacked)                                                                                               // 8749
                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')                                          // 8750
                    .attr('transform', function(d,i) {                                                                 // 8751
                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'                                       // 8752
                    })                                                                                                 // 8753
                    .select('rect')                                                                                    // 8754
                    .attr('width', function(d,i) {                                                                     // 8755
                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0))                                                 // 8756
                    })                                                                                                 // 8757
                    .attr('height', x.rangeBand() );                                                                   // 8758
            else                                                                                                       // 8759
                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')                                          // 8760
                    .attr('transform', function(d,i) {                                                                 // 8761
                        //TODO: stacked must be all positive or all negative, not both?                                // 8762
                        return 'translate(' +                                                                          // 8763
                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))                                                      // 8764
                            + ',' +                                                                                    // 8765
                            (d.series * x.rangeBand() / data.length                                                    // 8766
                                +                                                                                      // 8767
                                x(getX(d,i)) )                                                                         // 8768
                            + ')'                                                                                      // 8769
                    })                                                                                                 // 8770
                    .select('rect')                                                                                    // 8771
                    .attr('height', x.rangeBand() / data.length )                                                      // 8772
                    .attr('width', function(d,i) {                                                                     // 8773
                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1)                                               // 8774
                    });                                                                                                // 8775
                                                                                                                       // 8776
            //store old scales for use in transitions on update                                                        // 8777
            x0 = x.copy();                                                                                             // 8778
            y0 = y.copy();                                                                                             // 8779
                                                                                                                       // 8780
        });                                                                                                            // 8781
                                                                                                                       // 8782
        renderWatch.renderEnd('multibarHorizontal immediate');                                                         // 8783
        return chart;                                                                                                  // 8784
    }                                                                                                                  // 8785
                                                                                                                       // 8786
    //============================================================                                                     // 8787
    // Expose Public Variables                                                                                         // 8788
    //------------------------------------------------------------                                                     // 8789
                                                                                                                       // 8790
    chart.dispatch = dispatch;                                                                                         // 8791
                                                                                                                       // 8792
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 8793
                                                                                                                       // 8794
    chart._options = Object.create({}, {                                                                               // 8795
        // simple options, just get/set the necessary values                                                           // 8796
        width:   {get: function(){return width;}, set: function(_){width=_;}},                                         // 8797
        height:  {get: function(){return height;}, set: function(_){height=_;}},                                       // 8798
        x:       {get: function(){return getX;}, set: function(_){getX=_;}},                                           // 8799
        y:       {get: function(){return getY;}, set: function(_){getY=_;}},                                           // 8800
        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},                                  // 8801
        xScale:  {get: function(){return x;}, set: function(_){x=_;}},                                                 // 8802
        yScale:  {get: function(){return y;}, set: function(_){y=_;}},                                                 // 8803
        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                     // 8804
        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                     // 8805
        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},                                       // 8806
        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},                                       // 8807
        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},                                       // 8808
        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},                                     // 8809
        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},                            // 8810
        // this shows the group name, seems pointless?                                                                 // 8811
        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},              // 8812
        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},                              // 8813
        id:           {get: function(){return id;}, set: function(_){id=_;}},                                          // 8814
        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},                        // 8815
        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},                      // 8816
        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},                       // 8817
                                                                                                                       // 8818
        // options that require extra logic in the setter                                                              // 8819
        margin: {get: function(){return margin;}, set: function(_){                                                    // 8820
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 8821
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 8822
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 8823
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 8824
        }},                                                                                                            // 8825
        duration: {get: function(){return duration;}, set: function(_){                                                // 8826
            duration = _;                                                                                              // 8827
            renderWatch.reset(duration);                                                                               // 8828
        }},                                                                                                            // 8829
        color:  {get: function(){return color;}, set: function(_){                                                     // 8830
            color = nv.utils.getColor(_);                                                                              // 8831
        }},                                                                                                            // 8832
        barColor:  {get: function(){return barColor;}, set: function(_){                                               // 8833
            barColor = _ ? nv.utils.getColor(_) : null;                                                                // 8834
        }}                                                                                                             // 8835
    });                                                                                                                // 8836
                                                                                                                       // 8837
    nv.utils.initOptions(chart);                                                                                       // 8838
                                                                                                                       // 8839
    return chart;                                                                                                      // 8840
};                                                                                                                     // 8841
                                                                                                                       // 8842
nv.models.multiBarHorizontalChart = function() {                                                                       // 8843
    "use strict";                                                                                                      // 8844
                                                                                                                       // 8845
    //============================================================                                                     // 8846
    // Public Variables with Default Settings                                                                          // 8847
    //------------------------------------------------------------                                                     // 8848
                                                                                                                       // 8849
    var multibar = nv.models.multiBarHorizontal()                                                                      // 8850
        , xAxis = nv.models.axis()                                                                                     // 8851
        , yAxis = nv.models.axis()                                                                                     // 8852
        , legend = nv.models.legend().height(30)                                                                       // 8853
        , controls = nv.models.legend().height(30)                                                                     // 8854
        , tooltip = nv.models.tooltip()                                                                                // 8855
        ;                                                                                                              // 8856
                                                                                                                       // 8857
    var margin = {top: 30, right: 20, bottom: 50, left: 60}                                                            // 8858
        , width = null                                                                                                 // 8859
        , height = null                                                                                                // 8860
        , color = nv.utils.defaultColor()                                                                              // 8861
        , showControls = true                                                                                          // 8862
        , controlLabels = {}                                                                                           // 8863
        , showLegend = true                                                                                            // 8864
        , showXAxis = true                                                                                             // 8865
        , showYAxis = true                                                                                             // 8866
        , stacked = false                                                                                              // 8867
        , x //can be accessed via chart.xScale()                                                                       // 8868
        , y //can be accessed via chart.yScale()                                                                       // 8869
        , state = nv.utils.state()                                                                                     // 8870
        , defaultState = null                                                                                          // 8871
        , noData = null                                                                                                // 8872
        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')                                             // 8873
        , controlWidth = function() { return showControls ? 180 : 0 }                                                  // 8874
        , duration = 250                                                                                               // 8875
        ;                                                                                                              // 8876
                                                                                                                       // 8877
    state.stacked = false; // DEPRECATED Maintained for backward compatibility                                         // 8878
                                                                                                                       // 8879
    multibar.stacked(stacked);                                                                                         // 8880
                                                                                                                       // 8881
    xAxis                                                                                                              // 8882
        .orient('left')                                                                                                // 8883
        .tickPadding(5)                                                                                                // 8884
        .showMaxMin(false)                                                                                             // 8885
        .tickFormat(function(d) { return d })                                                                          // 8886
    ;                                                                                                                  // 8887
    yAxis                                                                                                              // 8888
        .orient('bottom')                                                                                              // 8889
        .tickFormat(d3.format(',.1f'))                                                                                 // 8890
    ;                                                                                                                  // 8891
                                                                                                                       // 8892
    tooltip                                                                                                            // 8893
        .duration(0)                                                                                                   // 8894
        .valueFormatter(function(d, i) {                                                                               // 8895
            return yAxis.tickFormat()(d, i);                                                                           // 8896
        })                                                                                                             // 8897
        .headerFormatter(function(d, i) {                                                                              // 8898
            return xAxis.tickFormat()(d, i);                                                                           // 8899
        });                                                                                                            // 8900
                                                                                                                       // 8901
    controls.updateState(false);                                                                                       // 8902
                                                                                                                       // 8903
    //============================================================                                                     // 8904
    // Private Variables                                                                                               // 8905
    //------------------------------------------------------------                                                     // 8906
                                                                                                                       // 8907
    var stateGetter = function(data) {                                                                                 // 8908
        return function(){                                                                                             // 8909
            return {                                                                                                   // 8910
                active: data.map(function(d) { return !d.disabled }),                                                  // 8911
                stacked: stacked                                                                                       // 8912
            };                                                                                                         // 8913
        }                                                                                                              // 8914
    };                                                                                                                 // 8915
                                                                                                                       // 8916
    var stateSetter = function(data) {                                                                                 // 8917
        return function(state) {                                                                                       // 8918
            if (state.stacked !== undefined)                                                                           // 8919
                stacked = state.stacked;                                                                               // 8920
            if (state.active !== undefined)                                                                            // 8921
                data.forEach(function(series,i) {                                                                      // 8922
                    series.disabled = !state.active[i];                                                                // 8923
                });                                                                                                    // 8924
        }                                                                                                              // 8925
    };                                                                                                                 // 8926
                                                                                                                       // 8927
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 8928
                                                                                                                       // 8929
    function chart(selection) {                                                                                        // 8930
        renderWatch.reset();                                                                                           // 8931
        renderWatch.models(multibar);                                                                                  // 8932
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 8933
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 8934
                                                                                                                       // 8935
        selection.each(function(data) {                                                                                // 8936
            var container = d3.select(this),                                                                           // 8937
                that = this;                                                                                           // 8938
            nv.utils.initSVG(container);                                                                               // 8939
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 8940
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 8941
                                                                                                                       // 8942
            chart.update = function() { container.transition().duration(duration).call(chart) };                       // 8943
            chart.container = this;                                                                                    // 8944
                                                                                                                       // 8945
            stacked = multibar.stacked();                                                                              // 8946
                                                                                                                       // 8947
            state                                                                                                      // 8948
                .setter(stateSetter(data), chart.update)                                                               // 8949
                .getter(stateGetter(data))                                                                             // 8950
                .update();                                                                                             // 8951
                                                                                                                       // 8952
            // DEPRECATED set state.disableddisabled                                                                   // 8953
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 8954
                                                                                                                       // 8955
            if (!defaultState) {                                                                                       // 8956
                var key;                                                                                               // 8957
                defaultState = {};                                                                                     // 8958
                for (key in state) {                                                                                   // 8959
                    if (state[key] instanceof Array)                                                                   // 8960
                        defaultState[key] = state[key].slice(0);                                                       // 8961
                    else                                                                                               // 8962
                        defaultState[key] = state[key];                                                                // 8963
                }                                                                                                      // 8964
            }                                                                                                          // 8965
                                                                                                                       // 8966
            // Display No Data message if there's nothing to show.                                                     // 8967
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 8968
                nv.utils.noData(chart, container)                                                                      // 8969
                return chart;                                                                                          // 8970
            } else {                                                                                                   // 8971
                container.selectAll('.nv-noData').remove();                                                            // 8972
            }                                                                                                          // 8973
                                                                                                                       // 8974
            // Setup Scales                                                                                            // 8975
            x = multibar.xScale();                                                                                     // 8976
            y = multibar.yScale();                                                                                     // 8977
                                                                                                                       // 8978
            // Setup containers and skeleton of chart                                                                  // 8979
            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);                       // 8980
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');
            var g = wrap.select('g');                                                                                  // 8982
                                                                                                                       // 8983
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 8984
            gEnter.append('g').attr('class', 'nv-y nv-axis')                                                           // 8985
                .append('g').attr('class', 'nv-zeroLine')                                                              // 8986
                .append('line');                                                                                       // 8987
            gEnter.append('g').attr('class', 'nv-barsWrap');                                                           // 8988
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 8989
            gEnter.append('g').attr('class', 'nv-controlsWrap');                                                       // 8990
                                                                                                                       // 8991
            // Legend                                                                                                  // 8992
            if (showLegend) {                                                                                          // 8993
                legend.width(availableWidth - controlWidth());                                                         // 8994
                                                                                                                       // 8995
                g.select('.nv-legendWrap')                                                                             // 8996
                    .datum(data)                                                                                       // 8997
                    .call(legend);                                                                                     // 8998
                                                                                                                       // 8999
                if ( margin.top != legend.height()) {                                                                  // 9000
                    margin.top = legend.height();                                                                      // 9001
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 9002
                }                                                                                                      // 9003
                                                                                                                       // 9004
                g.select('.nv-legendWrap')                                                                             // 9005
                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');                      // 9006
            }                                                                                                          // 9007
                                                                                                                       // 9008
            // Controls                                                                                                // 9009
            if (showControls) {                                                                                        // 9010
                var controlsData = [                                                                                   // 9011
                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },                         // 9012
                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }                         // 9013
                ];                                                                                                     // 9014
                                                                                                                       // 9015
                controls.width(controlWidth()).color(['#444', '#444', '#444']);                                        // 9016
                g.select('.nv-controlsWrap')                                                                           // 9017
                    .datum(controlsData)                                                                               // 9018
                    .attr('transform', 'translate(0,' + (-margin.top) +')')                                            // 9019
                    .call(controls);                                                                                   // 9020
            }                                                                                                          // 9021
                                                                                                                       // 9022
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 9023
                                                                                                                       // 9024
            // Main Chart Component(s)                                                                                 // 9025
            multibar                                                                                                   // 9026
                .disabled(data.map(function(series) { return series.disabled }))                                       // 9027
                .width(availableWidth)                                                                                 // 9028
                .height(availableHeight)                                                                               // 9029
                .color(data.map(function(d,i) {                                                                        // 9030
                    return d.color || color(d, i);                                                                     // 9031
                }).filter(function(d,i) { return !data[i].disabled }));                                                // 9032
                                                                                                                       // 9033
            var barsWrap = g.select('.nv-barsWrap')                                                                    // 9034
                .datum(data.filter(function(d) { return !d.disabled }));                                               // 9035
                                                                                                                       // 9036
            barsWrap.transition().call(multibar);                                                                      // 9037
                                                                                                                       // 9038
            // Setup Axes                                                                                              // 9039
            if (showXAxis) {                                                                                           // 9040
                xAxis                                                                                                  // 9041
                    .scale(x)                                                                                          // 9042
                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )                                           // 9043
                    .tickSize(-availableWidth, 0);                                                                     // 9044
                                                                                                                       // 9045
                g.select('.nv-x.nv-axis').call(xAxis);                                                                 // 9046
                                                                                                                       // 9047
                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');                                                 // 9048
                                                                                                                       // 9049
                xTicks                                                                                                 // 9050
                    .selectAll('line, text');                                                                          // 9051
            }                                                                                                          // 9052
                                                                                                                       // 9053
            if (showYAxis) {                                                                                           // 9054
                yAxis                                                                                                  // 9055
                    .scale(y)                                                                                          // 9056
                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                           // 9057
                    .tickSize( -availableHeight, 0);                                                                   // 9058
                                                                                                                       // 9059
                g.select('.nv-y.nv-axis')                                                                              // 9060
                    .attr('transform', 'translate(0,' + availableHeight + ')');                                        // 9061
                g.select('.nv-y.nv-axis').call(yAxis);                                                                 // 9062
            }                                                                                                          // 9063
                                                                                                                       // 9064
            // Zero line                                                                                               // 9065
            g.select(".nv-zeroLine line")                                                                              // 9066
                .attr("x1", y(0))                                                                                      // 9067
                .attr("x2", y(0))                                                                                      // 9068
                .attr("y1", 0)                                                                                         // 9069
                .attr("y2", -availableHeight)                                                                          // 9070
            ;                                                                                                          // 9071
                                                                                                                       // 9072
            //============================================================                                             // 9073
            // Event Handling/Dispatching (in chart's scope)                                                           // 9074
            //------------------------------------------------------------                                             // 9075
                                                                                                                       // 9076
            legend.dispatch.on('stateChange', function(newState) {                                                     // 9077
                for (var key in newState)                                                                              // 9078
                    state[key] = newState[key];                                                                        // 9079
                dispatch.stateChange(state);                                                                           // 9080
                chart.update();                                                                                        // 9081
            });                                                                                                        // 9082
                                                                                                                       // 9083
            controls.dispatch.on('legendClick', function(d,i) {                                                        // 9084
                if (!d.disabled) return;                                                                               // 9085
                controlsData = controlsData.map(function(s) {                                                          // 9086
                    s.disabled = true;                                                                                 // 9087
                    return s;                                                                                          // 9088
                });                                                                                                    // 9089
                d.disabled = false;                                                                                    // 9090
                                                                                                                       // 9091
                switch (d.key) {                                                                                       // 9092
                    case 'Grouped':                                                                                    // 9093
                        multibar.stacked(false);                                                                       // 9094
                        break;                                                                                         // 9095
                    case 'Stacked':                                                                                    // 9096
                        multibar.stacked(true);                                                                        // 9097
                        break;                                                                                         // 9098
                }                                                                                                      // 9099
                                                                                                                       // 9100
                state.stacked = multibar.stacked();                                                                    // 9101
                dispatch.stateChange(state);                                                                           // 9102
                stacked = multibar.stacked();                                                                          // 9103
                                                                                                                       // 9104
                chart.update();                                                                                        // 9105
            });                                                                                                        // 9106
                                                                                                                       // 9107
            // Update chart from a state object passed to event handler                                                // 9108
            dispatch.on('changeState', function(e) {                                                                   // 9109
                                                                                                                       // 9110
                if (typeof e.disabled !== 'undefined') {                                                               // 9111
                    data.forEach(function(series,i) {                                                                  // 9112
                        series.disabled = e.disabled[i];                                                               // 9113
                    });                                                                                                // 9114
                                                                                                                       // 9115
                    state.disabled = e.disabled;                                                                       // 9116
                }                                                                                                      // 9117
                                                                                                                       // 9118
                if (typeof e.stacked !== 'undefined') {                                                                // 9119
                    multibar.stacked(e.stacked);                                                                       // 9120
                    state.stacked = e.stacked;                                                                         // 9121
                    stacked = e.stacked;                                                                               // 9122
                }                                                                                                      // 9123
                                                                                                                       // 9124
                chart.update();                                                                                        // 9125
            });                                                                                                        // 9126
        });                                                                                                            // 9127
        renderWatch.renderEnd('multibar horizontal chart immediate');                                                  // 9128
        return chart;                                                                                                  // 9129
    }                                                                                                                  // 9130
                                                                                                                       // 9131
    //============================================================                                                     // 9132
    // Event Handling/Dispatching (out of chart's scope)                                                               // 9133
    //------------------------------------------------------------                                                     // 9134
                                                                                                                       // 9135
    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {                                                   // 9136
        evt.value = chart.x()(evt.data);                                                                               // 9137
        evt['series'] = {                                                                                              // 9138
            key: evt.data.key,                                                                                         // 9139
            value: chart.y()(evt.data),                                                                                // 9140
            color: evt.color                                                                                           // 9141
        };                                                                                                             // 9142
        tooltip.data(evt).hidden(false);                                                                               // 9143
    });                                                                                                                // 9144
                                                                                                                       // 9145
    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {                                                    // 9146
        tooltip.hidden(true);                                                                                          // 9147
    });                                                                                                                // 9148
                                                                                                                       // 9149
    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {                                                   // 9150
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 9151
    });                                                                                                                // 9152
                                                                                                                       // 9153
    //============================================================                                                     // 9154
    // Expose Public Variables                                                                                         // 9155
    //------------------------------------------------------------                                                     // 9156
                                                                                                                       // 9157
    // expose chart's sub-components                                                                                   // 9158
    chart.dispatch = dispatch;                                                                                         // 9159
    chart.multibar = multibar;                                                                                         // 9160
    chart.legend = legend;                                                                                             // 9161
    chart.controls = controls;                                                                                         // 9162
    chart.xAxis = xAxis;                                                                                               // 9163
    chart.yAxis = yAxis;                                                                                               // 9164
    chart.state = state;                                                                                               // 9165
    chart.tooltip = tooltip;                                                                                           // 9166
                                                                                                                       // 9167
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 9168
                                                                                                                       // 9169
    chart._options = Object.create({}, {                                                                               // 9170
        // simple options, just get/set the necessary values                                                           // 9171
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 9172
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 9173
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 9174
        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},                      // 9175
        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},                   // 9176
        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                          // 9177
        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                            // 9178
        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                   // 9179
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 9180
                                                                                                                       // 9181
        // deprecated options                                                                                          // 9182
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 9183
            // deprecated after 1.7.1                                                                                  // 9184
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 9185
            tooltip.enabled(!!_);                                                                                      // 9186
        }},                                                                                                            // 9187
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 9188
            // deprecated after 1.7.1                                                                                  // 9189
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 9190
            tooltip.contentGenerator(_);                                                                               // 9191
        }},                                                                                                            // 9192
                                                                                                                       // 9193
        // options that require extra logic in the setter                                                              // 9194
        margin: {get: function(){return margin;}, set: function(_){                                                    // 9195
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 9196
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 9197
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 9198
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 9199
        }},                                                                                                            // 9200
        duration: {get: function(){return duration;}, set: function(_){                                                // 9201
            duration = _;                                                                                              // 9202
            renderWatch.reset(duration);                                                                               // 9203
            multibar.duration(duration);                                                                               // 9204
            xAxis.duration(duration);                                                                                  // 9205
            yAxis.duration(duration);                                                                                  // 9206
        }},                                                                                                            // 9207
        color:  {get: function(){return color;}, set: function(_){                                                     // 9208
            color = nv.utils.getColor(_);                                                                              // 9209
            legend.color(color);                                                                                       // 9210
        }},                                                                                                            // 9211
        barColor:  {get: function(){return multibar.barColor;}, set: function(_){                                      // 9212
            multibar.barColor(_);                                                                                      // 9213
            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})                            // 9214
        }}                                                                                                             // 9215
    });                                                                                                                // 9216
                                                                                                                       // 9217
    nv.utils.inheritOptions(chart, multibar);                                                                          // 9218
    nv.utils.initOptions(chart);                                                                                       // 9219
                                                                                                                       // 9220
    return chart;                                                                                                      // 9221
};                                                                                                                     // 9222
nv.models.multiChart = function() {                                                                                    // 9223
    "use strict";                                                                                                      // 9224
                                                                                                                       // 9225
    //============================================================                                                     // 9226
    // Public Variables with Default Settings                                                                          // 9227
    //------------------------------------------------------------                                                     // 9228
                                                                                                                       // 9229
    var margin = {top: 30, right: 20, bottom: 50, left: 60},                                                           // 9230
        color = nv.utils.defaultColor(),                                                                               // 9231
        width = null,                                                                                                  // 9232
        height = null,                                                                                                 // 9233
        showLegend = true,                                                                                             // 9234
        noData = null,                                                                                                 // 9235
        yDomain1,                                                                                                      // 9236
        yDomain2,                                                                                                      // 9237
        getX = function(d) { return d.x },                                                                             // 9238
        getY = function(d) { return d.y},                                                                              // 9239
        interpolate = 'monotone',                                                                                      // 9240
        useVoronoi = true                                                                                              // 9241
        ;                                                                                                              // 9242
                                                                                                                       // 9243
    //============================================================                                                     // 9244
    // Private Variables                                                                                               // 9245
    //------------------------------------------------------------                                                     // 9246
                                                                                                                       // 9247
    var x = d3.scale.linear(),                                                                                         // 9248
        yScale1 = d3.scale.linear(),                                                                                   // 9249
        yScale2 = d3.scale.linear(),                                                                                   // 9250
                                                                                                                       // 9251
        lines1 = nv.models.line().yScale(yScale1),                                                                     // 9252
        lines2 = nv.models.line().yScale(yScale2),                                                                     // 9253
                                                                                                                       // 9254
        scatters1 = nv.models.scatter().yScale(yScale1),                                                               // 9255
        scatters2 = nv.models.scatter().yScale(yScale2),                                                               // 9256
                                                                                                                       // 9257
        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1),                                                   // 9258
        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2),                                                   // 9259
                                                                                                                       // 9260
        stack1 = nv.models.stackedArea().yScale(yScale1),                                                              // 9261
        stack2 = nv.models.stackedArea().yScale(yScale2),                                                              // 9262
                                                                                                                       // 9263
        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5),                                             // 9264
        yAxis1 = nv.models.axis().scale(yScale1).orient('left'),                                                       // 9265
        yAxis2 = nv.models.axis().scale(yScale2).orient('right'),                                                      // 9266
                                                                                                                       // 9267
        legend = nv.models.legend().height(30),                                                                        // 9268
        tooltip = nv.models.tooltip(),                                                                                 // 9269
        dispatch = d3.dispatch();                                                                                      // 9270
                                                                                                                       // 9271
    function chart(selection) {                                                                                        // 9272
        selection.each(function(data) {                                                                                // 9273
            var container = d3.select(this),                                                                           // 9274
                that = this;                                                                                           // 9275
            nv.utils.initSVG(container);                                                                               // 9276
                                                                                                                       // 9277
            chart.update = function() { container.transition().call(chart); };                                         // 9278
            chart.container = this;                                                                                    // 9279
                                                                                                                       // 9280
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 9281
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 9282
                                                                                                                       // 9283
            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});                       // 9284
            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});                       // 9285
            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});                 // 9286
            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});                 // 9287
            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});                       // 9288
            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});                       // 9289
            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});                       // 9290
            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});                       // 9291
                                                                                                                       // 9292
            // Display noData message if there's nothing to show.                                                      // 9293
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 9294
                nv.utils.noData(chart, container);                                                                     // 9295
                return chart;                                                                                          // 9296
            } else {                                                                                                   // 9297
                container.selectAll('.nv-noData').remove();                                                            // 9298
            }                                                                                                          // 9299
                                                                                                                       // 9300
            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})                                // 9301
                .map(function(d) {                                                                                     // 9302
                    return d.values.map(function(d,i) {                                                                // 9303
                        return { x: d.x, y: d.y }                                                                      // 9304
                    })                                                                                                 // 9305
                });                                                                                                    // 9306
                                                                                                                       // 9307
            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})                                // 9308
                .map(function(d) {                                                                                     // 9309
                    return d.values.map(function(d,i) {                                                                // 9310
                        return { x: d.x, y: d.y }                                                                      // 9311
                    })                                                                                                 // 9312
                });                                                                                                    // 9313
                                                                                                                       // 9314
            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))                     // 9315
                .range([0, availableWidth]);                                                                           // 9316
                                                                                                                       // 9317
            var wrap = container.selectAll('g.wrap.multiChart').data([data]);                                          // 9318
            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');                   // 9319
                                                                                                                       // 9320
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 9321
            gEnter.append('g').attr('class', 'nv-y1 nv-axis');                                                         // 9322
            gEnter.append('g').attr('class', 'nv-y2 nv-axis');                                                         // 9323
            gEnter.append('g').attr('class', 'lines1Wrap');                                                            // 9324
            gEnter.append('g').attr('class', 'lines2Wrap');                                                            // 9325
            gEnter.append('g').attr('class', 'scatters1Wrap');                                                         // 9326
            gEnter.append('g').attr('class', 'scatters2Wrap');                                                         // 9327
            gEnter.append('g').attr('class', 'bars1Wrap');                                                             // 9328
            gEnter.append('g').attr('class', 'bars2Wrap');                                                             // 9329
            gEnter.append('g').attr('class', 'stack1Wrap');                                                            // 9330
            gEnter.append('g').attr('class', 'stack2Wrap');                                                            // 9331
            gEnter.append('g').attr('class', 'legendWrap');                                                            // 9332
                                                                                                                       // 9333
            var g = wrap.select('g');                                                                                  // 9334
                                                                                                                       // 9335
            var color_array = data.map(function(d,i) {                                                                 // 9336
                return data[i].color || color(d, i);                                                                   // 9337
            });                                                                                                        // 9338
                                                                                                                       // 9339
            if (showLegend) {                                                                                          // 9340
                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;                                // 9341
                var legendXPosition = legend.align() ? legendWidth : 0;                                                // 9342
                                                                                                                       // 9343
                legend.width(legendWidth);                                                                             // 9344
                legend.color(color_array);                                                                             // 9345
                                                                                                                       // 9346
                g.select('.legendWrap')                                                                                // 9347
                    .datum(data.map(function(series) {                                                                 // 9348
                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;       // 9349
                        series.key = series.originalKey + (series.yAxis == 1 ? '' : ' (right axis)');                  // 9350
                        return series;                                                                                 // 9351
                    }))                                                                                                // 9352
                    .call(legend);                                                                                     // 9353
                                                                                                                       // 9354
                if ( margin.top != legend.height()) {                                                                  // 9355
                    margin.top = legend.height();                                                                      // 9356
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 9357
                }                                                                                                      // 9358
                                                                                                                       // 9359
                g.select('.legendWrap')                                                                                // 9360
                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');                     // 9361
            }                                                                                                          // 9362
                                                                                                                       // 9363
            lines1                                                                                                     // 9364
                .width(availableWidth)                                                                                 // 9365
                .height(availableHeight)                                                                               // 9366
                .interpolate(interpolate)                                                                              // 9367
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));
            lines2                                                                                                     // 9369
                .width(availableWidth)                                                                                 // 9370
                .height(availableHeight)                                                                               // 9371
                .interpolate(interpolate)                                                                              // 9372
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));
            scatters1                                                                                                  // 9374
                .width(availableWidth)                                                                                 // 9375
                .height(availableHeight)                                                                               // 9376
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));
            scatters2                                                                                                  // 9378
                .width(availableWidth)                                                                                 // 9379
                .height(availableHeight)                                                                               // 9380
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));
            bars1                                                                                                      // 9382
                .width(availableWidth)                                                                                 // 9383
                .height(availableHeight)                                                                               // 9384
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));
            bars2                                                                                                      // 9386
                .width(availableWidth)                                                                                 // 9387
                .height(availableHeight)                                                                               // 9388
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));
            stack1                                                                                                     // 9390
                .width(availableWidth)                                                                                 // 9391
                .height(availableHeight)                                                                               // 9392
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));
            stack2                                                                                                     // 9394
                .width(availableWidth)                                                                                 // 9395
                .height(availableHeight)                                                                               // 9396
                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));
                                                                                                                       // 9398
            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                                  // 9399
                                                                                                                       // 9400
            var lines1Wrap = g.select('.lines1Wrap')                                                                   // 9401
                .datum(dataLines1.filter(function(d){return !d.disabled}));                                            // 9402
            var scatters1Wrap = g.select('.scatters1Wrap')                                                             // 9403
                .datum(dataScatters1.filter(function(d){return !d.disabled}));                                         // 9404
            var bars1Wrap = g.select('.bars1Wrap')                                                                     // 9405
                .datum(dataBars1.filter(function(d){return !d.disabled}));                                             // 9406
            var stack1Wrap = g.select('.stack1Wrap')                                                                   // 9407
                .datum(dataStack1.filter(function(d){return !d.disabled}));                                            // 9408
            var lines2Wrap = g.select('.lines2Wrap')                                                                   // 9409
                .datum(dataLines2.filter(function(d){return !d.disabled}));                                            // 9410
            var scatters2Wrap = g.select('.scatters2Wrap')                                                             // 9411
                .datum(dataScatters2.filter(function(d){return !d.disabled}));                                         // 9412
            var bars2Wrap = g.select('.bars2Wrap')                                                                     // 9413
                .datum(dataBars2.filter(function(d){return !d.disabled}));                                             // 9414
            var stack2Wrap = g.select('.stack2Wrap')                                                                   // 9415
                .datum(dataStack2.filter(function(d){return !d.disabled}));                                            // 9416
                                                                                                                       // 9417
            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){   // 9418
                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})                                 // 9419
            }).concat([{x:0, y:0}]) : [];                                                                              // 9420
            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){   // 9421
                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})                                 // 9422
            }).concat([{x:0, y:0}]) : [];                                                                              // 9423
                                                                                                                       // 9424
            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } )) // 9425
                .range([0, availableHeight]);                                                                          // 9426
                                                                                                                       // 9427
            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } )) // 9428
                .range([0, availableHeight]);                                                                          // 9429
                                                                                                                       // 9430
            lines1.yDomain(yScale1.domain());                                                                          // 9431
            scatters1.yDomain(yScale1.domain());                                                                       // 9432
            bars1.yDomain(yScale1.domain());                                                                           // 9433
            stack1.yDomain(yScale1.domain());                                                                          // 9434
                                                                                                                       // 9435
            lines2.yDomain(yScale2.domain());                                                                          // 9436
            scatters2.yDomain(yScale2.domain());                                                                       // 9437
            bars2.yDomain(yScale2.domain());                                                                           // 9438
            stack2.yDomain(yScale2.domain());                                                                          // 9439
                                                                                                                       // 9440
            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}                                             // 9441
            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}                                             // 9442
                                                                                                                       // 9443
            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}                                                // 9444
            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}                                                // 9445
                                                                                                                       // 9446
            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}                                             // 9447
            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}                                             // 9448
                                                                                                                       // 9449
            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}                                    // 9450
            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}                                    // 9451
                                                                                                                       // 9452
            xAxis                                                                                                      // 9453
                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                               // 9454
                .tickSize(-availableHeight, 0);                                                                        // 9455
                                                                                                                       // 9456
            g.select('.nv-x.nv-axis')                                                                                  // 9457
                .attr('transform', 'translate(0,' + availableHeight + ')');                                            // 9458
            d3.transition(g.select('.nv-x.nv-axis'))                                                                   // 9459
                .call(xAxis);                                                                                          // 9460
                                                                                                                       // 9461
            yAxis1                                                                                                     // 9462
                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )                                               // 9463
                .tickSize( -availableWidth, 0);                                                                        // 9464
                                                                                                                       // 9465
                                                                                                                       // 9466
            d3.transition(g.select('.nv-y1.nv-axis'))                                                                  // 9467
                .call(yAxis1);                                                                                         // 9468
                                                                                                                       // 9469
            yAxis2                                                                                                     // 9470
                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )                                               // 9471
                .tickSize( -availableWidth, 0);                                                                        // 9472
                                                                                                                       // 9473
            d3.transition(g.select('.nv-y2.nv-axis'))                                                                  // 9474
                .call(yAxis2);                                                                                         // 9475
                                                                                                                       // 9476
            g.select('.nv-y1.nv-axis')                                                                                 // 9477
                .classed('nv-disabled', series1.length ? false : true)                                                 // 9478
                .attr('transform', 'translate(' + x.range()[0] + ',0)');                                               // 9479
                                                                                                                       // 9480
            g.select('.nv-y2.nv-axis')                                                                                 // 9481
                .classed('nv-disabled', series2.length ? false : true)                                                 // 9482
                .attr('transform', 'translate(' + x.range()[1] + ',0)');                                               // 9483
                                                                                                                       // 9484
            legend.dispatch.on('stateChange', function(newState) {                                                     // 9485
                chart.update();                                                                                        // 9486
            });                                                                                                        // 9487
                                                                                                                       // 9488
            //============================================================                                             // 9489
            // Event Handling/Dispatching                                                                              // 9490
            //------------------------------------------------------------                                             // 9491
                                                                                                                       // 9492
            function mouseover_line(evt) {                                                                             // 9493
                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;                                       // 9494
                evt.value = evt.point.x;                                                                               // 9495
                evt.series = {                                                                                         // 9496
                    value: evt.point.y,                                                                                // 9497
                    color: evt.point.color                                                                             // 9498
                };                                                                                                     // 9499
                tooltip                                                                                                // 9500
                    .duration(100)                                                                                     // 9501
                    .valueFormatter(function(d, i) {                                                                   // 9502
                        return yaxis.tickFormat()(d, i);                                                               // 9503
                    })                                                                                                 // 9504
                    .data(evt)                                                                                         // 9505
                    .position(evt.pos)                                                                                 // 9506
                    .hidden(false);                                                                                    // 9507
            }                                                                                                          // 9508
                                                                                                                       // 9509
            function mouseover_scatter(evt) {                                                                          // 9510
                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;                                       // 9511
                evt.value = evt.point.x;                                                                               // 9512
                evt.series = {                                                                                         // 9513
                    value: evt.point.y,                                                                                // 9514
                    color: evt.point.color                                                                             // 9515
                };                                                                                                     // 9516
                tooltip                                                                                                // 9517
                    .duration(100)                                                                                     // 9518
                    .valueFormatter(function(d, i) {                                                                   // 9519
                        return yaxis.tickFormat()(d, i);                                                               // 9520
                    })                                                                                                 // 9521
                    .data(evt)                                                                                         // 9522
                    .position(evt.pos)                                                                                 // 9523
                    .hidden(false);                                                                                    // 9524
            }                                                                                                          // 9525
                                                                                                                       // 9526
            function mouseover_stack(evt) {                                                                            // 9527
                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;                                       // 9528
                evt.point['x'] = stack1.x()(evt.point);                                                                // 9529
                evt.point['y'] = stack1.y()(evt.point);                                                                // 9530
                tooltip                                                                                                // 9531
                    .duration(100)                                                                                     // 9532
                    .valueFormatter(function(d, i) {                                                                   // 9533
                        return yaxis.tickFormat()(d, i);                                                               // 9534
                    })                                                                                                 // 9535
                    .data(evt)                                                                                         // 9536
                    .position(evt.pos)                                                                                 // 9537
                    .hidden(false);                                                                                    // 9538
            }                                                                                                          // 9539
                                                                                                                       // 9540
            function mouseover_bar(evt) {                                                                              // 9541
                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;                                       // 9542
                                                                                                                       // 9543
                evt.value = bars1.x()(evt.data);                                                                       // 9544
                evt['series'] = {                                                                                      // 9545
                    value: bars1.y()(evt.data),                                                                        // 9546
                    color: evt.color                                                                                   // 9547
                };                                                                                                     // 9548
                tooltip                                                                                                // 9549
                    .duration(0)                                                                                       // 9550
                    .valueFormatter(function(d, i) {                                                                   // 9551
                        return yaxis.tickFormat()(d, i);                                                               // 9552
                    })                                                                                                 // 9553
                    .data(evt)                                                                                         // 9554
                    .hidden(false);                                                                                    // 9555
            }                                                                                                          // 9556
                                                                                                                       // 9557
            lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);                                            // 9558
            lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);                                            // 9559
            lines1.dispatch.on('elementMouseout.tooltip', function(evt) {                                              // 9560
                tooltip.hidden(true)                                                                                   // 9561
            });                                                                                                        // 9562
            lines2.dispatch.on('elementMouseout.tooltip', function(evt) {                                              // 9563
                tooltip.hidden(true)                                                                                   // 9564
            });                                                                                                        // 9565
                                                                                                                       // 9566
            scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);                                      // 9567
            scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);                                      // 9568
            scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {                                           // 9569
                tooltip.hidden(true)                                                                                   // 9570
            });                                                                                                        // 9571
            scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {                                           // 9572
                tooltip.hidden(true)                                                                                   // 9573
            });                                                                                                        // 9574
                                                                                                                       // 9575
            stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);                                           // 9576
            stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);                                           // 9577
            stack1.dispatch.on('elementMouseout.tooltip', function(evt) {                                              // 9578
                tooltip.hidden(true)                                                                                   // 9579
            });                                                                                                        // 9580
            stack2.dispatch.on('elementMouseout.tooltip', function(evt) {                                              // 9581
                tooltip.hidden(true)                                                                                   // 9582
            });                                                                                                        // 9583
                                                                                                                       // 9584
            bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);                                              // 9585
            bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);                                              // 9586
                                                                                                                       // 9587
            bars1.dispatch.on('elementMouseout.tooltip', function(evt) {                                               // 9588
                tooltip.hidden(true);                                                                                  // 9589
            });                                                                                                        // 9590
            bars2.dispatch.on('elementMouseout.tooltip', function(evt) {                                               // 9591
                tooltip.hidden(true);                                                                                  // 9592
            });                                                                                                        // 9593
            bars1.dispatch.on('elementMousemove.tooltip', function(evt) {                                              // 9594
                tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                       // 9595
            });                                                                                                        // 9596
            bars2.dispatch.on('elementMousemove.tooltip', function(evt) {                                              // 9597
                tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                       // 9598
            });                                                                                                        // 9599
                                                                                                                       // 9600
        });                                                                                                            // 9601
                                                                                                                       // 9602
        return chart;                                                                                                  // 9603
    }                                                                                                                  // 9604
                                                                                                                       // 9605
    //============================================================                                                     // 9606
    // Global getters and setters                                                                                      // 9607
    //------------------------------------------------------------                                                     // 9608
                                                                                                                       // 9609
    chart.dispatch = dispatch;                                                                                         // 9610
    chart.legend = legend;                                                                                             // 9611
    chart.lines1 = lines1;                                                                                             // 9612
    chart.lines2 = lines2;                                                                                             // 9613
    chart.scatters1 = scatters1;                                                                                       // 9614
    chart.scatters2 = scatters2;                                                                                       // 9615
    chart.bars1 = bars1;                                                                                               // 9616
    chart.bars2 = bars2;                                                                                               // 9617
    chart.stack1 = stack1;                                                                                             // 9618
    chart.stack2 = stack2;                                                                                             // 9619
    chart.xAxis = xAxis;                                                                                               // 9620
    chart.yAxis1 = yAxis1;                                                                                             // 9621
    chart.yAxis2 = yAxis2;                                                                                             // 9622
    chart.tooltip = tooltip;                                                                                           // 9623
                                                                                                                       // 9624
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 9625
                                                                                                                       // 9626
    chart._options = Object.create({}, {                                                                               // 9627
        // simple options, just get/set the necessary values                                                           // 9628
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 9629
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 9630
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 9631
        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},                             // 9632
        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},                               // 9633
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 9634
        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},                      // 9635
                                                                                                                       // 9636
        // deprecated options                                                                                          // 9637
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 9638
            // deprecated after 1.7.1                                                                                  // 9639
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 9640
            tooltip.enabled(!!_);                                                                                      // 9641
        }},                                                                                                            // 9642
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 9643
            // deprecated after 1.7.1                                                                                  // 9644
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 9645
            tooltip.contentGenerator(_);                                                                               // 9646
        }},                                                                                                            // 9647
                                                                                                                       // 9648
        // options that require extra logic in the setter                                                              // 9649
        margin: {get: function(){return margin;}, set: function(_){                                                    // 9650
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 9651
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 9652
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 9653
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 9654
        }},                                                                                                            // 9655
        color:  {get: function(){return color;}, set: function(_){                                                     // 9656
            color = nv.utils.getColor(_);                                                                              // 9657
        }},                                                                                                            // 9658
        x: {get: function(){return getX;}, set: function(_){                                                           // 9659
            getX = _;                                                                                                  // 9660
            lines1.x(_);                                                                                               // 9661
            lines2.x(_);                                                                                               // 9662
            scatters1.x(_);                                                                                            // 9663
            scatters2.x(_);                                                                                            // 9664
            bars1.x(_);                                                                                                // 9665
            bars2.x(_);                                                                                                // 9666
            stack1.x(_);                                                                                               // 9667
            stack2.x(_);                                                                                               // 9668
        }},                                                                                                            // 9669
        y: {get: function(){return getY;}, set: function(_){                                                           // 9670
            getY = _;                                                                                                  // 9671
            lines1.y(_);                                                                                               // 9672
            lines2.y(_);                                                                                               // 9673
            scatters1.y(_);                                                                                            // 9674
            scatters2.y(_);                                                                                            // 9675
            stack1.y(_);                                                                                               // 9676
            stack2.y(_);                                                                                               // 9677
            bars1.y(_);                                                                                                // 9678
            bars2.y(_);                                                                                                // 9679
        }},                                                                                                            // 9680
        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){                                            // 9681
            useVoronoi=_;                                                                                              // 9682
            lines1.useVoronoi(_);                                                                                      // 9683
            lines2.useVoronoi(_);                                                                                      // 9684
            stack1.useVoronoi(_);                                                                                      // 9685
            stack2.useVoronoi(_);                                                                                      // 9686
        }}                                                                                                             // 9687
    });                                                                                                                // 9688
                                                                                                                       // 9689
    nv.utils.initOptions(chart);                                                                                       // 9690
                                                                                                                       // 9691
    return chart;                                                                                                      // 9692
};                                                                                                                     // 9693
                                                                                                                       // 9694
nv.models.ohlcBar = function() {                                                                                       // 9695
    "use strict";                                                                                                      // 9696
                                                                                                                       // 9697
    //============================================================                                                     // 9698
    // Public Variables with Default Settings                                                                          // 9699
    //------------------------------------------------------------                                                     // 9700
                                                                                                                       // 9701
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 9702
        , width = null                                                                                                 // 9703
        , height = null                                                                                                // 9704
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 9705
        , container = null                                                                                             // 9706
        , x = d3.scale.linear()                                                                                        // 9707
        , y = d3.scale.linear()                                                                                        // 9708
        , getX = function(d) { return d.x }                                                                            // 9709
        , getY = function(d) { return d.y }                                                                            // 9710
        , getOpen = function(d) { return d.open }                                                                      // 9711
        , getClose = function(d) { return d.close }                                                                    // 9712
        , getHigh = function(d) { return d.high }                                                                      // 9713
        , getLow = function(d) { return d.low }                                                                        // 9714
        , forceX = []                                                                                                  // 9715
        , forceY = []                                                                                                  // 9716
        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
        , clipEdge = true                                                                                              // 9718
        , color = nv.utils.defaultColor()                                                                              // 9719
        , interactive = false                                                                                          // 9720
        , xDomain                                                                                                      // 9721
        , yDomain                                                                                                      // 9722
        , xRange                                                                                                       // 9723
        , yRange                                                                                                       // 9724
        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')
        ;                                                                                                              // 9726
                                                                                                                       // 9727
    //============================================================                                                     // 9728
    // Private Variables                                                                                               // 9729
    //------------------------------------------------------------                                                     // 9730
                                                                                                                       // 9731
    function chart(selection) {                                                                                        // 9732
        selection.each(function(data) {                                                                                // 9733
            container = d3.select(this);                                                                               // 9734
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 9735
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 9736
                                                                                                                       // 9737
            nv.utils.initSVG(container);                                                                               // 9738
                                                                                                                       // 9739
            // ohlc bar width.                                                                                         // 9740
            var w = (availableWidth / data[0].values.length) * .9;                                                     // 9741
                                                                                                                       // 9742
            // Setup Scales                                                                                            // 9743
            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));                                  // 9744
                                                                                                                       // 9745
            if (padData)                                                                                               // 9746
                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
            else                                                                                                       // 9748
                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);                                                // 9749
                                                                                                                       // 9750
            y.domain(yDomain || [                                                                                      // 9751
                    d3.min(data[0].values.map(getLow).concat(forceY)),                                                 // 9752
                    d3.max(data[0].values.map(getHigh).concat(forceY))                                                 // 9753
                ]                                                                                                      // 9754
            ).range(yRange || [availableHeight, 0]);                                                                   // 9755
                                                                                                                       // 9756
            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
            if (x.domain()[0] === x.domain()[1])                                                                       // 9758
                x.domain()[0] ?                                                                                        // 9759
                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])             // 9760
                    : x.domain([-1,1]);                                                                                // 9761
                                                                                                                       // 9762
            if (y.domain()[0] === y.domain()[1])                                                                       // 9763
                y.domain()[0] ?                                                                                        // 9764
                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])             // 9765
                    : y.domain([-1,1]);                                                                                // 9766
                                                                                                                       // 9767
            // Setup containers and skeleton of chart                                                                  // 9768
            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);                       // 9769
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');                         // 9770
            var defsEnter = wrapEnter.append('defs');                                                                  // 9771
            var gEnter = wrapEnter.append('g');                                                                        // 9772
            var g = wrap.select('g');                                                                                  // 9773
                                                                                                                       // 9774
            gEnter.append('g').attr('class', 'nv-ticks');                                                              // 9775
                                                                                                                       // 9776
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 9777
                                                                                                                       // 9778
            container                                                                                                  // 9779
                .on('click', function(d,i) {                                                                           // 9780
                    dispatch.chartClick({                                                                              // 9781
                        data: d,                                                                                       // 9782
                        index: i,                                                                                      // 9783
                        pos: d3.event,                                                                                 // 9784
                        id: id                                                                                         // 9785
                    });                                                                                                // 9786
                });                                                                                                    // 9787
                                                                                                                       // 9788
            defsEnter.append('clipPath')                                                                               // 9789
                .attr('id', 'nv-chart-clip-path-' + id)                                                                // 9790
                .append('rect');                                                                                       // 9791
                                                                                                                       // 9792
            wrap.select('#nv-chart-clip-path-' + id + ' rect')                                                         // 9793
                .attr('width', availableWidth)                                                                         // 9794
                .attr('height', availableHeight);                                                                      // 9795
                                                                                                                       // 9796
            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');                             // 9797
                                                                                                                       // 9798
            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')                                                 // 9799
                .data(function(d) { return d });                                                                       // 9800
            ticks.exit().remove();                                                                                     // 9801
                                                                                                                       // 9802
            ticks.enter().append('path')                                                                               // 9803
                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })
                .attr('d', function(d,i) {                                                                             // 9805
                    return 'm0,0l0,'                                                                                   // 9806
                        + (y(getOpen(d,i))                                                                             // 9807
                            - y(getHigh(d,i)))                                                                         // 9808
                        + 'l'                                                                                          // 9809
                        + (-w/2)                                                                                       // 9810
                        + ',0l'                                                                                        // 9811
                        + (w/2)                                                                                        // 9812
                        + ',0l0,'                                                                                      // 9813
                        + (y(getLow(d,i)) - y(getOpen(d,i)))                                                           // 9814
                        + 'l0,'                                                                                        // 9815
                        + (y(getClose(d,i))                                                                            // 9816
                            - y(getLow(d,i)))                                                                          // 9817
                        + 'l'                                                                                          // 9818
                        + (w/2)                                                                                        // 9819
                        + ',0l'                                                                                        // 9820
                        + (-w/2)                                                                                       // 9821
                        + ',0z';                                                                                       // 9822
                })                                                                                                     // 9823
                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })
                .attr('fill', function(d,i) { return color[0]; })                                                      // 9825
                .attr('stroke', function(d,i) { return color[0]; })                                                    // 9826
                .attr('x', 0 )                                                                                         // 9827
                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })                                        // 9828
                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });                               // 9829
                                                                                                                       // 9830
            // the bar colors are controlled by CSS currently                                                          // 9831
            ticks.attr('class', function(d,i,j) {                                                                      // 9832
                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
            });                                                                                                        // 9834
                                                                                                                       // 9835
            d3.transition(ticks)                                                                                       // 9836
                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })
                .attr('d', function(d,i) {                                                                             // 9838
                    var w = (availableWidth / data[0].values.length) * .9;                                             // 9839
                    return 'm0,0l0,'                                                                                   // 9840
                        + (y(getOpen(d,i))                                                                             // 9841
                            - y(getHigh(d,i)))                                                                         // 9842
                        + 'l'                                                                                          // 9843
                        + (-w/2)                                                                                       // 9844
                        + ',0l'                                                                                        // 9845
                        + (w/2)                                                                                        // 9846
                        + ',0l0,'                                                                                      // 9847
                        + (y(getLow(d,i))                                                                              // 9848
                            - y(getOpen(d,i)))                                                                         // 9849
                        + 'l0,'                                                                                        // 9850
                        + (y(getClose(d,i))                                                                            // 9851
                            - y(getLow(d,i)))                                                                          // 9852
                        + 'l'                                                                                          // 9853
                        + (w/2)                                                                                        // 9854
                        + ',0l'                                                                                        // 9855
                        + (-w/2)                                                                                       // 9856
                        + ',0z';                                                                                       // 9857
                });                                                                                                    // 9858
        });                                                                                                            // 9859
                                                                                                                       // 9860
        return chart;                                                                                                  // 9861
    }                                                                                                                  // 9862
                                                                                                                       // 9863
                                                                                                                       // 9864
    //Create methods to allow outside functions to highlight a specific bar.                                           // 9865
    chart.highlightPoint = function(pointIndex, isHoverOver) {                                                         // 9866
        chart.clearHighlights();                                                                                       // 9867
        container.select(".nv-ohlcBar .nv-tick-0-" + pointIndex)                                                       // 9868
            .classed("hover", isHoverOver)                                                                             // 9869
        ;                                                                                                              // 9870
    };                                                                                                                 // 9871
                                                                                                                       // 9872
    chart.clearHighlights = function() {                                                                               // 9873
        container.select(".nv-ohlcBar .nv-tick.hover")                                                                 // 9874
            .classed("hover", false)                                                                                   // 9875
        ;                                                                                                              // 9876
    };                                                                                                                 // 9877
                                                                                                                       // 9878
    //============================================================                                                     // 9879
    // Expose Public Variables                                                                                         // 9880
    //------------------------------------------------------------                                                     // 9881
                                                                                                                       // 9882
    chart.dispatch = dispatch;                                                                                         // 9883
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 9884
                                                                                                                       // 9885
    chart._options = Object.create({}, {                                                                               // 9886
        // simple options, just get/set the necessary values                                                           // 9887
        width:    {get: function(){return width;}, set: function(_){width=_;}},                                        // 9888
        height:   {get: function(){return height;}, set: function(_){height=_;}},                                      // 9889
        xScale:   {get: function(){return x;}, set: function(_){x=_;}},                                                // 9890
        yScale:   {get: function(){return y;}, set: function(_){y=_;}},                                                // 9891
        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                    // 9892
        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                    // 9893
        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},                                      // 9894
        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},                                      // 9895
        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},                                      // 9896
        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},                                      // 9897
        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},                                    // 9898
        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},                                  // 9899
        id:       {get: function(){return id;}, set: function(_){id=_;}},                                              // 9900
        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},                         // 9901
                                                                                                                       // 9902
        x:     {get: function(){return getX;}, set: function(_){getX=_;}},                                             // 9903
        y:     {get: function(){return getY;}, set: function(_){getY=_;}},                                             // 9904
        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},                                     // 9905
        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},                                   // 9906
        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},                                       // 9907
        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},                                         // 9908
                                                                                                                       // 9909
        // options that require extra logic in the setter                                                              // 9910
        margin: {get: function(){return margin;}, set: function(_){                                                    // 9911
            margin.top    = _.top    != undefined ? _.top    : margin.top;                                             // 9912
            margin.right  = _.right  != undefined ? _.right  : margin.right;                                           // 9913
            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;                                          // 9914
            margin.left   = _.left   != undefined ? _.left   : margin.left;                                            // 9915
        }},                                                                                                            // 9916
        color:  {get: function(){return color;}, set: function(_){                                                     // 9917
            color = nv.utils.getColor(_);                                                                              // 9918
        }}                                                                                                             // 9919
    });                                                                                                                // 9920
                                                                                                                       // 9921
    nv.utils.initOptions(chart);                                                                                       // 9922
    return chart;                                                                                                      // 9923
};                                                                                                                     // 9924
// Code adapted from Jason Davies' "Parallel Coordinates"                                                              // 9925
// http://bl.ocks.org/jasondavies/1341281                                                                              // 9926
nv.models.parallelCoordinates = function() {                                                                           // 9927
    "use strict";                                                                                                      // 9928
                                                                                                                       // 9929
    //============================================================                                                     // 9930
    // Public Variables with Default Settings                                                                          // 9931
    //------------------------------------------------------------                                                     // 9932
                                                                                                                       // 9933
    var margin = {top: 30, right: 0, bottom: 10, left: 0}                                                              // 9934
        , width = null                                                                                                 // 9935
        , height = null                                                                                                // 9936
        , x = d3.scale.ordinal()                                                                                       // 9937
        , y = {}                                                                                                       // 9938
        , dimensionNames = []                                                                                          // 9939
        , dimensionFormats = []                                                                                        // 9940
        , color = nv.utils.defaultColor()                                                                              // 9941
        , filters = []                                                                                                 // 9942
        , active = []                                                                                                  // 9943
        , dragging = []                                                                                                // 9944
        , lineTension = 1                                                                                              // 9945
        , dispatch = d3.dispatch('brush', 'elementMouseover', 'elementMouseout')                                       // 9946
        ;                                                                                                              // 9947
                                                                                                                       // 9948
    //============================================================                                                     // 9949
    // Private Variables                                                                                               // 9950
    //------------------------------------------------------------                                                     // 9951
                                                                                                                       // 9952
    function chart(selection) {                                                                                        // 9953
        selection.each(function(data) {                                                                                // 9954
            var container = d3.select(this);                                                                           // 9955
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 9956
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 9957
                                                                                                                       // 9958
            nv.utils.initSVG(container);                                                                               // 9959
                                                                                                                       // 9960
            active = data; //set all active before first brush call                                                    // 9961
                                                                                                                       // 9962
            // Setup Scales                                                                                            // 9963
            x.rangePoints([0, availableWidth], 1).domain(dimensionNames);                                              // 9964
                                                                                                                       // 9965
            //Set as true if all values on an axis are missing.                                                        // 9966
            var onlyNanValues = {};                                                                                    // 9967
            // Extract the list of dimensions and create a scale for each.                                             // 9968
            dimensionNames.forEach(function(d) {                                                                       // 9969
                var extent = d3.extent(data, function(p) { return +p[d]; });                                           // 9970
                onlyNanValues[d] = false;                                                                              // 9971
                //If there is no values to display on an axis, set the extent to 0                                     // 9972
                if (extent[0] === undefined) {                                                                         // 9973
                    onlyNanValues[d] = true;                                                                           // 9974
                    extent[0] = 0;                                                                                     // 9975
                    extent[1] = 0;                                                                                     // 9976
                }                                                                                                      // 9977
                //Scale axis if there is only one value                                                                // 9978
                if (extent[0] === extent[1]) {                                                                         // 9979
                    extent[0] = extent[0] - 1;                                                                         // 9980
                    extent[1] = extent[1] + 1;                                                                         // 9981
                }                                                                                                      // 9982
                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display "undefined values" text.
                //The remaining 10% are used to display the missingValue line.                                         // 9984
                y[d] = d3.scale.linear()                                                                               // 9985
                    .domain(extent)                                                                                    // 9986
                    .range([(availableHeight - 12) * 0.9, 0]);                                                         // 9987
                                                                                                                       // 9988
                y[d].brush = d3.svg.brush().y(y[d]).on('brush', brush);                                                // 9989
                                                                                                                       // 9990
                return d != 'name';                                                                                    // 9991
            });                                                                                                        // 9992
                                                                                                                       // 9993
            // Setup containers and skeleton of chart                                                                  // 9994
            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);                           // 9995
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');             // 9996
            var gEnter = wrapEnter.append('g');                                                                        // 9997
            var g = wrap.select('g');                                                                                  // 9998
                                                                                                                       // 9999
            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');                                     // 10000
            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');                                     // 10001
            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');                              // 10002
                                                                                                                       // 10003
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 10004
                                                                                                                       // 10005
            var line = d3.svg.line().interpolate('cardinal').tension(lineTension),                                     // 10006
                axis = d3.svg.axis().orient('left'),                                                                   // 10007
                axisDrag = d3.behavior.drag()                                                                          // 10008
                        .on('dragstart', dragStart)                                                                    // 10009
                        .on('drag', dragMove)                                                                          // 10010
                        .on('dragend', dragEnd);                                                                       // 10011
                                                                                                                       // 10012
            //Add missing value line at the bottom of the chart                                                        // 10013
            var missingValuesline, missingValueslineText;                                                              // 10014
            var step = x.range()[1] - x.range()[0];                                                                    // 10015
            var axisWithMissingValues = [];                                                                            // 10016
            var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];      // 10017
            missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);                  // 10018
            missingValuesline.enter().append('line');                                                                  // 10019
            missingValuesline.exit().remove();                                                                         // 10020
            missingValuesline.attr("x1", function(d) { return d[0]; })                                                 // 10021
                    .attr("y1", function(d) { return d[1]; })                                                          // 10022
                    .attr("x2", function(d) { return d[2]; })                                                          // 10023
                    .attr("y2", function(d) { return d[3]; });                                                         // 10024
                                                                                                                       // 10025
            //Add the text "undefined values" under the missing value line                                             // 10026
            missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data(["undefined values"]);    // 10027
            missingValueslineText.append('text').data(["undefined values"]);                                           // 10028
            missingValueslineText.enter().append('text');                                                              // 10029
            missingValueslineText.exit().remove();                                                                     // 10030
            missingValueslineText.attr("y", availableHeight)                                                           // 10031
                    //To have the text right align with the missingValues line, substract 92 representing the text size.
                    .attr("x", availableWidth - 92 - step / 2)                                                         // 10033
                    .text(function(d) { return d; });                                                                  // 10034
                                                                                                                       // 10035
            // Add grey background lines for context.                                                                  // 10036
            var background = wrap.select('.background').selectAll('path').data(data);                                  // 10037
            background.enter().append('path');                                                                         // 10038
            background.exit().remove();                                                                                // 10039
            background.attr('d', path);                                                                                // 10040
                                                                                                                       // 10041
            // Add blue foreground lines for focus.                                                                    // 10042
            var foreground = wrap.select('.foreground').selectAll('path').data(data);                                  // 10043
            foreground.enter().append('path')                                                                          // 10044
            foreground.exit().remove();                                                                                // 10045
            foreground.attr('d', path).attr('stroke', color);                                                          // 10046
            foreground.on("mouseover", function (d, i) {                                                               // 10047
                d3.select(this).classed('hover', true);                                                                // 10048
                dispatch.elementMouseover({                                                                            // 10049
                    label: d.name,                                                                                     // 10050
                    data: d.data,                                                                                      // 10051
                    index: i,                                                                                          // 10052
                    pos: [d3.mouse(this.parentNode)[0], d3.mouse(this.parentNode)[1]]                                  // 10053
                });                                                                                                    // 10054
                                                                                                                       // 10055
            });                                                                                                        // 10056
            foreground.on("mouseout", function (d, i) {                                                                // 10057
                d3.select(this).classed('hover', false);                                                               // 10058
                dispatch.elementMouseout({                                                                             // 10059
                    label: d.name,                                                                                     // 10060
                    data: d.data,                                                                                      // 10061
                    index: i                                                                                           // 10062
                });                                                                                                    // 10063
            });                                                                                                        // 10064
                                                                                                                       // 10065
            // Add a group element for each dimension.                                                                 // 10066
            var dimensions = g.selectAll('.dimension').data(dimensionNames);                                           // 10067
            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');    // 10068
            dimensionsEnter.append('g').attr('class', 'nv-parallelCoordinates nv-axis');                               // 10069
            dimensionsEnter.append('g').attr('class', 'nv-parallelCoordinates-brush');                                 // 10070
            dimensionsEnter.append('text').attr('class', 'nv-parallelCoordinates nv-label');                           // 10071
                                                                                                                       // 10072
            dimensions.attr('transform', function(d) { return 'translate(' + x(d) + ',0)'; });                         // 10073
            dimensions.exit().remove();                                                                                // 10074
                                                                                                                       // 10075
            // Add an axis and title.                                                                                  // 10076
            dimensions.select('.nv-label')                                                                             // 10077
                .style("cursor", "move")                                                                               // 10078
                .attr('dy', '-1em')                                                                                    // 10079
                .attr('text-anchor', 'middle')                                                                         // 10080
                .text(String)                                                                                          // 10081
                .on("mouseover", function(d, i) {                                                                      // 10082
                    dispatch.elementMouseover({                                                                        // 10083
                        dim: d,                                                                                        // 10084
                        pos: [d3.mouse(this.parentNode.parentNode)[0], d3.mouse(this.parentNode.parentNode)[1]]        // 10085
                    });                                                                                                // 10086
                })                                                                                                     // 10087
                .on("mouseout", function(d, i) {                                                                       // 10088
                    dispatch.elementMouseout({                                                                         // 10089
                        dim: d                                                                                         // 10090
                    });                                                                                                // 10091
                })                                                                                                     // 10092
                .call(axisDrag);                                                                                       // 10093
                                                                                                                       // 10094
            dimensions.select('.nv-axis')                                                                              // 10095
                .each(function (d, i) {                                                                                // 10096
                    d3.select(this).call(axis.scale(y[d]).tickFormat(d3.format(dimensionFormats[i])));                 // 10097
                });                                                                                                    // 10098
                                                                                                                       // 10099
                dimensions.select('.nv-parallelCoordinates-brush')                                                     // 10100
                .each(function (d) {                                                                                   // 10101
                    d3.select(this).call(y[d].brush);                                                                  // 10102
                })                                                                                                     // 10103
                .selectAll('rect')                                                                                     // 10104
                .attr('x', -8)                                                                                         // 10105
                .attr('width', 16);                                                                                    // 10106
                                                                                                                       // 10107
            // Returns the path for a given data point.                                                                // 10108
            function path(d) {                                                                                         // 10109
                return line(dimensionNames.map(function (p) {                                                          // 10110
                    //If value if missing, put the value on the missing value line                                     // 10111
                    if(isNaN(d[p]) || isNaN(parseFloat(d[p]))) {                                                       // 10112
                        var domain = y[p].domain();                                                                    // 10113
                        var range = y[p].range();                                                                      // 10114
                        var min = domain[0] - (domain[1] - domain[0]) / 9;                                             // 10115
                                                                                                                       // 10116
                        //If it's not already the case, allow brush to select undefined values                         // 10117
                        if(axisWithMissingValues.indexOf(p) < 0) {                                                     // 10118
                                                                                                                       // 10119
                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);
                            y[p].brush.y(newscale);                                                                    // 10121
                            axisWithMissingValues.push(p);                                                             // 10122
                        }                                                                                              // 10123
                                                                                                                       // 10124
                        return [x(p), y[p](min)];                                                                      // 10125
                    }                                                                                                  // 10126
                                                                                                                       // 10127
                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.    // 10128
                    if(axisWithMissingValues.length > 0) {                                                             // 10129
                        missingValuesline.style("display", "inline");                                                  // 10130
                        missingValueslineText.style("display", "inline");                                              // 10131
                    } else {                                                                                           // 10132
                        missingValuesline.style("display", "none");                                                    // 10133
                        missingValueslineText.style("display", "none");                                                // 10134
                    }                                                                                                  // 10135
                                                                                                                       // 10136
                     return [x(p), y[p](d[p])];                                                                        // 10137
                }));                                                                                                   // 10138
            }                                                                                                          // 10139
                                                                                                                       // 10140
            // Handles a brush event, toggling the display of foreground lines.                                        // 10141
            function brush() {                                                                                         // 10142
                var actives = dimensionNames.filter(function(p) { return !y[p].brush.empty(); }),                      // 10143
                    extents = actives.map(function(p) { return y[p].brush.extent(); });                                // 10144
                                                                                                                       // 10145
                filters = []; //erase current filters                                                                  // 10146
                actives.forEach(function(d,i) {                                                                        // 10147
                    filters[i] = {                                                                                     // 10148
                        dimension: d,                                                                                  // 10149
                        extent: extents[i]                                                                             // 10150
                    }                                                                                                  // 10151
                });                                                                                                    // 10152
                                                                                                                       // 10153
                active = []; //erase current active list                                                               // 10154
                foreground.style('display', function(d) {                                                              // 10155
                    var isActive = actives.every(function(p, i) {                                                      // 10156
                        if(isNaN(d[p]) && extents[i][0] == y[p].brush.y().domain()[0]) return true;                    // 10157
                        return extents[i][0] <= d[p] && d[p] <= extents[i][1];                                         // 10158
                    });                                                                                                // 10159
                    if (isActive) active.push(d);                                                                      // 10160
                    return isActive ? null : 'none';                                                                   // 10161
                });                                                                                                    // 10162
                                                                                                                       // 10163
                dispatch.brush({                                                                                       // 10164
                    filters: filters,                                                                                  // 10165
                    active: active                                                                                     // 10166
                });                                                                                                    // 10167
            }                                                                                                          // 10168
                                                                                                                       // 10169
            function dragStart(d, i) {                                                                                 // 10170
                dragging[d] = this.parentNode.__origin__ = x(d);                                                       // 10171
                background.attr("visibility", "hidden");                                                               // 10172
                                                                                                                       // 10173
            }                                                                                                          // 10174
                                                                                                                       // 10175
            function dragMove(d, i) {                                                                                  // 10176
                dragging[d] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));         // 10177
                foreground.attr("d", path);                                                                            // 10178
                dimensionNames.sort(function (a, b) { return position(a) - position(b); });                            // 10179
                x.domain(dimensionNames);                                                                              // 10180
                dimensions.attr("transform", function(d) { return "translate(" + position(d) + ")"; });                // 10181
            }                                                                                                          // 10182
                                                                                                                       // 10183
            function dragEnd(d, i) {                                                                                   // 10184
                delete this.parentNode.__origin__;                                                                     // 10185
                delete dragging[d];                                                                                    // 10186
                d3.select(this.parentNode).attr("transform", "translate(" + x(d) + ")");                               // 10187
                foreground                                                                                             // 10188
                  .attr("d", path);                                                                                    // 10189
                background                                                                                             // 10190
                  .attr("d", path)                                                                                     // 10191
                  .attr("visibility", null);                                                                           // 10192
                                                                                                                       // 10193
            }                                                                                                          // 10194
                                                                                                                       // 10195
            function position(d) {                                                                                     // 10196
                var v = dragging[d];                                                                                   // 10197
                return v == null ? x(d) : v;                                                                           // 10198
            }                                                                                                          // 10199
        });                                                                                                            // 10200
                                                                                                                       // 10201
        return chart;                                                                                                  // 10202
    }                                                                                                                  // 10203
                                                                                                                       // 10204
    //============================================================                                                     // 10205
    // Expose Public Variables                                                                                         // 10206
    //------------------------------------------------------------                                                     // 10207
                                                                                                                       // 10208
    chart.dispatch = dispatch;                                                                                         // 10209
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 10210
                                                                                                                       // 10211
    chart._options = Object.create({}, {                                                                               // 10212
        // simple options, just get/set the necessary values                                                           // 10213
        width:         {get: function(){return width;},           set: function(_){width= _;}},                        // 10214
        height:        {get: function(){return height;},          set: function(_){height= _;}},                       // 10215
        dimensionNames: {get: function() { return dimensionNames;}, set: function(_){dimensionNames= _;}},             // 10216
        dimensionFormats : {get: function(){return dimensionFormats;}, set: function (_){dimensionFormats=_;}},        // 10217
        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},                 // 10218
                                                                                                                       // 10219
        // deprecated options                                                                                          // 10220
        dimensions: {get: function (){return dimensionNames;}, set: function(_){                                       // 10221
            // deprecated after 1.8.1                                                                                  // 10222
            nv.deprecated('dimensions', 'use dimensionNames instead');                                                 // 10223
            dimensionNames = _;                                                                                        // 10224
        }},                                                                                                            // 10225
                                                                                                                       // 10226
        // options that require extra logic in the setter                                                              // 10227
        margin: {get: function(){return margin;}, set: function(_){                                                    // 10228
            margin.top    =  _.top    !== undefined ? _.top    : margin.top;                                           // 10229
            margin.right  =  _.right  !== undefined ? _.right  : margin.right;                                         // 10230
            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;                                        // 10231
            margin.left   =  _.left   !== undefined ? _.left   : margin.left;                                          // 10232
        }},                                                                                                            // 10233
        color:  {get: function(){return color;}, set: function(_){                                                     // 10234
            color = nv.utils.getColor(_);                                                                              // 10235
        }}                                                                                                             // 10236
    });                                                                                                                // 10237
                                                                                                                       // 10238
    nv.utils.initOptions(chart);                                                                                       // 10239
    return chart;                                                                                                      // 10240
};                                                                                                                     // 10241
nv.models.pie = function() {                                                                                           // 10242
    "use strict";                                                                                                      // 10243
                                                                                                                       // 10244
    //============================================================                                                     // 10245
    // Public Variables with Default Settings                                                                          // 10246
    //------------------------------------------------------------                                                     // 10247
                                                                                                                       // 10248
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 10249
        , width = 500                                                                                                  // 10250
        , height = 500                                                                                                 // 10251
        , getX = function(d) { return d.x }                                                                            // 10252
        , getY = function(d) { return d.y }                                                                            // 10253
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 10254
        , container = null                                                                                             // 10255
        , color = nv.utils.defaultColor()                                                                              // 10256
        , valueFormat = d3.format(',.2f')                                                                              // 10257
        , showLabels = true                                                                                            // 10258
        , labelsOutside = false                                                                                        // 10259
        , labelType = "key"                                                                                            // 10260
        , labelThreshold = .02 //if slice percentage is under this, don't show label                                   // 10261
        , donut = false                                                                                                // 10262
        , title = false                                                                                                // 10263
        , growOnHover = true                                                                                           // 10264
        , titleOffset = 0                                                                                              // 10265
        , labelSunbeamLayout = false                                                                                   // 10266
        , startAngle = false                                                                                           // 10267
        , padAngle = false                                                                                             // 10268
        , endAngle = false                                                                                             // 10269
        , cornerRadius = 0                                                                                             // 10270
        , donutRatio = 0.5                                                                                             // 10271
        , arcsRadius = []                                                                                              // 10272
        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
        ;                                                                                                              // 10274
                                                                                                                       // 10275
    var arcs = [];                                                                                                     // 10276
    var arcsOver = [];                                                                                                 // 10277
                                                                                                                       // 10278
    //============================================================                                                     // 10279
    // chart function                                                                                                  // 10280
    //------------------------------------------------------------                                                     // 10281
                                                                                                                       // 10282
    var renderWatch = nv.utils.renderWatch(dispatch);                                                                  // 10283
                                                                                                                       // 10284
    function chart(selection) {                                                                                        // 10285
        renderWatch.reset();                                                                                           // 10286
        selection.each(function(data) {                                                                                // 10287
            var availableWidth = width - margin.left - margin.right                                                    // 10288
                , availableHeight = height - margin.top - margin.bottom                                                // 10289
                , radius = Math.min(availableWidth, availableHeight) / 2                                               // 10290
                , arcsRadiusOuter = []                                                                                 // 10291
                , arcsRadiusInner = []                                                                                 // 10292
                ;                                                                                                      // 10293
                                                                                                                       // 10294
            container = d3.select(this)                                                                                // 10295
            if (arcsRadius.length === 0) {                                                                             // 10296
                var outer = radius - radius / 5;                                                                       // 10297
                var inner = donutRatio * radius;                                                                       // 10298
                for (var i = 0; i < data[0].length; i++) {                                                             // 10299
                    arcsRadiusOuter.push(outer);                                                                       // 10300
                    arcsRadiusInner.push(inner);                                                                       // 10301
                }                                                                                                      // 10302
            } else {                                                                                                   // 10303
                arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });           // 10304
                arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });           // 10305
                donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));                 // 10306
            }                                                                                                          // 10307
            nv.utils.initSVG(container);                                                                               // 10308
                                                                                                                       // 10309
            // Setup containers and skeleton of chart                                                                  // 10310
            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);                                              // 10311
            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);               // 10312
            var gEnter = wrapEnter.append('g');                                                                        // 10313
            var g = wrap.select('g');                                                                                  // 10314
            var g_pie = gEnter.append('g').attr('class', 'nv-pie');                                                    // 10315
            gEnter.append('g').attr('class', 'nv-pieLabels');                                                          // 10316
                                                                                                                       // 10317
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 10318
            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
                                                                                                                       // 10321
            //                                                                                                         // 10322
            container.on('click', function(d,i) {                                                                      // 10323
                dispatch.chartClick({                                                                                  // 10324
                    data: d,                                                                                           // 10325
                    index: i,                                                                                          // 10326
                    pos: d3.event,                                                                                     // 10327
                    id: id                                                                                             // 10328
                });                                                                                                    // 10329
            });                                                                                                        // 10330
                                                                                                                       // 10331
            arcs = [];                                                                                                 // 10332
            arcsOver = [];                                                                                             // 10333
            for (var i = 0; i < data[0].length; i++) {                                                                 // 10334
                                                                                                                       // 10335
                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);                                                // 10336
                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);                                        // 10337
                                                                                                                       // 10338
                if (startAngle !== false) {                                                                            // 10339
                    arc.startAngle(startAngle);                                                                        // 10340
                    arcOver.startAngle(startAngle);                                                                    // 10341
                }                                                                                                      // 10342
                if (endAngle !== false) {                                                                              // 10343
                    arc.endAngle(endAngle);                                                                            // 10344
                    arcOver.endAngle(endAngle);                                                                        // 10345
                }                                                                                                      // 10346
                if (donut) {                                                                                           // 10347
                    arc.innerRadius(arcsRadiusInner[i]);                                                               // 10348
                    arcOver.innerRadius(arcsRadiusInner[i]);                                                           // 10349
                }                                                                                                      // 10350
                                                                                                                       // 10351
                if (arc.cornerRadius && cornerRadius) {                                                                // 10352
                    arc.cornerRadius(cornerRadius);                                                                    // 10353
                    arcOver.cornerRadius(cornerRadius);                                                                // 10354
                }                                                                                                      // 10355
                                                                                                                       // 10356
                arcs.push(arc);                                                                                        // 10357
                arcsOver.push(arcOver);                                                                                // 10358
            }                                                                                                          // 10359
                                                                                                                       // 10360
            // Setup the Pie chart and choose the data element                                                         // 10361
            var pie = d3.layout.pie()                                                                                  // 10362
                .sort(null)                                                                                            // 10363
                .value(function(d) { return d.disabled ? 0 : getY(d) });                                               // 10364
                                                                                                                       // 10365
            // padAngle added in d3 3.5                                                                                // 10366
            if (pie.padAngle && padAngle) {                                                                            // 10367
                pie.padAngle(padAngle);                                                                                // 10368
            }                                                                                                          // 10369
                                                                                                                       // 10370
            // if title is specified and donut, put it in the middle                                                   // 10371
            if (donut && title) {                                                                                      // 10372
                g_pie.append("text").attr('class', 'nv-pie-title');                                                    // 10373
                                                                                                                       // 10374
                wrap.select('.nv-pie-title')                                                                           // 10375
                    .style("text-anchor", "middle")                                                                    // 10376
                    .text(function (d) {                                                                               // 10377
                        return title;                                                                                  // 10378
                    })                                                                                                 // 10379
                    .style("font-size", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + "px")
                    .attr("dy", "0.35em") // trick to vertically center text                                           // 10381
                    .attr('transform', function(d, i) {                                                                // 10382
                        return 'translate(0, '+ titleOffset + ')';                                                     // 10383
                    });                                                                                                // 10384
            }                                                                                                          // 10385
                                                                                                                       // 10386
            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);                                      // 10387
            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);                             // 10388
                                                                                                                       // 10389
            slices.exit().remove();                                                                                    // 10390
            pieLabels.exit().remove();                                                                                 // 10391
                                                                                                                       // 10392
            var ae = slices.enter().append('g');                                                                       // 10393
            ae.attr('class', 'nv-slice');                                                                              // 10394
            ae.on('mouseover', function(d, i) {                                                                        // 10395
                d3.select(this).classed('hover', true);                                                                // 10396
                if (growOnHover) {                                                                                     // 10397
                    d3.select(this).select("path").transition()                                                        // 10398
                        .duration(70)                                                                                  // 10399
                        .attr("d", arcsOver[i]);                                                                       // 10400
                }                                                                                                      // 10401
                dispatch.elementMouseover({                                                                            // 10402
                    data: d.data,                                                                                      // 10403
                    index: i,                                                                                          // 10404
                    color: d3.select(this).style("fill")                                                               // 10405
                });                                                                                                    // 10406
            });                                                                                                        // 10407
            ae.on('mouseout', function(d, i) {                                                                         // 10408
                d3.select(this).classed('hover', false);                                                               // 10409
                if (growOnHover) {                                                                                     // 10410
                    d3.select(this).select("path").transition()                                                        // 10411
                        .duration(50)                                                                                  // 10412
                        .attr("d", arcs[i]);                                                                           // 10413
                }                                                                                                      // 10414
                dispatch.elementMouseout({data: d.data, index: i});                                                    // 10415
            });                                                                                                        // 10416
            ae.on('mousemove', function(d, i) {                                                                        // 10417
                dispatch.elementMousemove({data: d.data, index: i});                                                   // 10418
            });                                                                                                        // 10419
            ae.on('click', function(d, i) {                                                                            // 10420
                dispatch.elementClick({                                                                                // 10421
                    data: d.data,                                                                                      // 10422
                    index: i,                                                                                          // 10423
                    color: d3.select(this).style("fill")                                                               // 10424
                });                                                                                                    // 10425
            });                                                                                                        // 10426
            ae.on('dblclick', function(d, i) {                                                                         // 10427
                dispatch.elementDblClick({                                                                             // 10428
                    data: d.data,                                                                                      // 10429
                    index: i,                                                                                          // 10430
                    color: d3.select(this).style("fill")                                                               // 10431
                });                                                                                                    // 10432
            });                                                                                                        // 10433
                                                                                                                       // 10434
            slices.attr('fill', function(d,i) { return color(d.data, i); });                                           // 10435
            slices.attr('stroke', function(d,i) { return color(d.data, i); });                                         // 10436
                                                                                                                       // 10437
            var paths = ae.append('path').each(function(d) {                                                           // 10438
                this._current = d;                                                                                     // 10439
            });                                                                                                        // 10440
                                                                                                                       // 10441
            slices.select('path')                                                                                      // 10442
                .transition()                                                                                          // 10443
                .attr('d', function (d, i) { return arcs[i](d); })                                                     // 10444
                .attrTween('d', arcTween);                                                                             // 10445
                                                                                                                       // 10446
            if (showLabels) {                                                                                          // 10447
                // This does the normal label                                                                          // 10448
                var labelsArc = [];                                                                                    // 10449
                for (var i = 0; i < data[0].length; i++) {                                                             // 10450
                    labelsArc.push(arcs[i]);                                                                           // 10451
                                                                                                                       // 10452
                    if (labelsOutside) {                                                                               // 10453
                        if (donut) {                                                                                   // 10454
                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());                            // 10455
                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);                             // 10456
                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);                                   // 10457
                        }                                                                                              // 10458
                    } else if (!donut) {                                                                               // 10459
                            labelsArc[i].innerRadius(0);                                                               // 10460
                    }                                                                                                  // 10461
                }                                                                                                      // 10462
                                                                                                                       // 10463
                pieLabels.enter().append("g").classed("nv-label",true).each(function(d,i) {                            // 10464
                    var group = d3.select(this);                                                                       // 10465
                                                                                                                       // 10466
                    group.attr('transform', function (d, i) {                                                          // 10467
                        if (labelSunbeamLayout) {                                                                      // 10468
                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate                           // 10469
                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate                           // 10470
                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);                       // 10471
                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {                                           // 10472
                                rotateAngle -= 90;                                                                     // 10473
                            } else {                                                                                   // 10474
                                rotateAngle += 90;                                                                     // 10475
                            }                                                                                          // 10476
                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';          // 10477
                        } else {                                                                                       // 10478
                            d.outerRadius = radius + 10; // Set Outer Coordinate                                       // 10479
                            d.innerRadius = radius + 15; // Set Inner Coordinate                                       // 10480
                            return 'translate(' + labelsArc[i].centroid(d) + ')'                                       // 10481
                        }                                                                                              // 10482
                    });                                                                                                // 10483
                                                                                                                       // 10484
                    group.append('rect')                                                                               // 10485
                        .style('stroke', '#fff')                                                                       // 10486
                        .style('fill', '#fff')                                                                         // 10487
                        .attr("rx", 3)                                                                                 // 10488
                        .attr("ry", 3);                                                                                // 10489
                                                                                                                       // 10490
                    group.append('text')                                                                               // 10491
                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned
                        .style('fill', '#000')                                                                         // 10493
                });                                                                                                    // 10494
                                                                                                                       // 10495
                var labelLocationHash = {};                                                                            // 10496
                var avgHeight = 14;                                                                                    // 10497
                var avgWidth = 140;                                                                                    // 10498
                var createHashKey = function(coordinates) {                                                            // 10499
                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;
                };                                                                                                     // 10501
                                                                                                                       // 10502
                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {               // 10503
                    if (labelSunbeamLayout) {                                                                          // 10504
                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate                               // 10505
                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate                               // 10506
                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);                           // 10507
                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {                                               // 10508
                            rotateAngle -= 90;                                                                         // 10509
                        } else {                                                                                       // 10510
                            rotateAngle += 90;                                                                         // 10511
                        }                                                                                              // 10512
                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';              // 10513
                    } else {                                                                                           // 10514
                        d.outerRadius = radius + 10; // Set Outer Coordinate                                           // 10515
                        d.innerRadius = radius + 15; // Set Inner Coordinate                                           // 10516
                                                                                                                       // 10517
                        /*                                                                                             // 10518
                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.         // 10519
                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.           // 10520
                        Adjust the label's y-position to remove the overlap.                                           // 10521
                        */                                                                                             // 10522
                        var center = labelsArc[i].centroid(d);                                                         // 10523
                        if (d.value) {                                                                                 // 10524
                            var hashKey = createHashKey(center);                                                       // 10525
                            if (labelLocationHash[hashKey]) {                                                          // 10526
                                center[1] -= avgHeight;                                                                // 10527
                            }                                                                                          // 10528
                            labelLocationHash[createHashKey(center)] = true;                                           // 10529
                        }                                                                                              // 10530
                        return 'translate(' + center + ')'                                                             // 10531
                    }                                                                                                  // 10532
                });                                                                                                    // 10533
                                                                                                                       // 10534
                pieLabels.select(".nv-label text")                                                                     // 10535
                    .style('text-anchor', function(d,i) {                                                              // 10536
                        //center the text on it's origin or begin/end if orthogonal aligned                            // 10537
                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';
                    })                                                                                                 // 10539
                    .text(function(d, i) {                                                                             // 10540
                        var percent = (d.endAngle - d.startAngle) / (2 * Math.PI);                                     // 10541
                        var label = '';                                                                                // 10542
                        if (!d.value || percent < labelThreshold) return '';                                           // 10543
                                                                                                                       // 10544
                        if(typeof labelType === 'function') {                                                          // 10545
                            label = labelType(d, i, {                                                                  // 10546
                                'key': getX(d.data),                                                                   // 10547
                                'value': getY(d.data),                                                                 // 10548
                                'percent': valueFormat(percent)                                                        // 10549
                            });                                                                                        // 10550
                        } else {                                                                                       // 10551
                            switch (labelType) {                                                                       // 10552
                                case 'key':                                                                            // 10553
                                    label = getX(d.data);                                                              // 10554
                                    break;                                                                             // 10555
                                case 'value':                                                                          // 10556
                                    label = valueFormat(getY(d.data));                                                 // 10557
                                    break;                                                                             // 10558
                                case 'percent':                                                                        // 10559
                                    label = d3.format('%')(percent);                                                   // 10560
                                    break;                                                                             // 10561
                            }                                                                                          // 10562
                        }                                                                                              // 10563
                        return label;                                                                                  // 10564
                    })                                                                                                 // 10565
                ;                                                                                                      // 10566
            }                                                                                                          // 10567
                                                                                                                       // 10568
                                                                                                                       // 10569
            // Computes the angle of an arc, converting from radians to degrees.                                       // 10570
            function angle(d) {                                                                                        // 10571
                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;                                               // 10572
                return a > 90 ? a - 180 : a;                                                                           // 10573
            }                                                                                                          // 10574
                                                                                                                       // 10575
            function arcTween(a, idx) {                                                                                // 10576
                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;                                                       // 10577
                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;                                                 // 10578
                if (!donut) a.innerRadius = 0;                                                                         // 10579
                var i = d3.interpolate(this._current, a);                                                              // 10580
                this._current = i(0);                                                                                  // 10581
                return function (t) {                                                                                  // 10582
                    return arcs[idx](i(t));                                                                            // 10583
                };                                                                                                     // 10584
            }                                                                                                          // 10585
        });                                                                                                            // 10586
                                                                                                                       // 10587
        renderWatch.renderEnd('pie immediate');                                                                        // 10588
        return chart;                                                                                                  // 10589
    }                                                                                                                  // 10590
                                                                                                                       // 10591
    //============================================================                                                     // 10592
    // Expose Public Variables                                                                                         // 10593
    //------------------------------------------------------------                                                     // 10594
                                                                                                                       // 10595
    chart.dispatch = dispatch;                                                                                         // 10596
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 10597
                                                                                                                       // 10598
    chart._options = Object.create({}, {                                                                               // 10599
        // simple options, just get/set the necessary values                                                           // 10600
        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },                // 10601
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 10602
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 10603
        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},                            // 10604
        title:      {get: function(){return title;}, set: function(_){title=_;}},                                      // 10605
        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},                      // 10606
        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},                // 10607
        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},                      // 10608
        x:          {get: function(){return getX;}, set: function(_){getX=_;}},                                        // 10609
        id:         {get: function(){return id;}, set: function(_){id=_;}},                                            // 10610
        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},                                // 10611
        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},                            // 10612
        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},                                // 10613
        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},                      // 10614
        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},                          // 10615
        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},                   // 10616
        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},    // 10617
        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},                              // 10618
        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},                  // 10619
                                                                                                                       // 10620
        // depreciated after 1.7.1                                                                                     // 10621
        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){                                   // 10622
            labelsOutside=_;                                                                                           // 10623
            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');                                            // 10624
        }},                                                                                                            // 10625
        // depreciated after 1.7.1                                                                                     // 10626
        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){                                 // 10627
            labelsOutside=_;                                                                                           // 10628
            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');                                          // 10629
        }},                                                                                                            // 10630
        // deprecated after 1.7.1                                                                                      // 10631
        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {                                        // 10632
            valueFormat=_;                                                                                             // 10633
            nv.deprecated('labelFormat','use valueFormat instead');                                                    // 10634
        }},                                                                                                            // 10635
                                                                                                                       // 10636
        // options that require extra logic in the setter                                                              // 10637
        margin: {get: function(){return margin;}, set: function(_){                                                    // 10638
            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;                                    // 10639
            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;                                  // 10640
            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;                                 // 10641
            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;                                   // 10642
        }},                                                                                                            // 10643
        y: {get: function(){return getY;}, set: function(_){                                                           // 10644
            getY=d3.functor(_);                                                                                        // 10645
        }},                                                                                                            // 10646
        color: {get: function(){return color;}, set: function(_){                                                      // 10647
            color=nv.utils.getColor(_);                                                                                // 10648
        }},                                                                                                            // 10649
        labelType:          {get: function(){return labelType;}, set: function(_){                                     // 10650
            labelType= _ || 'key';                                                                                     // 10651
        }}                                                                                                             // 10652
    });                                                                                                                // 10653
                                                                                                                       // 10654
    nv.utils.initOptions(chart);                                                                                       // 10655
    return chart;                                                                                                      // 10656
};                                                                                                                     // 10657
nv.models.pieChart = function() {                                                                                      // 10658
    "use strict";                                                                                                      // 10659
                                                                                                                       // 10660
    //============================================================                                                     // 10661
    // Public Variables with Default Settings                                                                          // 10662
    //------------------------------------------------------------                                                     // 10663
                                                                                                                       // 10664
    var pie = nv.models.pie();                                                                                         // 10665
    var legend = nv.models.legend();                                                                                   // 10666
    var tooltip = nv.models.tooltip();                                                                                 // 10667
                                                                                                                       // 10668
    var margin = {top: 30, right: 20, bottom: 20, left: 20}                                                            // 10669
        , width = null                                                                                                 // 10670
        , height = null                                                                                                // 10671
        , showLegend = true                                                                                            // 10672
        , legendPosition = "top"                                                                                       // 10673
        , color = nv.utils.defaultColor()                                                                              // 10674
        , state = nv.utils.state()                                                                                     // 10675
        , defaultState = null                                                                                          // 10676
        , noData = null                                                                                                // 10677
        , duration = 250                                                                                               // 10678
        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState','renderEnd')               // 10679
        ;                                                                                                              // 10680
                                                                                                                       // 10681
    tooltip                                                                                                            // 10682
        .headerEnabled(false)                                                                                          // 10683
        .duration(0)                                                                                                   // 10684
        .valueFormatter(function(d, i) {                                                                               // 10685
            return pie.valueFormat()(d, i);                                                                            // 10686
        });                                                                                                            // 10687
                                                                                                                       // 10688
    //============================================================                                                     // 10689
    // Private Variables                                                                                               // 10690
    //------------------------------------------------------------                                                     // 10691
                                                                                                                       // 10692
    var renderWatch = nv.utils.renderWatch(dispatch);                                                                  // 10693
                                                                                                                       // 10694
    var stateGetter = function(data) {                                                                                 // 10695
        return function(){                                                                                             // 10696
            return {                                                                                                   // 10697
                active: data.map(function(d) { return !d.disabled })                                                   // 10698
            };                                                                                                         // 10699
        }                                                                                                              // 10700
    };                                                                                                                 // 10701
                                                                                                                       // 10702
    var stateSetter = function(data) {                                                                                 // 10703
        return function(state) {                                                                                       // 10704
            if (state.active !== undefined) {                                                                          // 10705
                data.forEach(function (series, i) {                                                                    // 10706
                    series.disabled = !state.active[i];                                                                // 10707
                });                                                                                                    // 10708
            }                                                                                                          // 10709
        }                                                                                                              // 10710
    };                                                                                                                 // 10711
                                                                                                                       // 10712
    //============================================================                                                     // 10713
    // Chart function                                                                                                  // 10714
    //------------------------------------------------------------                                                     // 10715
                                                                                                                       // 10716
    function chart(selection) {                                                                                        // 10717
        renderWatch.reset();                                                                                           // 10718
        renderWatch.models(pie);                                                                                       // 10719
                                                                                                                       // 10720
        selection.each(function(data) {                                                                                // 10721
            var container = d3.select(this);                                                                           // 10722
            nv.utils.initSVG(container);                                                                               // 10723
                                                                                                                       // 10724
            var that = this;                                                                                           // 10725
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 10726
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 10727
                                                                                                                       // 10728
            chart.update = function() { container.transition().call(chart); };                                         // 10729
            chart.container = this;                                                                                    // 10730
                                                                                                                       // 10731
            state.setter(stateSetter(data), chart.update)                                                              // 10732
                .getter(stateGetter(data))                                                                             // 10733
                .update();                                                                                             // 10734
                                                                                                                       // 10735
            //set state.disabled                                                                                       // 10736
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 10737
                                                                                                                       // 10738
            if (!defaultState) {                                                                                       // 10739
                var key;                                                                                               // 10740
                defaultState = {};                                                                                     // 10741
                for (key in state) {                                                                                   // 10742
                    if (state[key] instanceof Array)                                                                   // 10743
                        defaultState[key] = state[key].slice(0);                                                       // 10744
                    else                                                                                               // 10745
                        defaultState[key] = state[key];                                                                // 10746
                }                                                                                                      // 10747
            }                                                                                                          // 10748
                                                                                                                       // 10749
            // Display No Data message if there's nothing to show.                                                     // 10750
            if (!data || !data.length) {                                                                               // 10751
                nv.utils.noData(chart, container);                                                                     // 10752
                return chart;                                                                                          // 10753
            } else {                                                                                                   // 10754
                container.selectAll('.nv-noData').remove();                                                            // 10755
            }                                                                                                          // 10756
                                                                                                                       // 10757
            // Setup containers and skeleton of chart                                                                  // 10758
            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);                                      // 10759
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');               // 10760
            var g = wrap.select('g');                                                                                  // 10761
                                                                                                                       // 10762
            gEnter.append('g').attr('class', 'nv-pieWrap');                                                            // 10763
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 10764
                                                                                                                       // 10765
            // Legend                                                                                                  // 10766
            if (showLegend) {                                                                                          // 10767
                if (legendPosition === "top") {                                                                        // 10768
                    legend.width( availableWidth ).key(pie.x());                                                       // 10769
                                                                                                                       // 10770
                    wrap.select('.nv-legendWrap')                                                                      // 10771
                        .datum(data)                                                                                   // 10772
                        .call(legend);                                                                                 // 10773
                                                                                                                       // 10774
                    if ( margin.top != legend.height()) {                                                              // 10775
                        margin.top = legend.height();                                                                  // 10776
                        availableHeight = nv.utils.availableHeight(height, container, margin);                         // 10777
                    }                                                                                                  // 10778
                                                                                                                       // 10779
                    wrap.select('.nv-legendWrap')                                                                      // 10780
                        .attr('transform', 'translate(0,' + (-margin.top) +')');                                       // 10781
                } else if (legendPosition === "right") {                                                               // 10782
                    var legendWidth = nv.models.legend().width();                                                      // 10783
                    if (availableWidth / 2 < legendWidth) {                                                            // 10784
                        legendWidth = (availableWidth / 2)                                                             // 10785
                    }                                                                                                  // 10786
                    legend.height(availableHeight).key(pie.x());                                                       // 10787
                    legend.width(legendWidth);                                                                         // 10788
                    availableWidth -= legend.width();                                                                  // 10789
                                                                                                                       // 10790
                    wrap.select('.nv-legendWrap')                                                                      // 10791
                        .datum(data)                                                                                   // 10792
                        .call(legend)                                                                                  // 10793
                        .attr('transform', 'translate(' + (availableWidth) +',0)');                                    // 10794
                }                                                                                                      // 10795
            }                                                                                                          // 10796
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 10797
                                                                                                                       // 10798
            // Main Chart Component(s)                                                                                 // 10799
            pie.width(availableWidth).height(availableHeight);                                                         // 10800
            var pieWrap = g.select('.nv-pieWrap').datum([data]);                                                       // 10801
            d3.transition(pieWrap).call(pie);                                                                          // 10802
                                                                                                                       // 10803
            //============================================================                                             // 10804
            // Event Handling/Dispatching (in chart's scope)                                                           // 10805
            //------------------------------------------------------------                                             // 10806
                                                                                                                       // 10807
            legend.dispatch.on('stateChange', function(newState) {                                                     // 10808
                for (var key in newState) {                                                                            // 10809
                    state[key] = newState[key];                                                                        // 10810
                }                                                                                                      // 10811
                dispatch.stateChange(state);                                                                           // 10812
                chart.update();                                                                                        // 10813
            });                                                                                                        // 10814
                                                                                                                       // 10815
            // Update chart from a state object passed to event handler                                                // 10816
            dispatch.on('changeState', function(e) {                                                                   // 10817
                if (typeof e.disabled !== 'undefined') {                                                               // 10818
                    data.forEach(function(series,i) {                                                                  // 10819
                        series.disabled = e.disabled[i];                                                               // 10820
                    });                                                                                                // 10821
                    state.disabled = e.disabled;                                                                       // 10822
                }                                                                                                      // 10823
                chart.update();                                                                                        // 10824
            });                                                                                                        // 10825
        });                                                                                                            // 10826
                                                                                                                       // 10827
        renderWatch.renderEnd('pieChart immediate');                                                                   // 10828
        return chart;                                                                                                  // 10829
    }                                                                                                                  // 10830
                                                                                                                       // 10831
    //============================================================                                                     // 10832
    // Event Handling/Dispatching (out of chart's scope)                                                               // 10833
    //------------------------------------------------------------                                                     // 10834
                                                                                                                       // 10835
    pie.dispatch.on('elementMouseover.tooltip', function(evt) {                                                        // 10836
        evt['series'] = {                                                                                              // 10837
            key: chart.x()(evt.data),                                                                                  // 10838
            value: chart.y()(evt.data),                                                                                // 10839
            color: evt.color                                                                                           // 10840
        };                                                                                                             // 10841
        tooltip.data(evt).hidden(false);                                                                               // 10842
    });                                                                                                                // 10843
                                                                                                                       // 10844
    pie.dispatch.on('elementMouseout.tooltip', function(evt) {                                                         // 10845
        tooltip.hidden(true);                                                                                          // 10846
    });                                                                                                                // 10847
                                                                                                                       // 10848
    pie.dispatch.on('elementMousemove.tooltip', function(evt) {                                                        // 10849
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 10850
    });                                                                                                                // 10851
                                                                                                                       // 10852
    //============================================================                                                     // 10853
    // Expose Public Variables                                                                                         // 10854
    //------------------------------------------------------------                                                     // 10855
                                                                                                                       // 10856
    // expose chart's sub-components                                                                                   // 10857
    chart.legend = legend;                                                                                             // 10858
    chart.dispatch = dispatch;                                                                                         // 10859
    chart.pie = pie;                                                                                                   // 10860
    chart.tooltip = tooltip;                                                                                           // 10861
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 10862
                                                                                                                       // 10863
    // use Object get/set functionality to map between vars and chart functions                                        // 10864
    chart._options = Object.create({}, {                                                                               // 10865
        // simple options, just get/set the necessary values                                                           // 10866
        noData:         {get: function(){return noData;},         set: function(_){noData=_;}},                        // 10867
        showLegend:     {get: function(){return showLegend;},     set: function(_){showLegend=_;}},                    // 10868
        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},                // 10869
        defaultState:   {get: function(){return defaultState;},   set: function(_){defaultState=_;}},                  // 10870
                                                                                                                       // 10871
        // deprecated options                                                                                          // 10872
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 10873
            // deprecated after 1.7.1                                                                                  // 10874
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 10875
            tooltip.enabled(!!_);                                                                                      // 10876
        }},                                                                                                            // 10877
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 10878
            // deprecated after 1.7.1                                                                                  // 10879
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 10880
            tooltip.contentGenerator(_);                                                                               // 10881
        }},                                                                                                            // 10882
                                                                                                                       // 10883
        // options that require extra logic in the setter                                                              // 10884
        color: {get: function(){return color;}, set: function(_){                                                      // 10885
            color = _;                                                                                                 // 10886
            legend.color(color);                                                                                       // 10887
            pie.color(color);                                                                                          // 10888
        }},                                                                                                            // 10889
        duration: {get: function(){return duration;}, set: function(_){                                                // 10890
            duration = _;                                                                                              // 10891
            renderWatch.reset(duration);                                                                               // 10892
        }},                                                                                                            // 10893
        margin: {get: function(){return margin;}, set: function(_){                                                    // 10894
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 10895
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 10896
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 10897
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 10898
        }}                                                                                                             // 10899
    });                                                                                                                // 10900
    nv.utils.inheritOptions(chart, pie);                                                                               // 10901
    nv.utils.initOptions(chart);                                                                                       // 10902
    return chart;                                                                                                      // 10903
};                                                                                                                     // 10904
                                                                                                                       // 10905
nv.models.scatter = function() {                                                                                       // 10906
    "use strict";                                                                                                      // 10907
                                                                                                                       // 10908
    //============================================================                                                     // 10909
    // Public Variables with Default Settings                                                                          // 10910
    //------------------------------------------------------------                                                     // 10911
                                                                                                                       // 10912
    var margin       = {top: 0, right: 0, bottom: 0, left: 0}                                                          // 10913
        , width        = null                                                                                          // 10914
        , height       = null                                                                                          // 10915
        , color        = nv.utils.defaultColor() // chooses color                                                      // 10916
        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one     // 10917
        , container    = null                                                                                          // 10918
        , x            = d3.scale.linear()                                                                             // 10919
        , y            = d3.scale.linear()                                                                             // 10920
        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area                       // 10921
        , getX         = function(d) { return d.x } // accessor to get the x value                                     // 10922
        , getY         = function(d) { return d.y } // accessor to get the y value                                     // 10923
        , getSize      = function(d) { return d.size || 1} // accessor to get the point size                           // 10924
        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape                     // 10925
        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)                 // 10926
        , forceY       = [] // List of numbers to Force into the Y scale                                               // 10927
        , forceSize    = [] // List of numbers to Force into the Size scale                                            // 10928
        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection                      // 10929
        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out      // 10930
        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding                                      // 10932
        , clipEdge     = false // if true, masks points within x and y scale                                           // 10933
        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance
        , showVoronoi  = false // display the voronoi areas                                                            // 10935
        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips                // 10936
        , xDomain      = null // Override x domain (skips the calculation from data)                                   // 10937
        , yDomain      = null // Override y domain                                                                     // 10938
        , xRange       = null // Override x range                                                                      // 10939
        , yRange       = null // Override y range                                                                      // 10940
        , sizeDomain   = null // Override point size domain                                                            // 10941
        , sizeRange    = null                                                                                          // 10942
        , singlePoint  = false                                                                                         // 10943
        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')
        , useVoronoi   = true                                                                                          // 10945
        , duration     = 250                                                                                           // 10946
        ;                                                                                                              // 10947
                                                                                                                       // 10948
                                                                                                                       // 10949
    //============================================================                                                     // 10950
    // Private Variables                                                                                               // 10951
    //------------------------------------------------------------                                                     // 10952
                                                                                                                       // 10953
    var x0, y0, z0 // used to store previous scales                                                                    // 10954
        , timeoutID                                                                                                    // 10955
        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips
        , renderWatch = nv.utils.renderWatch(dispatch, duration)                                                       // 10957
        , _sizeRange_def = [16, 256]                                                                                   // 10958
        ;                                                                                                              // 10959
                                                                                                                       // 10960
    function chart(selection) {                                                                                        // 10961
        renderWatch.reset();                                                                                           // 10962
        selection.each(function(data) {                                                                                // 10963
            container = d3.select(this);                                                                               // 10964
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 10965
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 10966
                                                                                                                       // 10967
            nv.utils.initSVG(container);                                                                               // 10968
                                                                                                                       // 10969
            //add series index to each data point for reference                                                        // 10970
            data.forEach(function(series, i) {                                                                         // 10971
                series.values.forEach(function(point) {                                                                // 10972
                    point.series = i;                                                                                  // 10973
                });                                                                                                    // 10974
            });                                                                                                        // 10975
                                                                                                                       // 10976
            // Setup Scales                                                                                            // 10977
            // remap and flatten the data for use in calculating the scales' domains                                   // 10978
            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance
                d3.merge(                                                                                              // 10980
                    data.map(function(d) {                                                                             // 10981
                        return d.values.map(function(d,i) {                                                            // 10982
                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }                                  // 10983
                        })                                                                                             // 10984
                    })                                                                                                 // 10985
                );                                                                                                     // 10986
                                                                                                                       // 10987
            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))              // 10988
                                                                                                                       // 10989
            if (padData && data[0])                                                                                    // 10990
                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);
            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
            else                                                                                                       // 10993
                x.range(xRange || [0, availableWidth]);                                                                // 10994
                                                                                                                       // 10995
            y   .domain(yDomain || d3.extent(seriesData.map(function(d) { return d.y }).concat(forceY)))               // 10996
                .range(yRange || [availableHeight, 0]);                                                                // 10997
                                                                                                                       // 10998
            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))      // 10999
                .range(sizeRange || _sizeRange_def);                                                                   // 11000
                                                                                                                       // 11001
            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];                          // 11003
                                                                                                                       // 11004
            if (x.domain()[0] === x.domain()[1])                                                                       // 11005
                x.domain()[0] ?                                                                                        // 11006
                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])             // 11007
                    : x.domain([-1,1]);                                                                                // 11008
                                                                                                                       // 11009
            if (y.domain()[0] === y.domain()[1])                                                                       // 11010
                y.domain()[0] ?                                                                                        // 11011
                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])             // 11012
                    : y.domain([-1,1]);                                                                                // 11013
                                                                                                                       // 11014
            if ( isNaN(x.domain()[0])) {                                                                               // 11015
                x.domain([-1,1]);                                                                                      // 11016
            }                                                                                                          // 11017
                                                                                                                       // 11018
            if ( isNaN(y.domain()[0])) {                                                                               // 11019
                y.domain([-1,1]);                                                                                      // 11020
            }                                                                                                          // 11021
                                                                                                                       // 11022
            x0 = x0 || x;                                                                                              // 11023
            y0 = y0 || y;                                                                                              // 11024
            z0 = z0 || z;                                                                                              // 11025
                                                                                                                       // 11026
            // Setup containers and skeleton of chart                                                                  // 11027
            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);                                       // 11028
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);          // 11029
            var defsEnter = wrapEnter.append('defs');                                                                  // 11030
            var gEnter = wrapEnter.append('g');                                                                        // 11031
            var g = wrap.select('g');                                                                                  // 11032
                                                                                                                       // 11033
            wrap.classed('nv-single-point', singlePoint);                                                              // 11034
            gEnter.append('g').attr('class', 'nv-groups');                                                             // 11035
            gEnter.append('g').attr('class', 'nv-point-paths');                                                        // 11036
            wrapEnter.append('g').attr('class', 'nv-point-clips');                                                     // 11037
                                                                                                                       // 11038
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 11039
                                                                                                                       // 11040
            defsEnter.append('clipPath')                                                                               // 11041
                .attr('id', 'nv-edge-clip-' + id)                                                                      // 11042
                .append('rect');                                                                                       // 11043
                                                                                                                       // 11044
            wrap.select('#nv-edge-clip-' + id + ' rect')                                                               // 11045
                .attr('width', availableWidth)                                                                         // 11046
                .attr('height', (availableHeight > 0) ? availableHeight : 0);                                          // 11047
                                                                                                                       // 11048
            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');                                      // 11049
                                                                                                                       // 11050
            function updateInteractiveLayer() {                                                                        // 11051
                // Always clear needs-update flag regardless of whether or not                                         // 11052
                // we will actually do anything (avoids needless invocations).                                         // 11053
                needsUpdate = false;                                                                                   // 11054
                                                                                                                       // 11055
                if (!interactive) return false;                                                                        // 11056
                                                                                                                       // 11057
                // inject series and point index for reference into voronoi                                            // 11058
                if (useVoronoi === true) {                                                                             // 11059
                    var vertices = d3.merge(data.map(function(group, groupIndex) {                                     // 11060
                            return group.values                                                                        // 11061
                                .map(function(point, pointIndex) {                                                     // 11062
                                    // *Adding noise to make duplicates very unlikely                                  // 11063
                                    // *Injecting series and point index for reference                                 // 11064
                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.  // 11065
                                     */                                                                                // 11066
                                    var pX = getX(point,pointIndex);                                                   // 11067
                                    var pY = getY(point,pointIndex);                                                   // 11068
                                                                                                                       // 11069
                                    return [x(pX)+ Math.random() * 1e-4,                                               // 11070
                                            y(pY)+ Math.random() * 1e-4,                                               // 11071
                                        groupIndex,                                                                    // 11072
                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates
                                })                                                                                     // 11074
                                .filter(function(pointArray, pointIndex) {                                             // 11075
                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!
                                })                                                                                     // 11077
                        })                                                                                             // 11078
                    );                                                                                                 // 11079
                                                                                                                       // 11080
                    if (vertices.length == 0) return false;  // No active points, we're done                           // 11081
                    if (vertices.length < 3) {                                                                         // 11082
                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work // 11083
                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);                             // 11084
                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);                             // 11085
                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);                             // 11086
                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);                             // 11087
                    }                                                                                                  // 11088
                                                                                                                       // 11089
                    // keep voronoi sections from going more than 10 outside of graph                                  // 11090
                    // to avoid overlap with other things like legend etc                                              // 11091
                    var bounds = d3.geom.polygon([                                                                     // 11092
                        [-10,-10],                                                                                     // 11093
                        [-10,height + 10],                                                                             // 11094
                        [width + 10,height + 10],                                                                      // 11095
                        [width + 10,-10]                                                                               // 11096
                    ]);                                                                                                // 11097
                                                                                                                       // 11098
                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {                                       // 11099
                        return {                                                                                       // 11100
                            'data': bounds.clip(d),                                                                    // 11101
                            'series': vertices[i][2],                                                                  // 11102
                            'point': vertices[i][3]                                                                    // 11103
                        }                                                                                              // 11104
                    });                                                                                                // 11105
                                                                                                                       // 11106
                    // nuke all voronoi paths on reload and recreate them                                              // 11107
                    wrap.select('.nv-point-paths').selectAll('path').remove();                                         // 11108
                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);                   // 11109
                    var vPointPaths = pointPaths                                                                       // 11110
                        .enter().append("svg:path")                                                                    // 11111
                        .attr("d", function(d) {                                                                       // 11112
                            if (!d || !d.data || d.data.length === 0)                                                  // 11113
                                return 'M 0 0';                                                                        // 11114
                            else                                                                                       // 11115
                                return "M" + d.data.join(",") + "Z";                                                   // 11116
                        })                                                                                             // 11117
                        .attr("id", function(d,i) {                                                                    // 11118
                            return "nv-path-"+i; })                                                                    // 11119
                        .attr("clip-path", function(d,i) { return "url(#nv-clip-"+id+"-"+i+")"; })                     // 11120
                        ;                                                                                              // 11121
                                                                                                                       // 11122
                    // good for debugging point hover issues                                                           // 11123
                    if (showVoronoi) {                                                                                 // 11124
                        vPointPaths.style("fill", d3.rgb(230, 230, 230))                                               // 11125
                            .style('fill-opacity', 0.4)                                                                // 11126
                            .style('stroke-opacity', 1)                                                                // 11127
                            .style("stroke", d3.rgb(200,200,200));                                                     // 11128
                    }                                                                                                  // 11129
                                                                                                                       // 11130
                    if (clipVoronoi) {                                                                                 // 11131
                        // voronoi sections are already set to clip,                                                   // 11132
                        // just create the circles with the IDs they expect                                            // 11133
                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom      // 11134
                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);          // 11135
                        var vPointClips = pointClips                                                                   // 11136
                            .enter().append("svg:clipPath")                                                            // 11137
                            .attr("id", function(d, i) { return "nv-clip-"+id+"-"+i;})                                 // 11138
                            .append("svg:circle")                                                                      // 11139
                            .attr('cx', function(d) { return d[0]; })                                                  // 11140
                            .attr('cy', function(d) { return d[1]; })                                                  // 11141
                            .attr('r', clipRadius);                                                                    // 11142
                    }                                                                                                  // 11143
                                                                                                                       // 11144
                    var mouseEventCallback = function(d, mDispatch) {                                                  // 11145
                        if (needsUpdate) return 0;                                                                     // 11146
                        var series = data[d.series];                                                                   // 11147
                        if (series === undefined) return;                                                              // 11148
                        var point  = series.values[d.point];                                                           // 11149
                        point['color'] = color(series, d.series);                                                      // 11150
                                                                                                                       // 11151
                        // standardize attributes for tooltip.                                                         // 11152
                        point['x'] = getX(point);                                                                      // 11153
                        point['y'] = getY(point);                                                                      // 11154
                                                                                                                       // 11155
                        // can't just get box of event node since it's actually a voronoi polygon                      // 11156
                        var box = container.node().getBoundingClientRect();                                            // 11157
                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;                     // 11158
                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;                    // 11159
                                                                                                                       // 11160
                        var pos = {                                                                                    // 11161
                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,                  // 11162
                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10                       // 11163
                        };                                                                                             // 11164
                                                                                                                       // 11165
                        mDispatch({                                                                                    // 11166
                            point: point,                                                                              // 11167
                            series: series,                                                                            // 11168
                            pos: pos,                                                                                  // 11169
                            seriesIndex: d.series,                                                                     // 11170
                            pointIndex: d.point                                                                        // 11171
                        });                                                                                            // 11172
                    };                                                                                                 // 11173
                                                                                                                       // 11174
                    pointPaths                                                                                         // 11175
                        .on('click', function(d) {                                                                     // 11176
                            mouseEventCallback(d, dispatch.elementClick);                                              // 11177
                        })                                                                                             // 11178
                        .on('dblclick', function(d) {                                                                  // 11179
                            mouseEventCallback(d, dispatch.elementDblClick);                                           // 11180
                        })                                                                                             // 11181
                        .on('mouseover', function(d) {                                                                 // 11182
                            mouseEventCallback(d, dispatch.elementMouseover);                                          // 11183
                        })                                                                                             // 11184
                        .on('mouseout', function(d, i) {                                                               // 11185
                            mouseEventCallback(d, dispatch.elementMouseout);                                           // 11186
                        });                                                                                            // 11187
                                                                                                                       // 11188
                } else {                                                                                               // 11189
                    // add event handlers to points instead voronoi paths                                              // 11190
                    wrap.select('.nv-groups').selectAll('.nv-group')                                                   // 11191
                        .selectAll('.nv-point')                                                                        // 11192
                        //.data(dataWithPoints)                                                                        // 11193
                        //.style('pointer-events', 'auto') // recativate events, disabled by css                       // 11194
                        .on('click', function(d,i) {                                                                   // 11195
                            //nv.log('test', d, i);                                                                    // 11196
                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point             // 11197
                            var series = data[d.series],                                                               // 11198
                                point  = series.values[i];                                                             // 11199
                                                                                                                       // 11200
                            dispatch.elementClick({                                                                    // 11201
                                point: point,                                                                          // 11202
                                series: series,                                                                        // 11203
                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],                // 11204
                                seriesIndex: d.series,                                                                 // 11205
                                pointIndex: i                                                                          // 11206
                            });                                                                                        // 11207
                        })                                                                                             // 11208
                        .on('dblclick', function(d,i) {                                                                // 11209
                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point             // 11210
                            var series = data[d.series],                                                               // 11211
                                point  = series.values[i];                                                             // 11212
                                                                                                                       // 11213
                            dispatch.elementDblClick({                                                                 // 11214
                                point: point,                                                                          // 11215
                                series: series,                                                                        // 11216
                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],                // 11217
                                seriesIndex: d.series,                                                                 // 11218
                                pointIndex: i                                                                          // 11219
                            });                                                                                        // 11220
                        })                                                                                             // 11221
                        .on('mouseover', function(d,i) {                                                               // 11222
                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point             // 11223
                            var series = data[d.series],                                                               // 11224
                                point  = series.values[i];                                                             // 11225
                                                                                                                       // 11226
                            dispatch.elementMouseover({                                                                // 11227
                                point: point,                                                                          // 11228
                                series: series,                                                                        // 11229
                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],                // 11230
                                seriesIndex: d.series,                                                                 // 11231
                                pointIndex: i,                                                                         // 11232
                                color: color(d, i)                                                                     // 11233
                            });                                                                                        // 11234
                        })                                                                                             // 11235
                        .on('mouseout', function(d,i) {                                                                // 11236
                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point             // 11237
                            var series = data[d.series],                                                               // 11238
                                point  = series.values[i];                                                             // 11239
                                                                                                                       // 11240
                            dispatch.elementMouseout({                                                                 // 11241
                                point: point,                                                                          // 11242
                                series: series,                                                                        // 11243
                                seriesIndex: d.series,                                                                 // 11244
                                pointIndex: i,                                                                         // 11245
                                color: color(d, i)                                                                     // 11246
                            });                                                                                        // 11247
                        });                                                                                            // 11248
                }                                                                                                      // 11249
            }                                                                                                          // 11250
                                                                                                                       // 11251
            needsUpdate = true;                                                                                        // 11252
            var groups = wrap.select('.nv-groups').selectAll('.nv-group')                                              // 11253
                .data(function(d) { return d }, function(d) { return d.key });                                         // 11254
            groups.enter().append('g')                                                                                 // 11255
                .style('stroke-opacity', 1e-6)                                                                         // 11256
                .style('fill-opacity', 1e-6);                                                                          // 11257
            groups.exit()                                                                                              // 11258
                .remove();                                                                                             // 11259
            groups                                                                                                     // 11260
                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })                                     // 11261
                .classed('hover', function(d) { return d.hover });                                                     // 11262
            groups.watchTransition(renderWatch, 'scatter: groups')                                                     // 11263
                .style('fill', function(d,i) { return color(d, i) })                                                   // 11264
                .style('stroke', function(d,i) { return color(d, i) })                                                 // 11265
                .style('stroke-opacity', 1)                                                                            // 11266
                .style('fill-opacity', .5);                                                                            // 11267
                                                                                                                       // 11268
            // create the points, maintaining their IDs from the original data set                                     // 11269
            var points = groups.selectAll('path.nv-point')                                                             // 11270
                .data(function(d) {                                                                                    // 11271
                    return d.values.map(                                                                               // 11272
                        function (point, pointIndex) {                                                                 // 11273
                            return [point, pointIndex]                                                                 // 11274
                        }).filter(                                                                                     // 11275
                            function(pointArray, pointIndex) {                                                         // 11276
                                return pointActive(pointArray[0], pointIndex)                                          // 11277
                            })                                                                                         // 11278
                    });                                                                                                // 11279
            points.enter().append('path')                                                                              // 11280
                .style('fill', function (d) { return d.color })                                                        // 11281
                .style('stroke', function (d) { return d.color })                                                      // 11282
                .attr('transform', function(d) {                                                                       // 11283
                    return 'translate(' + x0(getX(d[0],d[1])) + ',' + y0(getY(d[0],d[1])) + ')'                        // 11284
                })                                                                                                     // 11285
                .attr('d',                                                                                             // 11286
                    nv.utils.symbol()                                                                                  // 11287
                    .type(function(d) { return getShape(d[0]); })                                                      // 11288
                    .size(function(d) { return z(getSize(d[0],d[1])) })                                                // 11289
            );                                                                                                         // 11290
            points.exit().remove();                                                                                    // 11291
            groups.exit().selectAll('path.nv-point')                                                                   // 11292
                .watchTransition(renderWatch, 'scatter exit')                                                          // 11293
                .attr('transform', function(d) {                                                                       // 11294
                    return 'translate(' + x(getX(d[0],d[1])) + ',' + y(getY(d[0],d[1])) + ')'                          // 11295
                })                                                                                                     // 11296
                .remove();                                                                                             // 11297
            points.each(function(d) {                                                                                  // 11298
                d3.select(this)                                                                                        // 11299
                    .classed('nv-point', true)                                                                         // 11300
                    .classed('nv-point-' + d[1], true)                                                                 // 11301
                    .classed('nv-noninteractive', !interactive)                                                        // 11302
                    .classed('hover',false)                                                                            // 11303
                ;                                                                                                      // 11304
            });                                                                                                        // 11305
            points                                                                                                     // 11306
                .watchTransition(renderWatch, 'scatter points')                                                        // 11307
                .attr('transform', function(d) {                                                                       // 11308
                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));                                                  // 11309
                    return 'translate(' + x(getX(d[0],d[1])) + ',' + y(getY(d[0],d[1])) + ')'                          // 11310
                })                                                                                                     // 11311
                .attr('d',                                                                                             // 11312
                    nv.utils.symbol()                                                                                  // 11313
                    .type(function(d) { return getShape(d[0]); })                                                      // 11314
                    .size(function(d) { return z(getSize(d[0],d[1])) })                                                // 11315
            );                                                                                                         // 11316
                                                                                                                       // 11317
            // Delay updating the invisible interactive layer for smoother animation                                   // 11318
            clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer                                    // 11319
            timeoutID = setTimeout(updateInteractiveLayer, 300);                                                       // 11320
            //updateInteractiveLayer();                                                                                // 11321
                                                                                                                       // 11322
            //store old scales for use in transitions on update                                                        // 11323
            x0 = x.copy();                                                                                             // 11324
            y0 = y.copy();                                                                                             // 11325
            z0 = z.copy();                                                                                             // 11326
                                                                                                                       // 11327
        });                                                                                                            // 11328
        renderWatch.renderEnd('scatter immediate');                                                                    // 11329
        return chart;                                                                                                  // 11330
    }                                                                                                                  // 11331
                                                                                                                       // 11332
    //============================================================                                                     // 11333
    // Expose Public Variables                                                                                         // 11334
    //------------------------------------------------------------                                                     // 11335
                                                                                                                       // 11336
    chart.dispatch = dispatch;                                                                                         // 11337
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 11338
                                                                                                                       // 11339
    // utility function calls provided by this chart                                                                   // 11340
    chart._calls = new function() {                                                                                    // 11341
        this.clearHighlights = function () {                                                                           // 11342
            nv.dom.write(function() {                                                                                  // 11343
                container.selectAll(".nv-point.hover").classed("hover", false);                                        // 11344
            });                                                                                                        // 11345
            return null;                                                                                               // 11346
        };                                                                                                             // 11347
        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {                                        // 11348
            nv.dom.write(function() {                                                                                  // 11349
                container.select(" .nv-series-" + seriesIndex + " .nv-point-" + pointIndex)                            // 11350
                    .classed("hover", isHoverOver);                                                                    // 11351
            });                                                                                                        // 11352
        };                                                                                                             // 11353
    };                                                                                                                 // 11354
                                                                                                                       // 11355
    // trigger calls from events too                                                                                   // 11356
    dispatch.on('elementMouseover.point', function(d) {                                                                // 11357
        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);                                 // 11358
    });                                                                                                                // 11359
                                                                                                                       // 11360
    dispatch.on('elementMouseout.point', function(d) {                                                                 // 11361
        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);                                // 11362
    });                                                                                                                // 11363
                                                                                                                       // 11364
    chart._options = Object.create({}, {                                                                               // 11365
        // simple options, just get/set the necessary values                                                           // 11366
        width:        {get: function(){return width;}, set: function(_){width=_;}},                                    // 11367
        height:       {get: function(){return height;}, set: function(_){height=_;}},                                  // 11368
        xScale:       {get: function(){return x;}, set: function(_){x=_;}},                                            // 11369
        yScale:       {get: function(){return y;}, set: function(_){y=_;}},                                            // 11370
        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},                                            // 11371
        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                // 11372
        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                // 11373
        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},                          // 11374
        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},                                  // 11375
        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},                                  // 11376
        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},                            // 11377
        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},                                  // 11378
        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},                                  // 11379
        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},                            // 11380
        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},                        // 11381
        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},                        // 11382
        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},                      // 11383
        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},                                // 11384
        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},                              // 11385
        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},                        // 11386
        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},                          // 11387
        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},                       // 11388
        id:           {get: function(){return id;}, set: function(_){id=_;}},                                          // 11389
                                                                                                                       // 11390
                                                                                                                       // 11391
        // simple functor options                                                                                      // 11392
        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},                               // 11393
        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},                               // 11394
        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},                     // 11395
        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},                  // 11396
                                                                                                                       // 11397
        // options that require extra logic in the setter                                                              // 11398
        margin: {get: function(){return margin;}, set: function(_){                                                    // 11399
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 11400
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 11401
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 11402
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 11403
        }},                                                                                                            // 11404
        duration: {get: function(){return duration;}, set: function(_){                                                // 11405
            duration = _;                                                                                              // 11406
            renderWatch.reset(duration);                                                                               // 11407
        }},                                                                                                            // 11408
        color: {get: function(){return color;}, set: function(_){                                                      // 11409
            color = nv.utils.getColor(_);                                                                              // 11410
        }},                                                                                                            // 11411
        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){                                            // 11412
            useVoronoi = _;                                                                                            // 11413
            if (useVoronoi === false) {                                                                                // 11414
                clipVoronoi = false;                                                                                   // 11415
            }                                                                                                          // 11416
        }}                                                                                                             // 11417
    });                                                                                                                // 11418
                                                                                                                       // 11419
    nv.utils.initOptions(chart);                                                                                       // 11420
    return chart;                                                                                                      // 11421
};                                                                                                                     // 11422
                                                                                                                       // 11423
nv.models.scatterChart = function() {                                                                                  // 11424
    "use strict";                                                                                                      // 11425
                                                                                                                       // 11426
    //============================================================                                                     // 11427
    // Public Variables with Default Settings                                                                          // 11428
    //------------------------------------------------------------                                                     // 11429
                                                                                                                       // 11430
    var scatter      = nv.models.scatter()                                                                             // 11431
        , xAxis        = nv.models.axis()                                                                              // 11432
        , yAxis        = nv.models.axis()                                                                              // 11433
        , legend       = nv.models.legend()                                                                            // 11434
        , distX        = nv.models.distribution()                                                                      // 11435
        , distY        = nv.models.distribution()                                                                      // 11436
        , tooltip      = nv.models.tooltip()                                                                           // 11437
        ;                                                                                                              // 11438
                                                                                                                       // 11439
    var margin       = {top: 30, right: 20, bottom: 50, left: 75}                                                      // 11440
        , width        = null                                                                                          // 11441
        , height       = null                                                                                          // 11442
        , container    = null                                                                                          // 11443
        , color        = nv.utils.defaultColor()                                                                       // 11444
        , x            = scatter.xScale()                                                                              // 11445
        , y            = scatter.yScale()                                                                              // 11446
        , showDistX    = false                                                                                         // 11447
        , showDistY    = false                                                                                         // 11448
        , showLegend   = true                                                                                          // 11449
        , showXAxis    = true                                                                                          // 11450
        , showYAxis    = true                                                                                          // 11451
        , rightAlignYAxis = false                                                                                      // 11452
        , state = nv.utils.state()                                                                                     // 11453
        , defaultState = null                                                                                          // 11454
        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')                                            // 11455
        , noData       = null                                                                                          // 11456
        , duration = 250                                                                                               // 11457
        ;                                                                                                              // 11458
                                                                                                                       // 11459
    scatter.xScale(x).yScale(y);                                                                                       // 11460
    xAxis.orient('bottom').tickPadding(10);                                                                            // 11461
    yAxis                                                                                                              // 11462
        .orient((rightAlignYAxis) ? 'right' : 'left')                                                                  // 11463
        .tickPadding(10)                                                                                               // 11464
    ;                                                                                                                  // 11465
    distX.axis('x');                                                                                                   // 11466
    distY.axis('y');                                                                                                   // 11467
    tooltip                                                                                                            // 11468
        .headerFormatter(function(d, i) {                                                                              // 11469
            return xAxis.tickFormat()(d, i);                                                                           // 11470
        })                                                                                                             // 11471
        .valueFormatter(function(d, i) {                                                                               // 11472
            return yAxis.tickFormat()(d, i);                                                                           // 11473
        });                                                                                                            // 11474
                                                                                                                       // 11475
    //============================================================                                                     // 11476
    // Private Variables                                                                                               // 11477
    //------------------------------------------------------------                                                     // 11478
                                                                                                                       // 11479
    var x0, y0                                                                                                         // 11480
        , renderWatch = nv.utils.renderWatch(dispatch, duration);                                                      // 11481
                                                                                                                       // 11482
    var stateGetter = function(data) {                                                                                 // 11483
        return function(){                                                                                             // 11484
            return {                                                                                                   // 11485
                active: data.map(function(d) { return !d.disabled })                                                   // 11486
            };                                                                                                         // 11487
        }                                                                                                              // 11488
    };                                                                                                                 // 11489
                                                                                                                       // 11490
    var stateSetter = function(data) {                                                                                 // 11491
        return function(state) {                                                                                       // 11492
            if (state.active !== undefined)                                                                            // 11493
                data.forEach(function(series,i) {                                                                      // 11494
                    series.disabled = !state.active[i];                                                                // 11495
                });                                                                                                    // 11496
        }                                                                                                              // 11497
    };                                                                                                                 // 11498
                                                                                                                       // 11499
    function chart(selection) {                                                                                        // 11500
        renderWatch.reset();                                                                                           // 11501
        renderWatch.models(scatter);                                                                                   // 11502
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 11503
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 11504
        if (showDistX) renderWatch.models(distX);                                                                      // 11505
        if (showDistY) renderWatch.models(distY);                                                                      // 11506
                                                                                                                       // 11507
        selection.each(function(data) {                                                                                // 11508
            var that = this;                                                                                           // 11509
                                                                                                                       // 11510
            container = d3.select(this);                                                                               // 11511
            nv.utils.initSVG(container);                                                                               // 11512
                                                                                                                       // 11513
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 11514
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 11515
                                                                                                                       // 11516
            chart.update = function() {                                                                                // 11517
                if (duration === 0)                                                                                    // 11518
                    container.call(chart);                                                                             // 11519
                else                                                                                                   // 11520
                    container.transition().duration(duration).call(chart);                                             // 11521
            };                                                                                                         // 11522
            chart.container = this;                                                                                    // 11523
                                                                                                                       // 11524
            state                                                                                                      // 11525
                .setter(stateSetter(data), chart.update)                                                               // 11526
                .getter(stateGetter(data))                                                                             // 11527
                .update();                                                                                             // 11528
                                                                                                                       // 11529
            // DEPRECATED set state.disableddisabled                                                                   // 11530
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 11531
                                                                                                                       // 11532
            if (!defaultState) {                                                                                       // 11533
                var key;                                                                                               // 11534
                defaultState = {};                                                                                     // 11535
                for (key in state) {                                                                                   // 11536
                    if (state[key] instanceof Array)                                                                   // 11537
                        defaultState[key] = state[key].slice(0);                                                       // 11538
                    else                                                                                               // 11539
                        defaultState[key] = state[key];                                                                // 11540
                }                                                                                                      // 11541
            }                                                                                                          // 11542
                                                                                                                       // 11543
            // Display noData message if there's nothing to show.                                                      // 11544
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 11545
                nv.utils.noData(chart, container);                                                                     // 11546
                renderWatch.renderEnd('scatter immediate');                                                            // 11547
                return chart;                                                                                          // 11548
            } else {                                                                                                   // 11549
                container.selectAll('.nv-noData').remove();                                                            // 11550
            }                                                                                                          // 11551
                                                                                                                       // 11552
            // Setup Scales                                                                                            // 11553
            x = scatter.xScale();                                                                                      // 11554
            y = scatter.yScale();                                                                                      // 11555
                                                                                                                       // 11556
            // Setup containers and skeleton of chart                                                                  // 11557
            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);                                  // 11558
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());
            var gEnter = wrapEnter.append('g');                                                                        // 11560
            var g = wrap.select('g');                                                                                  // 11561
                                                                                                                       // 11562
            // background for pointer events                                                                           // 11563
            gEnter.append('rect').attr('class', 'nvd3 nv-background').style("pointer-events","none");                  // 11564
                                                                                                                       // 11565
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 11566
            gEnter.append('g').attr('class', 'nv-y nv-axis');                                                          // 11567
            gEnter.append('g').attr('class', 'nv-scatterWrap');                                                        // 11568
            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');                                                // 11569
            gEnter.append('g').attr('class', 'nv-distWrap');                                                           // 11570
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 11571
                                                                                                                       // 11572
            if (rightAlignYAxis) {                                                                                     // 11573
                g.select(".nv-y.nv-axis")                                                                              // 11574
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 11575
            }                                                                                                          // 11576
                                                                                                                       // 11577
            // Legend                                                                                                  // 11578
            if (showLegend) {                                                                                          // 11579
                var legendWidth = availableWidth;                                                                      // 11580
                legend.width(legendWidth);                                                                             // 11581
                                                                                                                       // 11582
                wrap.select('.nv-legendWrap')                                                                          // 11583
                    .datum(data)                                                                                       // 11584
                    .call(legend);                                                                                     // 11585
                                                                                                                       // 11586
                if ( margin.top != legend.height()) {                                                                  // 11587
                    margin.top = legend.height();                                                                      // 11588
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 11589
                }                                                                                                      // 11590
                                                                                                                       // 11591
                wrap.select('.nv-legendWrap')                                                                          // 11592
                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');                                      // 11593
            }                                                                                                          // 11594
                                                                                                                       // 11595
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 11596
                                                                                                                       // 11597
            // Main Chart Component(s)                                                                                 // 11598
            scatter                                                                                                    // 11599
                .width(availableWidth)                                                                                 // 11600
                .height(availableHeight)                                                                               // 11601
                .color(data.map(function(d,i) {                                                                        // 11602
                    d.color = d.color || color(d, i);                                                                  // 11603
                    return d.color;                                                                                    // 11604
                }).filter(function(d,i) { return !data[i].disabled }));                                                // 11605
                                                                                                                       // 11606
            wrap.select('.nv-scatterWrap')                                                                             // 11607
                .datum(data.filter(function(d) { return !d.disabled }))                                                // 11608
                .call(scatter);                                                                                        // 11609
                                                                                                                       // 11610
                                                                                                                       // 11611
            wrap.select('.nv-regressionLinesWrap')                                                                     // 11612
                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');                                         // 11613
                                                                                                                       // 11614
            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')                             // 11615
                .data(function (d) {                                                                                   // 11616
                    return d;                                                                                          // 11617
                });                                                                                                    // 11618
                                                                                                                       // 11619
            regWrap.enter().append('g').attr('class', 'nv-regLines');                                                  // 11620
                                                                                                                       // 11621
            var regLine = regWrap.selectAll('.nv-regLine')                                                             // 11622
                .data(function (d) {                                                                                   // 11623
                    return [d]                                                                                         // 11624
                });                                                                                                    // 11625
                                                                                                                       // 11626
            regLine.enter()                                                                                            // 11627
                .append('line').attr('class', 'nv-regLine')                                                            // 11628
                .style('stroke-opacity', 0);                                                                           // 11629
                                                                                                                       // 11630
            // don't add lines unless we have slope and intercept to use                                               // 11631
            regLine.filter(function(d) {                                                                               // 11632
                return d.intercept && d.slope;                                                                         // 11633
            })                                                                                                         // 11634
                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')                                         // 11635
                .attr('x1', x.range()[0])                                                                              // 11636
                .attr('x2', x.range()[1])                                                                              // 11637
                .attr('y1', function (d, i) {                                                                          // 11638
                    return y(x.domain()[0] * d.slope + d.intercept)                                                    // 11639
                })                                                                                                     // 11640
                .attr('y2', function (d, i) {                                                                          // 11641
                    return y(x.domain()[1] * d.slope + d.intercept)                                                    // 11642
                })                                                                                                     // 11643
                .style('stroke', function (d, i, j) {                                                                  // 11644
                    return color(d, j)                                                                                 // 11645
                })                                                                                                     // 11646
                .style('stroke-opacity', function (d, i) {                                                             // 11647
                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1
                });                                                                                                    // 11649
                                                                                                                       // 11650
            // Setup Axes                                                                                              // 11651
            if (showXAxis) {                                                                                           // 11652
                xAxis                                                                                                  // 11653
                    .scale(x)                                                                                          // 11654
                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                           // 11655
                    .tickSize( -availableHeight , 0);                                                                  // 11656
                                                                                                                       // 11657
                g.select('.nv-x.nv-axis')                                                                              // 11658
                    .attr('transform', 'translate(0,' + y.range()[0] + ')')                                            // 11659
                    .call(xAxis);                                                                                      // 11660
            }                                                                                                          // 11661
                                                                                                                       // 11662
            if (showYAxis) {                                                                                           // 11663
                yAxis                                                                                                  // 11664
                    .scale(y)                                                                                          // 11665
                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )                                           // 11666
                    .tickSize( -availableWidth, 0);                                                                    // 11667
                                                                                                                       // 11668
                g.select('.nv-y.nv-axis')                                                                              // 11669
                    .call(yAxis);                                                                                      // 11670
            }                                                                                                          // 11671
                                                                                                                       // 11672
                                                                                                                       // 11673
            if (showDistX) {                                                                                           // 11674
                distX                                                                                                  // 11675
                    .getData(scatter.x())                                                                              // 11676
                    .scale(x)                                                                                          // 11677
                    .width(availableWidth)                                                                             // 11678
                    .color(data.map(function(d,i) {                                                                    // 11679
                        return d.color || color(d, i);                                                                 // 11680
                    }).filter(function(d,i) { return !data[i].disabled }));                                            // 11681
                gEnter.select('.nv-distWrap').append('g')                                                              // 11682
                    .attr('class', 'nv-distributionX');                                                                // 11683
                g.select('.nv-distributionX')                                                                          // 11684
                    .attr('transform', 'translate(0,' + y.range()[0] + ')')                                            // 11685
                    .datum(data.filter(function(d) { return !d.disabled }))                                            // 11686
                    .call(distX);                                                                                      // 11687
            }                                                                                                          // 11688
                                                                                                                       // 11689
            if (showDistY) {                                                                                           // 11690
                distY                                                                                                  // 11691
                    .getData(scatter.y())                                                                              // 11692
                    .scale(y)                                                                                          // 11693
                    .width(availableHeight)                                                                            // 11694
                    .color(data.map(function(d,i) {                                                                    // 11695
                        return d.color || color(d, i);                                                                 // 11696
                    }).filter(function(d,i) { return !data[i].disabled }));                                            // 11697
                gEnter.select('.nv-distWrap').append('g')                                                              // 11698
                    .attr('class', 'nv-distributionY');                                                                // 11699
                g.select('.nv-distributionY')                                                                          // 11700
                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')     // 11701
                    .datum(data.filter(function(d) { return !d.disabled }))                                            // 11702
                    .call(distY);                                                                                      // 11703
            }                                                                                                          // 11704
                                                                                                                       // 11705
            //============================================================                                             // 11706
            // Event Handling/Dispatching (in chart's scope)                                                           // 11707
            //------------------------------------------------------------                                             // 11708
                                                                                                                       // 11709
            legend.dispatch.on('stateChange', function(newState) {                                                     // 11710
                for (var key in newState)                                                                              // 11711
                    state[key] = newState[key];                                                                        // 11712
                dispatch.stateChange(state);                                                                           // 11713
                chart.update();                                                                                        // 11714
            });                                                                                                        // 11715
                                                                                                                       // 11716
            // Update chart from a state object passed to event handler                                                // 11717
            dispatch.on('changeState', function(e) {                                                                   // 11718
                if (typeof e.disabled !== 'undefined') {                                                               // 11719
                    data.forEach(function(series,i) {                                                                  // 11720
                        series.disabled = e.disabled[i];                                                               // 11721
                    });                                                                                                // 11722
                    state.disabled = e.disabled;                                                                       // 11723
                }                                                                                                      // 11724
                chart.update();                                                                                        // 11725
            });                                                                                                        // 11726
                                                                                                                       // 11727
            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block             // 11728
            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {                                             // 11729
                tooltip.hidden(true);                                                                                  // 11730
                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)
                    .attr('y1', 0);                                                                                    // 11732
                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)
                    .attr('x2', distY.size());                                                                         // 11734
            });                                                                                                        // 11735
                                                                                                                       // 11736
            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {                                            // 11737
                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)                     // 11738
                    .attr('y1', evt.pos.top - availableHeight - margin.top);                                           // 11739
                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)                     // 11740
                    .attr('x2', evt.pos.left + distX.size() - margin.left);                                            // 11741
                tooltip.position(evt.pos).data(evt).hidden(false);                                                     // 11742
            });                                                                                                        // 11743
                                                                                                                       // 11744
            //store old scales for use in transitions on update                                                        // 11745
            x0 = x.copy();                                                                                             // 11746
            y0 = y.copy();                                                                                             // 11747
                                                                                                                       // 11748
        });                                                                                                            // 11749
                                                                                                                       // 11750
        renderWatch.renderEnd('scatter with line immediate');                                                          // 11751
        return chart;                                                                                                  // 11752
    }                                                                                                                  // 11753
                                                                                                                       // 11754
    //============================================================                                                     // 11755
    // Expose Public Variables                                                                                         // 11756
    //------------------------------------------------------------                                                     // 11757
                                                                                                                       // 11758
    // expose chart's sub-components                                                                                   // 11759
    chart.dispatch = dispatch;                                                                                         // 11760
    chart.scatter = scatter;                                                                                           // 11761
    chart.legend = legend;                                                                                             // 11762
    chart.xAxis = xAxis;                                                                                               // 11763
    chart.yAxis = yAxis;                                                                                               // 11764
    chart.distX = distX;                                                                                               // 11765
    chart.distY = distY;                                                                                               // 11766
    chart.tooltip = tooltip;                                                                                           // 11767
                                                                                                                       // 11768
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 11769
    chart._options = Object.create({}, {                                                                               // 11770
        // simple options, just get/set the necessary values                                                           // 11771
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 11772
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 11773
        container:  {get: function(){return container;}, set: function(_){container=_;}},                              // 11774
        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},                              // 11775
        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},                              // 11776
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 11777
        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                              // 11778
        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                              // 11779
        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                  // 11780
        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},                                    // 11781
        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},                                // 11782
                                                                                                                       // 11783
        // deprecated options                                                                                          // 11784
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 11785
            // deprecated after 1.7.1                                                                                  // 11786
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 11787
            tooltip.enabled(!!_);                                                                                      // 11788
        }},                                                                                                            // 11789
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 11790
            // deprecated after 1.7.1                                                                                  // 11791
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 11792
            tooltip.contentGenerator(_);                                                                               // 11793
        }},                                                                                                            // 11794
        tooltipXContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                    // 11795
            // deprecated after 1.7.1                                                                                  // 11796
            nv.deprecated('tooltipContent', 'This option is removed, put values into main tooltip.');                  // 11797
        }},                                                                                                            // 11798
        tooltipYContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                    // 11799
            // deprecated after 1.7.1                                                                                  // 11800
            nv.deprecated('tooltipContent', 'This option is removed, put values into main tooltip.');                  // 11801
        }},                                                                                                            // 11802
                                                                                                                       // 11803
        // options that require extra logic in the setter                                                              // 11804
        margin: {get: function(){return margin;}, set: function(_){                                                    // 11805
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 11806
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 11807
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 11808
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 11809
        }},                                                                                                            // 11810
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 11811
            rightAlignYAxis = _;                                                                                       // 11812
            yAxis.orient( (_) ? 'right' : 'left');                                                                     // 11813
        }},                                                                                                            // 11814
        color: {get: function(){return color;}, set: function(_){                                                      // 11815
            color = nv.utils.getColor(_);                                                                              // 11816
            legend.color(color);                                                                                       // 11817
            distX.color(color);                                                                                        // 11818
            distY.color(color);                                                                                        // 11819
        }}                                                                                                             // 11820
    });                                                                                                                // 11821
                                                                                                                       // 11822
    nv.utils.inheritOptions(chart, scatter);                                                                           // 11823
    nv.utils.initOptions(chart);                                                                                       // 11824
    return chart;                                                                                                      // 11825
};                                                                                                                     // 11826
                                                                                                                       // 11827
nv.models.sparkline = function() {                                                                                     // 11828
    "use strict";                                                                                                      // 11829
                                                                                                                       // 11830
    //============================================================                                                     // 11831
    // Public Variables with Default Settings                                                                          // 11832
    //------------------------------------------------------------                                                     // 11833
                                                                                                                       // 11834
    var margin = {top: 2, right: 0, bottom: 2, left: 0}                                                                // 11835
        , width = 400                                                                                                  // 11836
        , height = 32                                                                                                  // 11837
        , container = null                                                                                             // 11838
        , animate = true                                                                                               // 11839
        , x = d3.scale.linear()                                                                                        // 11840
        , y = d3.scale.linear()                                                                                        // 11841
        , getX = function(d) { return d.x }                                                                            // 11842
        , getY = function(d) { return d.y }                                                                            // 11843
        , color = nv.utils.getColor(['#000'])                                                                          // 11844
        , xDomain                                                                                                      // 11845
        , yDomain                                                                                                      // 11846
        , xRange                                                                                                       // 11847
        , yRange                                                                                                       // 11848
        ;                                                                                                              // 11849
                                                                                                                       // 11850
    function chart(selection) {                                                                                        // 11851
        selection.each(function(data) {                                                                                // 11852
            var availableWidth = width - margin.left - margin.right,                                                   // 11853
                availableHeight = height - margin.top - margin.bottom;                                                 // 11854
                                                                                                                       // 11855
            container = d3.select(this);                                                                               // 11856
            nv.utils.initSVG(container);                                                                               // 11857
                                                                                                                       // 11858
            // Setup Scales                                                                                            // 11859
            x   .domain(xDomain || d3.extent(data, getX ))                                                             // 11860
                .range(xRange || [0, availableWidth]);                                                                 // 11861
                                                                                                                       // 11862
            y   .domain(yDomain || d3.extent(data, getY ))                                                             // 11863
                .range(yRange || [availableHeight, 0]);                                                                // 11864
                                                                                                                       // 11865
            // Setup containers and skeleton of chart                                                                  // 11866
            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);                                     // 11867
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');                       // 11868
            var gEnter = wrapEnter.append('g');                                                                        // 11869
            var g = wrap.select('g');                                                                                  // 11870
                                                                                                                       // 11871
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')                                // 11872
                                                                                                                       // 11873
            var paths = wrap.selectAll('path')                                                                         // 11874
                .data(function(d) { return [d] });                                                                     // 11875
            paths.enter().append('path');                                                                              // 11876
            paths.exit().remove();                                                                                     // 11877
            paths                                                                                                      // 11878
                .style('stroke', function(d,i) { return d.color || color(d, i) })                                      // 11879
                .attr('d', d3.svg.line()                                                                               // 11880
                    .x(function(d,i) { return x(getX(d,i)) })                                                          // 11881
                    .y(function(d,i) { return y(getY(d,i)) })                                                          // 11882
            );                                                                                                         // 11883
                                                                                                                       // 11884
            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)                                     // 11885
            var points = wrap.selectAll('circle.nv-point')                                                             // 11886
                .data(function(data) {                                                                                 // 11887
                    var yValues = data.map(function(d, i) { return getY(d,i); });                                      // 11888
                    function pointIndex(index) {                                                                       // 11889
                        if (index != -1) {                                                                             // 11890
                            var result = data[index];                                                                  // 11891
                            result.pointIndex = index;                                                                 // 11892
                            return result;                                                                             // 11893
                        } else {                                                                                       // 11894
                            return null;                                                                               // 11895
                        }                                                                                              // 11896
                    }                                                                                                  // 11897
                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),                                     // 11898
                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),                                         // 11899
                        currentPoint = pointIndex(yValues.length - 1);                                                 // 11900
                    return [minPoint, maxPoint, currentPoint].filter(function (d) {return d != null;});                // 11901
                });                                                                                                    // 11902
            points.enter().append('circle');                                                                           // 11903
            points.exit().remove();                                                                                    // 11904
            points                                                                                                     // 11905
                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })                                          // 11906
                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })                                          // 11907
                .attr('r', 2)                                                                                          // 11908
                .attr('class', function(d,i) {                                                                         // 11909
                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :                       // 11910
                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'   // 11911
                });                                                                                                    // 11912
        });                                                                                                            // 11913
                                                                                                                       // 11914
        return chart;                                                                                                  // 11915
    }                                                                                                                  // 11916
                                                                                                                       // 11917
    //============================================================                                                     // 11918
    // Expose Public Variables                                                                                         // 11919
    //------------------------------------------------------------                                                     // 11920
                                                                                                                       // 11921
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 11922
                                                                                                                       // 11923
    chart._options = Object.create({}, {                                                                               // 11924
        // simple options, just get/set the necessary values                                                           // 11925
        width:     {get: function(){return width;}, set: function(_){width=_;}},                                       // 11926
        height:    {get: function(){return height;}, set: function(_){height=_;}},                                     // 11927
        xDomain:   {get: function(){return xDomain;}, set: function(_){xDomain=_;}},                                   // 11928
        yDomain:   {get: function(){return yDomain;}, set: function(_){yDomain=_;}},                                   // 11929
        xRange:    {get: function(){return xRange;}, set: function(_){xRange=_;}},                                     // 11930
        yRange:    {get: function(){return yRange;}, set: function(_){yRange=_;}},                                     // 11931
        xScale:    {get: function(){return x;}, set: function(_){x=_;}},                                               // 11932
        yScale:    {get: function(){return y;}, set: function(_){y=_;}},                                               // 11933
        animate:   {get: function(){return animate;}, set: function(_){animate=_;}},                                   // 11934
                                                                                                                       // 11935
        //functor options                                                                                              // 11936
        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},                                     // 11937
        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},                                     // 11938
                                                                                                                       // 11939
        // options that require extra logic in the setter                                                              // 11940
        margin: {get: function(){return margin;}, set: function(_){                                                    // 11941
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 11942
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 11943
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 11944
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 11945
        }},                                                                                                            // 11946
        color:  {get: function(){return color;}, set: function(_){                                                     // 11947
            color = nv.utils.getColor(_);                                                                              // 11948
        }}                                                                                                             // 11949
    });                                                                                                                // 11950
                                                                                                                       // 11951
    nv.utils.initOptions(chart);                                                                                       // 11952
    return chart;                                                                                                      // 11953
};                                                                                                                     // 11954
                                                                                                                       // 11955
nv.models.sparklinePlus = function() {                                                                                 // 11956
    "use strict";                                                                                                      // 11957
                                                                                                                       // 11958
    //============================================================                                                     // 11959
    // Public Variables with Default Settings                                                                          // 11960
    //------------------------------------------------------------                                                     // 11961
                                                                                                                       // 11962
    var sparkline = nv.models.sparkline();                                                                             // 11963
                                                                                                                       // 11964
    var margin = {top: 15, right: 100, bottom: 10, left: 50}                                                           // 11965
        , width = null                                                                                                 // 11966
        , height = null                                                                                                // 11967
        , x                                                                                                            // 11968
        , y                                                                                                            // 11969
        , index = []                                                                                                   // 11970
        , paused = false                                                                                               // 11971
        , xTickFormat = d3.format(',r')                                                                                // 11972
        , yTickFormat = d3.format(',.2f')                                                                              // 11973
        , showLastValue = true                                                                                         // 11974
        , alignValue = true                                                                                            // 11975
        , rightAlignValue = false                                                                                      // 11976
        , noData = null                                                                                                // 11977
        ;                                                                                                              // 11978
                                                                                                                       // 11979
    function chart(selection) {                                                                                        // 11980
        selection.each(function(data) {                                                                                // 11981
            var container = d3.select(this);                                                                           // 11982
            nv.utils.initSVG(container);                                                                               // 11983
                                                                                                                       // 11984
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 11985
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 11986
                                                                                                                       // 11987
            chart.update = function() { container.call(chart); };                                                      // 11988
            chart.container = this;                                                                                    // 11989
                                                                                                                       // 11990
            // Display No Data message if there's nothing to show.                                                     // 11991
            if (!data || !data.length) {                                                                               // 11992
                nv.utils.noData(chart, container)                                                                      // 11993
                return chart;                                                                                          // 11994
            } else {                                                                                                   // 11995
                container.selectAll('.nv-noData').remove();                                                            // 11996
            }                                                                                                          // 11997
                                                                                                                       // 11998
            var currentValue = sparkline.y()(data[data.length-1], data.length-1);                                      // 11999
                                                                                                                       // 12000
            // Setup Scales                                                                                            // 12001
            x = sparkline.xScale();                                                                                    // 12002
            y = sparkline.yScale();                                                                                    // 12003
                                                                                                                       // 12004
            // Setup containers and skeleton of chart                                                                  // 12005
            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);                                 // 12006
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');                   // 12007
            var gEnter = wrapEnter.append('g');                                                                        // 12008
            var g = wrap.select('g');                                                                                  // 12009
                                                                                                                       // 12010
            gEnter.append('g').attr('class', 'nv-sparklineWrap');                                                      // 12011
            gEnter.append('g').attr('class', 'nv-valueWrap');                                                          // 12012
            gEnter.append('g').attr('class', 'nv-hoverArea');                                                          // 12013
                                                                                                                       // 12014
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 12015
                                                                                                                       // 12016
            // Main Chart Component(s)                                                                                 // 12017
            var sparklineWrap = g.select('.nv-sparklineWrap');                                                         // 12018
                                                                                                                       // 12019
            sparkline.width(availableWidth).height(availableHeight);                                                   // 12020
            sparklineWrap.call(sparkline);                                                                             // 12021
                                                                                                                       // 12022
            if (showLastValue) {                                                                                       // 12023
                var valueWrap = g.select('.nv-valueWrap');                                                             // 12024
                var value = valueWrap.selectAll('.nv-currentValue')                                                    // 12025
                    .data([currentValue]);                                                                             // 12026
                                                                                                                       // 12027
                value.enter().append('text').attr('class', 'nv-currentValue')                                          // 12028
                    .attr('dx', rightAlignValue ? -8 : 8)                                                              // 12029
                    .attr('dy', '.9em')                                                                                // 12030
                    .style('text-anchor', rightAlignValue ? 'end' : 'start');                                          // 12031
                                                                                                                       // 12032
                value                                                                                                  // 12033
                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))                                  // 12034
                    .attr('y', alignValue ? function (d) {                                                             // 12035
                        return y(d)                                                                                    // 12036
                    } : 0)                                                                                             // 12037
                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))                          // 12038
                    .text(yTickFormat(currentValue));                                                                  // 12039
            }                                                                                                          // 12040
                                                                                                                       // 12041
            gEnter.select('.nv-hoverArea').append('rect')                                                              // 12042
                .on('mousemove', sparklineHover)                                                                       // 12043
                .on('click', function() { paused = !paused })                                                          // 12044
                .on('mouseout', function() { index = []; updateValueLine(); });                                        // 12045
                                                                                                                       // 12046
            g.select('.nv-hoverArea rect')                                                                             // 12047
                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })       // 12048
                .attr('width', availableWidth + margin.left + margin.right)                                            // 12049
                .attr('height', availableHeight + margin.top);                                                         // 12050
                                                                                                                       // 12051
            //index is currently global (within the chart), may or may not keep it that way                            // 12052
            function updateValueLine() {                                                                               // 12053
                if (paused) return;                                                                                    // 12054
                                                                                                                       // 12055
                var hoverValue = g.selectAll('.nv-hoverValue').data(index);                                            // 12056
                                                                                                                       // 12057
                var hoverEnter = hoverValue.enter()                                                                    // 12058
                    .append('g').attr('class', 'nv-hoverValue')                                                        // 12059
                    .style('stroke-opacity', 0)                                                                        // 12060
                    .style('fill-opacity', 0);                                                                         // 12061
                                                                                                                       // 12062
                hoverValue.exit()                                                                                      // 12063
                    .transition().duration(250)                                                                        // 12064
                    .style('stroke-opacity', 0)                                                                        // 12065
                    .style('fill-opacity', 0)                                                                          // 12066
                    .remove();                                                                                         // 12067
                                                                                                                       // 12068
                hoverValue                                                                                             // 12069
                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })      // 12070
                    .transition().duration(250)                                                                        // 12071
                    .style('stroke-opacity', 1)                                                                        // 12072
                    .style('fill-opacity', 1);                                                                         // 12073
                                                                                                                       // 12074
                if (!index.length) return;                                                                             // 12075
                                                                                                                       // 12076
                hoverEnter.append('line')                                                                              // 12077
                    .attr('x1', 0)                                                                                     // 12078
                    .attr('y1', -margin.top)                                                                           // 12079
                    .attr('x2', 0)                                                                                     // 12080
                    .attr('y2', availableHeight);                                                                      // 12081
                                                                                                                       // 12082
                hoverEnter.append('text').attr('class', 'nv-xValue')                                                   // 12083
                    .attr('x', -6)                                                                                     // 12084
                    .attr('y', -margin.top)                                                                            // 12085
                    .attr('text-anchor', 'end')                                                                        // 12086
                    .attr('dy', '.9em');                                                                               // 12087
                                                                                                                       // 12088
                g.select('.nv-hoverValue .nv-xValue')                                                                  // 12089
                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));                                       // 12090
                                                                                                                       // 12091
                hoverEnter.append('text').attr('class', 'nv-yValue')                                                   // 12092
                    .attr('x', 6)                                                                                      // 12093
                    .attr('y', -margin.top)                                                                            // 12094
                    .attr('text-anchor', 'start')                                                                      // 12095
                    .attr('dy', '.9em');                                                                               // 12096
                                                                                                                       // 12097
                g.select('.nv-hoverValue .nv-yValue')                                                                  // 12098
                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));                                       // 12099
            }                                                                                                          // 12100
                                                                                                                       // 12101
            function sparklineHover() {                                                                                // 12102
                if (paused) return;                                                                                    // 12103
                                                                                                                       // 12104
                var pos = d3.mouse(this)[0] - margin.left;                                                             // 12105
                                                                                                                       // 12106
                function getClosestIndex(data, x) {                                                                    // 12107
                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);                                            // 12108
                    var closestIndex = 0;                                                                              // 12109
                    for (var i = 0; i < data.length; i++){                                                             // 12110
                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {                                      // 12111
                            distance = Math.abs(sparkline.x()(data[i], i) - x);                                        // 12112
                            closestIndex = i;                                                                          // 12113
                        }                                                                                              // 12114
                    }                                                                                                  // 12115
                    return closestIndex;                                                                               // 12116
                }                                                                                                      // 12117
                                                                                                                       // 12118
                index = [getClosestIndex(data, Math.round(x.invert(pos)))];                                            // 12119
                updateValueLine();                                                                                     // 12120
            }                                                                                                          // 12121
                                                                                                                       // 12122
        });                                                                                                            // 12123
                                                                                                                       // 12124
        return chart;                                                                                                  // 12125
    }                                                                                                                  // 12126
                                                                                                                       // 12127
    //============================================================                                                     // 12128
    // Expose Public Variables                                                                                         // 12129
    //------------------------------------------------------------                                                     // 12130
                                                                                                                       // 12131
    // expose chart's sub-components                                                                                   // 12132
    chart.sparkline = sparkline;                                                                                       // 12133
                                                                                                                       // 12134
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 12135
                                                                                                                       // 12136
    chart._options = Object.create({}, {                                                                               // 12137
        // simple options, just get/set the necessary values                                                           // 12138
        width:           {get: function(){return width;}, set: function(_){width=_;}},                                 // 12139
        height:          {get: function(){return height;}, set: function(_){height=_;}},                               // 12140
        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},                     // 12141
        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},                     // 12142
        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},                 // 12143
        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},                       // 12144
        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},             // 12145
        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},                               // 12146
                                                                                                                       // 12147
        // options that require extra logic in the setter                                                              // 12148
        margin: {get: function(){return margin;}, set: function(_){                                                    // 12149
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 12150
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 12151
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 12152
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 12153
        }}                                                                                                             // 12154
    });                                                                                                                // 12155
                                                                                                                       // 12156
    nv.utils.inheritOptions(chart, sparkline);                                                                         // 12157
    nv.utils.initOptions(chart);                                                                                       // 12158
                                                                                                                       // 12159
    return chart;                                                                                                      // 12160
};                                                                                                                     // 12161
                                                                                                                       // 12162
nv.models.stackedArea = function() {                                                                                   // 12163
    "use strict";                                                                                                      // 12164
                                                                                                                       // 12165
    //============================================================                                                     // 12166
    // Public Variables with Default Settings                                                                          // 12167
    //------------------------------------------------------------                                                     // 12168
                                                                                                                       // 12169
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 12170
        , width = 960                                                                                                  // 12171
        , height = 500                                                                                                 // 12172
        , color = nv.utils.defaultColor() // a function that computes the color                                        // 12173
        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one                // 12174
        , container = null                                                                                             // 12175
        , getX = function(d) { return d.x } // accessor to get the x value from a data point                           // 12176
        , getY = function(d) { return d.y } // accessor to get the y value from a data point                           // 12177
        , style = 'stack'                                                                                              // 12178
        , offset = 'zero'                                                                                              // 12179
        , order = 'default'                                                                                            // 12180
        , interpolate = 'linear'  // controls the line interpolation                                                   // 12181
        , clipEdge = false // if true, masks lines within x and y scale                                                // 12182
        , x //can be accessed via chart.xScale()                                                                       // 12183
        , y //can be accessed via chart.yScale()                                                                       // 12184
        , scatter = nv.models.scatter()                                                                                // 12185
        , duration = 250                                                                                               // 12186
        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')
        ;                                                                                                              // 12188
                                                                                                                       // 12189
    scatter                                                                                                            // 12190
        .pointSize(2.2) // default size                                                                                // 12191
        .pointDomain([2.2, 2.2]) // all the same size by default                                                       // 12192
    ;                                                                                                                  // 12193
                                                                                                                       // 12194
    /************************************                                                                              // 12195
     * offset:                                                                                                         // 12196
     *   'wiggle' (stream)                                                                                             // 12197
     *   'zero' (stacked)                                                                                              // 12198
     *   'expand' (normalize to 100%)                                                                                  // 12199
     *   'silhouette' (simple centered)                                                                                // 12200
     *                                                                                                                 // 12201
     * order:                                                                                                          // 12202
     *   'inside-out' (stream)                                                                                         // 12203
     *   'default' (input order)                                                                                       // 12204
     ************************************/                                                                             // 12205
                                                                                                                       // 12206
    var renderWatch = nv.utils.renderWatch(dispatch, duration);                                                        // 12207
                                                                                                                       // 12208
    function chart(selection) {                                                                                        // 12209
        renderWatch.reset();                                                                                           // 12210
        renderWatch.models(scatter);                                                                                   // 12211
        selection.each(function(data) {                                                                                // 12212
            var availableWidth = width - margin.left - margin.right,                                                   // 12213
                availableHeight = height - margin.top - margin.bottom;                                                 // 12214
                                                                                                                       // 12215
            container = d3.select(this);                                                                               // 12216
            nv.utils.initSVG(container);                                                                               // 12217
                                                                                                                       // 12218
            // Setup Scales                                                                                            // 12219
            x = scatter.xScale();                                                                                      // 12220
            y = scatter.yScale();                                                                                      // 12221
                                                                                                                       // 12222
            var dataRaw = data;                                                                                        // 12223
            // Injecting point index into each point because d3.layout.stack().out does not give index                 // 12224
            data.forEach(function(aseries, i) {                                                                        // 12225
                aseries.seriesIndex = i;                                                                               // 12226
                aseries.values = aseries.values.map(function(d, j) {                                                   // 12227
                    d.index = j;                                                                                       // 12228
                    d.seriesIndex = i;                                                                                 // 12229
                    return d;                                                                                          // 12230
                });                                                                                                    // 12231
            });                                                                                                        // 12232
                                                                                                                       // 12233
            var dataFiltered = data.filter(function(series) {                                                          // 12234
                return !series.disabled;                                                                               // 12235
            });                                                                                                        // 12236
                                                                                                                       // 12237
            data = d3.layout.stack()                                                                                   // 12238
                .order(order)                                                                                          // 12239
                .offset(offset)                                                                                        // 12240
                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion
                .x(getX)                                                                                               // 12242
                .y(getY)                                                                                               // 12243
                .out(function(d, y0, y) {                                                                              // 12244
                    d.display = {                                                                                      // 12245
                        y: y,                                                                                          // 12246
                        y0: y0                                                                                         // 12247
                    };                                                                                                 // 12248
                })                                                                                                     // 12249
            (dataFiltered);                                                                                            // 12250
                                                                                                                       // 12251
            // Setup containers and skeleton of chart                                                                  // 12252
            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);                                   // 12253
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');                     // 12254
            var defsEnter = wrapEnter.append('defs');                                                                  // 12255
            var gEnter = wrapEnter.append('g');                                                                        // 12256
            var g = wrap.select('g');                                                                                  // 12257
                                                                                                                       // 12258
            gEnter.append('g').attr('class', 'nv-areaWrap');                                                           // 12259
            gEnter.append('g').attr('class', 'nv-scatterWrap');                                                        // 12260
                                                                                                                       // 12261
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 12262
                                                                                                                       // 12263
            // If the user has not specified forceY, make sure 0 is included in the domain                             // 12264
            // Otherwise, use user-specified values for forceY                                                         // 12265
            if (scatter.forceY().length == 0) {                                                                        // 12266
                scatter.forceY().push(0);                                                                              // 12267
            }                                                                                                          // 12268
                                                                                                                       // 12269
            scatter                                                                                                    // 12270
                .width(availableWidth)                                                                                 // 12271
                .height(availableHeight)                                                                               // 12272
                .x(getX)                                                                                               // 12273
                .y(function(d) {                                                                                       // 12274
                    if (d.display !== undefined) { return d.display.y + d.display.y0; }                                // 12275
                })                                                                                                     // 12276
                .forceY([0])                                                                                           // 12277
                .color(data.map(function(d,i) {                                                                        // 12278
                    return d.color || color(d, d.seriesIndex);                                                         // 12279
                }));                                                                                                   // 12280
                                                                                                                       // 12281
            var scatterWrap = g.select('.nv-scatterWrap')                                                              // 12282
                .datum(data);                                                                                          // 12283
                                                                                                                       // 12284
            scatterWrap.call(scatter);                                                                                 // 12285
                                                                                                                       // 12286
            defsEnter.append('clipPath')                                                                               // 12287
                .attr('id', 'nv-edge-clip-' + id)                                                                      // 12288
                .append('rect');                                                                                       // 12289
                                                                                                                       // 12290
            wrap.select('#nv-edge-clip-' + id + ' rect')                                                               // 12291
                .attr('width', availableWidth)                                                                         // 12292
                .attr('height', availableHeight);                                                                      // 12293
                                                                                                                       // 12294
            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');                                      // 12295
                                                                                                                       // 12296
            var area = d3.svg.area()                                                                                   // 12297
                .x(function(d,i)  { return x(getX(d,i)) })                                                             // 12298
                .y0(function(d) {                                                                                      // 12299
                    return y(d.display.y0)                                                                             // 12300
                })                                                                                                     // 12301
                .y1(function(d) {                                                                                      // 12302
                    return y(d.display.y + d.display.y0)                                                               // 12303
                })                                                                                                     // 12304
                .interpolate(interpolate);                                                                             // 12305
                                                                                                                       // 12306
            var zeroArea = d3.svg.area()                                                                               // 12307
                .x(function(d,i)  { return x(getX(d,i)) })                                                             // 12308
                .y0(function(d) { return y(d.display.y0) })                                                            // 12309
                .y1(function(d) { return y(d.display.y0) });                                                           // 12310
                                                                                                                       // 12311
            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')                                              // 12312
                .data(function(d) { return d });                                                                       // 12313
                                                                                                                       // 12314
            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })                 // 12315
                .attr('d', function(d,i){                                                                              // 12316
                    return zeroArea(d.values, d.seriesIndex);                                                          // 12317
                })                                                                                                     // 12318
                .on('mouseover', function(d,i) {                                                                       // 12319
                    d3.select(this).classed('hover', true);                                                            // 12320
                    dispatch.areaMouseover({                                                                           // 12321
                        point: d,                                                                                      // 12322
                        series: d.key,                                                                                 // 12323
                        pos: [d3.event.pageX, d3.event.pageY],                                                         // 12324
                        seriesIndex: d.seriesIndex                                                                     // 12325
                    });                                                                                                // 12326
                })                                                                                                     // 12327
                .on('mouseout', function(d,i) {                                                                        // 12328
                    d3.select(this).classed('hover', false);                                                           // 12329
                    dispatch.areaMouseout({                                                                            // 12330
                        point: d,                                                                                      // 12331
                        series: d.key,                                                                                 // 12332
                        pos: [d3.event.pageX, d3.event.pageY],                                                         // 12333
                        seriesIndex: d.seriesIndex                                                                     // 12334
                    });                                                                                                // 12335
                })                                                                                                     // 12336
                .on('click', function(d,i) {                                                                           // 12337
                    d3.select(this).classed('hover', false);                                                           // 12338
                    dispatch.areaClick({                                                                               // 12339
                        point: d,                                                                                      // 12340
                        series: d.key,                                                                                 // 12341
                        pos: [d3.event.pageX, d3.event.pageY],                                                         // 12342
                        seriesIndex: d.seriesIndex                                                                     // 12343
                    });                                                                                                // 12344
                });                                                                                                    // 12345
                                                                                                                       // 12346
            path.exit().remove();                                                                                      // 12347
            path.style('fill', function(d,i){                                                                          // 12348
                    return d.color || color(d, d.seriesIndex)                                                          // 12349
                })                                                                                                     // 12350
                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });                          // 12351
            path.watchTransition(renderWatch,'stackedArea path')                                                       // 12352
                .attr('d', function(d,i) {                                                                             // 12353
                    return area(d.values,i)                                                                            // 12354
                });                                                                                                    // 12355
                                                                                                                       // 12356
            //============================================================                                             // 12357
            // Event Handling/Dispatching (in chart's scope)                                                           // 12358
            //------------------------------------------------------------                                             // 12359
                                                                                                                       // 12360
            scatter.dispatch.on('elementMouseover.area', function(e) {                                                 // 12361
                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);                     // 12362
            });                                                                                                        // 12363
            scatter.dispatch.on('elementMouseout.area', function(e) {                                                  // 12364
                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);                    // 12365
            });                                                                                                        // 12366
                                                                                                                       // 12367
            //Special offset functions                                                                                 // 12368
            chart.d3_stackedOffset_stackPercent = function(stackData) {                                                // 12369
                var n = stackData.length,    //How many series                                                         // 12370
                    m = stackData[0].length,     //how many points per series                                          // 12371
                    i,                                                                                                 // 12372
                    j,                                                                                                 // 12373
                    o,                                                                                                 // 12374
                    y0 = [];                                                                                           // 12375
                                                                                                                       // 12376
                for (j = 0; j < m; ++j) { //Looping through all points                                                 // 12377
                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series                         // 12378
                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.     // 12379
                    }                                                                                                  // 12380
                                                                                                                       // 12381
                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0           // 12382
                        stackData[i][j][1] /= o;                                                                       // 12383
                    } else { //(total y value of all series at point in time i) == 0                                   // 12384
                        for (i = 0; i < n; i++) {                                                                      // 12385
                            stackData[i][j][1] = 0;                                                                    // 12386
                        }                                                                                              // 12387
                    }                                                                                                  // 12388
                }                                                                                                      // 12389
                for (j = 0; j < m; ++j) y0[j] = 0;                                                                     // 12390
                return y0;                                                                                             // 12391
            };                                                                                                         // 12392
                                                                                                                       // 12393
        });                                                                                                            // 12394
                                                                                                                       // 12395
        renderWatch.renderEnd('stackedArea immediate');                                                                // 12396
        return chart;                                                                                                  // 12397
    }                                                                                                                  // 12398
                                                                                                                       // 12399
    //============================================================                                                     // 12400
    // Global getters and setters                                                                                      // 12401
    //------------------------------------------------------------                                                     // 12402
                                                                                                                       // 12403
    chart.dispatch = dispatch;                                                                                         // 12404
    chart.scatter = scatter;                                                                                           // 12405
                                                                                                                       // 12406
    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });                  // 12407
    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });          // 12408
    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });            // 12409
                                                                                                                       // 12410
    chart.interpolate = function(_) {                                                                                  // 12411
        if (!arguments.length) return interpolate;                                                                     // 12412
        interpolate = _;                                                                                               // 12413
        return chart;                                                                                                  // 12414
    };                                                                                                                 // 12415
                                                                                                                       // 12416
    chart.duration = function(_) {                                                                                     // 12417
        if (!arguments.length) return duration;                                                                        // 12418
        duration = _;                                                                                                  // 12419
        renderWatch.reset(duration);                                                                                   // 12420
        scatter.duration(duration);                                                                                    // 12421
        return chart;                                                                                                  // 12422
    };                                                                                                                 // 12423
                                                                                                                       // 12424
    chart.dispatch = dispatch;                                                                                         // 12425
    chart.scatter = scatter;                                                                                           // 12426
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 12427
                                                                                                                       // 12428
    chart._options = Object.create({}, {                                                                               // 12429
        // simple options, just get/set the necessary values                                                           // 12430
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 12431
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 12432
        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},                                  // 12433
        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},                                   // 12434
        order:    {get: function(){return order;}, set: function(_){order=_;}},                                        // 12435
        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},                      // 12436
                                                                                                                       // 12437
        // simple functor options                                                                                      // 12438
        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},                               // 12439
        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},                               // 12440
                                                                                                                       // 12441
        // options that require extra logic in the setter                                                              // 12442
        margin: {get: function(){return margin;}, set: function(_){                                                    // 12443
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 12444
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 12445
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 12446
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 12447
        }},                                                                                                            // 12448
        color:  {get: function(){return color;}, set: function(_){                                                     // 12449
            color = nv.utils.getColor(_);                                                                              // 12450
        }},                                                                                                            // 12451
        style: {get: function(){return style;}, set: function(_){                                                      // 12452
            style = _;                                                                                                 // 12453
            switch (style) {                                                                                           // 12454
                case 'stack':                                                                                          // 12455
                    chart.offset('zero');                                                                              // 12456
                    chart.order('default');                                                                            // 12457
                    break;                                                                                             // 12458
                case 'stream':                                                                                         // 12459
                    chart.offset('wiggle');                                                                            // 12460
                    chart.order('inside-out');                                                                         // 12461
                    break;                                                                                             // 12462
                case 'stream-center':                                                                                  // 12463
                    chart.offset('silhouette');                                                                        // 12464
                    chart.order('inside-out');                                                                         // 12465
                    break;                                                                                             // 12466
                case 'expand':                                                                                         // 12467
                    chart.offset('expand');                                                                            // 12468
                    chart.order('default');                                                                            // 12469
                    break;                                                                                             // 12470
                case 'stack_percent':                                                                                  // 12471
                    chart.offset(chart.d3_stackedOffset_stackPercent);                                                 // 12472
                    chart.order('default');                                                                            // 12473
                    break;                                                                                             // 12474
            }                                                                                                          // 12475
        }},                                                                                                            // 12476
        duration: {get: function(){return duration;}, set: function(_){                                                // 12477
            duration = _;                                                                                              // 12478
            renderWatch.reset(duration);                                                                               // 12479
            scatter.duration(duration);                                                                                // 12480
        }}                                                                                                             // 12481
    });                                                                                                                // 12482
                                                                                                                       // 12483
    nv.utils.inheritOptions(chart, scatter);                                                                           // 12484
    nv.utils.initOptions(chart);                                                                                       // 12485
                                                                                                                       // 12486
    return chart;                                                                                                      // 12487
};                                                                                                                     // 12488
                                                                                                                       // 12489
nv.models.stackedAreaChart = function() {                                                                              // 12490
    "use strict";                                                                                                      // 12491
                                                                                                                       // 12492
    //============================================================                                                     // 12493
    // Public Variables with Default Settings                                                                          // 12494
    //------------------------------------------------------------                                                     // 12495
                                                                                                                       // 12496
    var stacked = nv.models.stackedArea()                                                                              // 12497
        , xAxis = nv.models.axis()                                                                                     // 12498
        , yAxis = nv.models.axis()                                                                                     // 12499
        , legend = nv.models.legend()                                                                                  // 12500
        , controls = nv.models.legend()                                                                                // 12501
        , interactiveLayer = nv.interactiveGuideline()                                                                 // 12502
        , tooltip = nv.models.tooltip()                                                                                // 12503
        ;                                                                                                              // 12504
                                                                                                                       // 12505
    var margin = {top: 30, right: 25, bottom: 50, left: 60}                                                            // 12506
        , width = null                                                                                                 // 12507
        , height = null                                                                                                // 12508
        , color = nv.utils.defaultColor()                                                                              // 12509
        , showControls = true                                                                                          // 12510
        , showLegend = true                                                                                            // 12511
        , showXAxis = true                                                                                             // 12512
        , showYAxis = true                                                                                             // 12513
        , rightAlignYAxis = false                                                                                      // 12514
        , useInteractiveGuideline = false                                                                              // 12515
        , showTotalInTooltip = true                                                                                    // 12516
        , totalLabel = 'TOTAL'                                                                                         // 12517
        , x //can be accessed via chart.xScale()                                                                       // 12518
        , y //can be accessed via chart.yScale()                                                                       // 12519
        , state = nv.utils.state()                                                                                     // 12520
        , defaultState = null                                                                                          // 12521
        , noData = null                                                                                                // 12522
        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')                                             // 12523
        , controlWidth = 250                                                                                           // 12524
        , controlOptions = ['Stacked','Stream','Expanded']                                                             // 12525
        , controlLabels = {}                                                                                           // 12526
        , duration = 250                                                                                               // 12527
        ;                                                                                                              // 12528
                                                                                                                       // 12529
    state.style = stacked.style();                                                                                     // 12530
    xAxis.orient('bottom').tickPadding(7);                                                                             // 12531
    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');                                                                // 12532
                                                                                                                       // 12533
    tooltip                                                                                                            // 12534
        .headerFormatter(function(d, i) {                                                                              // 12535
            return xAxis.tickFormat()(d, i);                                                                           // 12536
        })                                                                                                             // 12537
        .valueFormatter(function(d, i) {                                                                               // 12538
            return yAxis.tickFormat()(d, i);                                                                           // 12539
        });                                                                                                            // 12540
                                                                                                                       // 12541
    interactiveLayer.tooltip                                                                                           // 12542
        .headerFormatter(function(d, i) {                                                                              // 12543
            return xAxis.tickFormat()(d, i);                                                                           // 12544
        })                                                                                                             // 12545
        .valueFormatter(function(d, i) {                                                                               // 12546
            return yAxis.tickFormat()(d, i);                                                                           // 12547
        });                                                                                                            // 12548
                                                                                                                       // 12549
    var oldYTickFormat = null,                                                                                         // 12550
        oldValueFormatter = null;                                                                                      // 12551
                                                                                                                       // 12552
    controls.updateState(false);                                                                                       // 12553
                                                                                                                       // 12554
    //============================================================                                                     // 12555
    // Private Variables                                                                                               // 12556
    //------------------------------------------------------------                                                     // 12557
                                                                                                                       // 12558
    var renderWatch = nv.utils.renderWatch(dispatch);                                                                  // 12559
    var style = stacked.style();                                                                                       // 12560
                                                                                                                       // 12561
    var stateGetter = function(data) {                                                                                 // 12562
        return function(){                                                                                             // 12563
            return {                                                                                                   // 12564
                active: data.map(function(d) { return !d.disabled }),                                                  // 12565
                style: stacked.style()                                                                                 // 12566
            };                                                                                                         // 12567
        }                                                                                                              // 12568
    };                                                                                                                 // 12569
                                                                                                                       // 12570
    var stateSetter = function(data) {                                                                                 // 12571
        return function(state) {                                                                                       // 12572
            if (state.style !== undefined)                                                                             // 12573
                style = state.style;                                                                                   // 12574
            if (state.active !== undefined)                                                                            // 12575
                data.forEach(function(series,i) {                                                                      // 12576
                    series.disabled = !state.active[i];                                                                // 12577
                });                                                                                                    // 12578
        }                                                                                                              // 12579
    };                                                                                                                 // 12580
                                                                                                                       // 12581
    var percentFormatter = d3.format('%');                                                                             // 12582
                                                                                                                       // 12583
    function chart(selection) {                                                                                        // 12584
        renderWatch.reset();                                                                                           // 12585
        renderWatch.models(stacked);                                                                                   // 12586
        if (showXAxis) renderWatch.models(xAxis);                                                                      // 12587
        if (showYAxis) renderWatch.models(yAxis);                                                                      // 12588
                                                                                                                       // 12589
        selection.each(function(data) {                                                                                // 12590
            var container = d3.select(this),                                                                           // 12591
                that = this;                                                                                           // 12592
            nv.utils.initSVG(container);                                                                               // 12593
                                                                                                                       // 12594
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 12595
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 12596
                                                                                                                       // 12597
            chart.update = function() { container.transition().duration(duration).call(chart); };                      // 12598
            chart.container = this;                                                                                    // 12599
                                                                                                                       // 12600
            state                                                                                                      // 12601
                .setter(stateSetter(data), chart.update)                                                               // 12602
                .getter(stateGetter(data))                                                                             // 12603
                .update();                                                                                             // 12604
                                                                                                                       // 12605
            // DEPRECATED set state.disabled                                                                           // 12606
            state.disabled = data.map(function(d) { return !!d.disabled });                                            // 12607
                                                                                                                       // 12608
            if (!defaultState) {                                                                                       // 12609
                var key;                                                                                               // 12610
                defaultState = {};                                                                                     // 12611
                for (key in state) {                                                                                   // 12612
                    if (state[key] instanceof Array)                                                                   // 12613
                        defaultState[key] = state[key].slice(0);                                                       // 12614
                    else                                                                                               // 12615
                        defaultState[key] = state[key];                                                                // 12616
                }                                                                                                      // 12617
            }                                                                                                          // 12618
                                                                                                                       // 12619
            // Display No Data message if there's nothing to show.                                                     // 12620
            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {                // 12621
                nv.utils.noData(chart, container)                                                                      // 12622
                return chart;                                                                                          // 12623
            } else {                                                                                                   // 12624
                container.selectAll('.nv-noData').remove();                                                            // 12625
            }                                                                                                          // 12626
                                                                                                                       // 12627
            // Setup Scales                                                                                            // 12628
            x = stacked.xScale();                                                                                      // 12629
            y = stacked.yScale();                                                                                      // 12630
                                                                                                                       // 12631
            // Setup containers and skeleton of chart                                                                  // 12632
            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);                              // 12633
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');       // 12634
            var g = wrap.select('g');                                                                                  // 12635
                                                                                                                       // 12636
            gEnter.append("rect").style("opacity",0);                                                                  // 12637
            gEnter.append('g').attr('class', 'nv-x nv-axis');                                                          // 12638
            gEnter.append('g').attr('class', 'nv-y nv-axis');                                                          // 12639
            gEnter.append('g').attr('class', 'nv-stackedWrap');                                                        // 12640
            gEnter.append('g').attr('class', 'nv-legendWrap');                                                         // 12641
            gEnter.append('g').attr('class', 'nv-controlsWrap');                                                       // 12642
            gEnter.append('g').attr('class', 'nv-interactive');                                                        // 12643
                                                                                                                       // 12644
            g.select("rect").attr("width",availableWidth).attr("height",availableHeight);                              // 12645
                                                                                                                       // 12646
            // Legend                                                                                                  // 12647
            if (showLegend) {                                                                                          // 12648
                var legendWidth = (showControls) ? availableWidth - controlWidth : availableWidth;                     // 12649
                                                                                                                       // 12650
                legend.width(legendWidth);                                                                             // 12651
                g.select('.nv-legendWrap').datum(data).call(legend);                                                   // 12652
                                                                                                                       // 12653
                if ( margin.top != legend.height()) {                                                                  // 12654
                    margin.top = legend.height();                                                                      // 12655
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 12656
                }                                                                                                      // 12657
                                                                                                                       // 12658
                g.select('.nv-legendWrap')                                                                             // 12659
                    .attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');        // 12660
            }                                                                                                          // 12661
                                                                                                                       // 12662
            // Controls                                                                                                // 12663
            if (showControls) {                                                                                        // 12664
                var controlsData = [                                                                                   // 12665
                    {                                                                                                  // 12666
                        key: controlLabels.stacked || 'Stacked',                                                       // 12667
                        metaKey: 'Stacked',                                                                            // 12668
                        disabled: stacked.style() != 'stack',                                                          // 12669
                        style: 'stack'                                                                                 // 12670
                    },                                                                                                 // 12671
                    {                                                                                                  // 12672
                        key: controlLabels.stream || 'Stream',                                                         // 12673
                        metaKey: 'Stream',                                                                             // 12674
                        disabled: stacked.style() != 'stream',                                                         // 12675
                        style: 'stream'                                                                                // 12676
                    },                                                                                                 // 12677
                    {                                                                                                  // 12678
                        key: controlLabels.expanded || 'Expanded',                                                     // 12679
                        metaKey: 'Expanded',                                                                           // 12680
                        disabled: stacked.style() != 'expand',                                                         // 12681
                        style: 'expand'                                                                                // 12682
                    },                                                                                                 // 12683
                    {                                                                                                  // 12684
                        key: controlLabels.stack_percent || 'Stack %',                                                 // 12685
                        metaKey: 'Stack_Percent',                                                                      // 12686
                        disabled: stacked.style() != 'stack_percent',                                                  // 12687
                        style: 'stack_percent'                                                                         // 12688
                    }                                                                                                  // 12689
                ];                                                                                                     // 12690
                                                                                                                       // 12691
                controlWidth = (controlOptions.length/3) * 260;                                                        // 12692
                controlsData = controlsData.filter(function(d) {                                                       // 12693
                    return controlOptions.indexOf(d.metaKey) !== -1;                                                   // 12694
                });                                                                                                    // 12695
                                                                                                                       // 12696
                controls                                                                                               // 12697
                    .width( controlWidth )                                                                             // 12698
                    .color(['#444', '#444', '#444']);                                                                  // 12699
                                                                                                                       // 12700
                g.select('.nv-controlsWrap')                                                                           // 12701
                    .datum(controlsData)                                                                               // 12702
                    .call(controls);                                                                                   // 12703
                                                                                                                       // 12704
                if ( margin.top != Math.max(controls.height(), legend.height()) ) {                                    // 12705
                    margin.top = Math.max(controls.height(), legend.height());                                         // 12706
                    availableHeight = nv.utils.availableHeight(height, container, margin);                             // 12707
                }                                                                                                      // 12708
                                                                                                                       // 12709
                g.select('.nv-controlsWrap')                                                                           // 12710
                    .attr('transform', 'translate(0,' + (-margin.top) +')');                                           // 12711
            }                                                                                                          // 12712
                                                                                                                       // 12713
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 12714
                                                                                                                       // 12715
            if (rightAlignYAxis) {                                                                                     // 12716
                g.select(".nv-y.nv-axis")                                                                              // 12717
                    .attr("transform", "translate(" + availableWidth + ",0)");                                         // 12718
            }                                                                                                          // 12719
                                                                                                                       // 12720
            //Set up interactive layer                                                                                 // 12721
            if (useInteractiveGuideline) {                                                                             // 12722
                interactiveLayer                                                                                       // 12723
                    .width(availableWidth)                                                                             // 12724
                    .height(availableHeight)                                                                           // 12725
                    .margin({left: margin.left, top: margin.top})                                                      // 12726
                    .svgContainer(container)                                                                           // 12727
                    .xScale(x);                                                                                        // 12728
                wrap.select(".nv-interactive").call(interactiveLayer);                                                 // 12729
            }                                                                                                          // 12730
                                                                                                                       // 12731
            stacked                                                                                                    // 12732
                .width(availableWidth)                                                                                 // 12733
                .height(availableHeight);                                                                              // 12734
                                                                                                                       // 12735
            var stackedWrap = g.select('.nv-stackedWrap')                                                              // 12736
                .datum(data);                                                                                          // 12737
                                                                                                                       // 12738
            stackedWrap.transition().call(stacked);                                                                    // 12739
                                                                                                                       // 12740
            // Setup Axes                                                                                              // 12741
            if (showXAxis) {                                                                                           // 12742
                xAxis.scale(x)                                                                                         // 12743
                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )                                           // 12744
                    .tickSize( -availableHeight, 0);                                                                   // 12745
                                                                                                                       // 12746
                g.select('.nv-x.nv-axis')                                                                              // 12747
                    .attr('transform', 'translate(0,' + availableHeight + ')');                                        // 12748
                                                                                                                       // 12749
                g.select('.nv-x.nv-axis')                                                                              // 12750
                    .transition().duration(0)                                                                          // 12751
                    .call(xAxis);                                                                                      // 12752
            }                                                                                                          // 12753
                                                                                                                       // 12754
            if (showYAxis) {                                                                                           // 12755
                var ticks;                                                                                             // 12756
                if (stacked.offset() === 'wiggle') {                                                                   // 12757
                    ticks = 0;                                                                                         // 12758
                }                                                                                                      // 12759
                else {                                                                                                 // 12760
                    ticks = nv.utils.calcTicksY(availableHeight/36, data);                                             // 12761
                }                                                                                                      // 12762
                yAxis.scale(y)                                                                                         // 12763
                    ._ticks(ticks)                                                                                     // 12764
                    .tickSize(-availableWidth, 0);                                                                     // 12765
                                                                                                                       // 12766
                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {                         // 12767
                        var currentFormat = yAxis.tickFormat();                                                        // 12768
                                                                                                                       // 12769
                        if ( !oldYTickFormat || currentFormat !== percentFormatter )                                   // 12770
                            oldYTickFormat = currentFormat;                                                            // 12771
                                                                                                                       // 12772
                        //Forces the yAxis to use percentage in 'expand' mode.                                         // 12773
                        yAxis.tickFormat(percentFormatter);                                                            // 12774
                    }                                                                                                  // 12775
                    else {                                                                                             // 12776
                        if (oldYTickFormat) {                                                                          // 12777
                            yAxis.tickFormat(oldYTickFormat);                                                          // 12778
                            oldYTickFormat = null;                                                                     // 12779
                        }                                                                                              // 12780
                    }                                                                                                  // 12781
                                                                                                                       // 12782
                g.select('.nv-y.nv-axis')                                                                              // 12783
                    .transition().duration(0)                                                                          // 12784
                    .call(yAxis);                                                                                      // 12785
            }                                                                                                          // 12786
                                                                                                                       // 12787
            //============================================================                                             // 12788
            // Event Handling/Dispatching (in chart's scope)                                                           // 12789
            //------------------------------------------------------------                                             // 12790
                                                                                                                       // 12791
            stacked.dispatch.on('areaClick.toggle', function(e) {                                                      // 12792
                if (data.filter(function(d) { return !d.disabled }).length === 1)                                      // 12793
                    data.forEach(function(d) {                                                                         // 12794
                        d.disabled = false;                                                                            // 12795
                    });                                                                                                // 12796
                else                                                                                                   // 12797
                    data.forEach(function(d,i) {                                                                       // 12798
                        d.disabled = (i != e.seriesIndex);                                                             // 12799
                    });                                                                                                // 12800
                                                                                                                       // 12801
                state.disabled = data.map(function(d) { return !!d.disabled });                                        // 12802
                dispatch.stateChange(state);                                                                           // 12803
                                                                                                                       // 12804
                chart.update();                                                                                        // 12805
            });                                                                                                        // 12806
                                                                                                                       // 12807
            legend.dispatch.on('stateChange', function(newState) {                                                     // 12808
                for (var key in newState)                                                                              // 12809
                    state[key] = newState[key];                                                                        // 12810
                dispatch.stateChange(state);                                                                           // 12811
                chart.update();                                                                                        // 12812
            });                                                                                                        // 12813
                                                                                                                       // 12814
            controls.dispatch.on('legendClick', function(d,i) {                                                        // 12815
                if (!d.disabled) return;                                                                               // 12816
                                                                                                                       // 12817
                controlsData = controlsData.map(function(s) {                                                          // 12818
                    s.disabled = true;                                                                                 // 12819
                    return s;                                                                                          // 12820
                });                                                                                                    // 12821
                d.disabled = false;                                                                                    // 12822
                                                                                                                       // 12823
                stacked.style(d.style);                                                                                // 12824
                                                                                                                       // 12825
                                                                                                                       // 12826
                state.style = stacked.style();                                                                         // 12827
                dispatch.stateChange(state);                                                                           // 12828
                                                                                                                       // 12829
                chart.update();                                                                                        // 12830
            });                                                                                                        // 12831
                                                                                                                       // 12832
            interactiveLayer.dispatch.on('elementMousemove', function(e) {                                             // 12833
                stacked.clearHighlights();                                                                             // 12834
                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0;                               // 12835
                data                                                                                                   // 12836
                    .filter(function(series, i) {                                                                      // 12837
                        series.seriesIndex = i;                                                                        // 12838
                        return !series.disabled;                                                                       // 12839
                    })                                                                                                 // 12840
                    .forEach(function(series,i) {                                                                      // 12841
                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());                    // 12842
                        var point = series.values[pointIndex];                                                         // 12843
                        var pointYValue = chart.y()(point, pointIndex);                                                // 12844
                        if (pointYValue != null) {                                                                     // 12845
                            stacked.highlightPoint(i, pointIndex, true);                                               // 12846
                        }                                                                                              // 12847
                        if (typeof point === 'undefined') return;                                                      // 12848
                        if (typeof singlePoint === 'undefined') singlePoint = point;                                   // 12849
                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
                                                                                                                       // 12851
                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.              // 12852
                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);
                        allData.push({                                                                                 // 12854
                            key: series.key,                                                                           // 12855
                            value: tooltipValue,                                                                       // 12856
                            color: color(series,series.seriesIndex),                                                   // 12857
                            stackedValue: point.display                                                                // 12858
                        });                                                                                            // 12859
                                                                                                                       // 12860
                        if (showTotalInTooltip && stacked.style() != 'expand') {                                       // 12861
                          valueSum += tooltipValue;                                                                    // 12862
                        };                                                                                             // 12863
                    });                                                                                                // 12864
                                                                                                                       // 12865
                allData.reverse();                                                                                     // 12866
                                                                                                                       // 12867
                //Highlight the tooltip entry based on which stack the mouse is closest to.                            // 12868
                if (allData.length > 2) {                                                                              // 12869
                    var yValue = chart.yScale().invert(e.mouseY);                                                      // 12870
                    var yDistMax = Infinity, indexToHighlight = null;                                                  // 12871
                    allData.forEach(function(series,i) {                                                               // 12872
                                                                                                                       // 12873
                        //To handle situation where the stacked area chart is negative, we need to use absolute values // 12874
                        //when checking if the mouse Y value is within the stack area.                                 // 12875
                        yValue = Math.abs(yValue);                                                                     // 12876
                        var stackedY0 = Math.abs(series.stackedValue.y0);                                              // 12877
                        var stackedY = Math.abs(series.stackedValue.y);                                                // 12878
                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))                                  // 12879
                        {                                                                                              // 12880
                            indexToHighlight = i;                                                                      // 12881
                            return;                                                                                    // 12882
                        }                                                                                              // 12883
                    });                                                                                                // 12884
                    if (indexToHighlight != null)                                                                      // 12885
                        allData[indexToHighlight].highlight = true;                                                    // 12886
                }                                                                                                      // 12887
                                                                                                                       // 12888
                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.                                    // 12889
                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2) {                        // 12890
                    allData.push({                                                                                     // 12891
                        key: totalLabel,                                                                               // 12892
                        value: valueSum,                                                                               // 12893
                        total: true                                                                                    // 12894
                    });                                                                                                // 12895
                }                                                                                                      // 12896
                                                                                                                       // 12897
                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));                                    // 12898
                                                                                                                       // 12899
                var valueFormatter = interactiveLayer.tooltip.valueFormatter();                                        // 12900
                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view                     // 12901
                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {                             // 12902
                    if ( !oldValueFormatter ) {                                                                        // 12903
                        oldValueFormatter = valueFormatter;                                                            // 12904
                    }                                                                                                  // 12905
                    //Forces the tooltip to use percentage in 'expand' mode.                                           // 12906
                    valueFormatter = d3.format(".1%");                                                                 // 12907
                }                                                                                                      // 12908
                else {                                                                                                 // 12909
                    if (oldValueFormatter) {                                                                           // 12910
                        valueFormatter = oldValueFormatter;                                                            // 12911
                        oldValueFormatter = null;                                                                      // 12912
                    }                                                                                                  // 12913
                }                                                                                                      // 12914
                                                                                                                       // 12915
                interactiveLayer.tooltip                                                                               // 12916
                    .position({left: pointXLocation + margin.left, top: e.mouseY + margin.top})                        // 12917
                    .chartContainer(that.parentNode)                                                                   // 12918
                    .valueFormatter(valueFormatter)                                                                    // 12919
                    .data(                                                                                             // 12920
                    {                                                                                                  // 12921
                        value: xValue,                                                                                 // 12922
                        series: allData                                                                                // 12923
                    }                                                                                                  // 12924
                )();                                                                                                   // 12925
                                                                                                                       // 12926
                interactiveLayer.renderGuideLine(pointXLocation);                                                      // 12927
                                                                                                                       // 12928
            });                                                                                                        // 12929
                                                                                                                       // 12930
            interactiveLayer.dispatch.on("elementMouseout",function(e) {                                               // 12931
                stacked.clearHighlights();                                                                             // 12932
            });                                                                                                        // 12933
                                                                                                                       // 12934
            // Update chart from a state object passed to event handler                                                // 12935
            dispatch.on('changeState', function(e) {                                                                   // 12936
                                                                                                                       // 12937
                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {                          // 12938
                    data.forEach(function(series,i) {                                                                  // 12939
                        series.disabled = e.disabled[i];                                                               // 12940
                    });                                                                                                // 12941
                                                                                                                       // 12942
                    state.disabled = e.disabled;                                                                       // 12943
                }                                                                                                      // 12944
                                                                                                                       // 12945
                if (typeof e.style !== 'undefined') {                                                                  // 12946
                    stacked.style(e.style);                                                                            // 12947
                    style = e.style;                                                                                   // 12948
                }                                                                                                      // 12949
                                                                                                                       // 12950
                chart.update();                                                                                        // 12951
            });                                                                                                        // 12952
                                                                                                                       // 12953
        });                                                                                                            // 12954
                                                                                                                       // 12955
        renderWatch.renderEnd('stacked Area chart immediate');                                                         // 12956
        return chart;                                                                                                  // 12957
    }                                                                                                                  // 12958
                                                                                                                       // 12959
    //============================================================                                                     // 12960
    // Event Handling/Dispatching (out of chart's scope)                                                               // 12961
    //------------------------------------------------------------                                                     // 12962
                                                                                                                       // 12963
    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {                                                    // 12964
        evt.point['x'] = stacked.x()(evt.point);                                                                       // 12965
        evt.point['y'] = stacked.y()(evt.point);                                                                       // 12966
        tooltip.data(evt).position(evt.pos).hidden(false);                                                             // 12967
    });                                                                                                                // 12968
                                                                                                                       // 12969
    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {                                                     // 12970
        tooltip.hidden(true)                                                                                           // 12971
    });                                                                                                                // 12972
                                                                                                                       // 12973
    //============================================================                                                     // 12974
    // Expose Public Variables                                                                                         // 12975
    //------------------------------------------------------------                                                     // 12976
                                                                                                                       // 12977
    // expose chart's sub-components                                                                                   // 12978
    chart.dispatch = dispatch;                                                                                         // 12979
    chart.stacked = stacked;                                                                                           // 12980
    chart.legend = legend;                                                                                             // 12981
    chart.controls = controls;                                                                                         // 12982
    chart.xAxis = xAxis;                                                                                               // 12983
    chart.yAxis = yAxis;                                                                                               // 12984
    chart.interactiveLayer = interactiveLayer;                                                                         // 12985
    chart.tooltip = tooltip;                                                                                           // 12986
                                                                                                                       // 12987
    chart.dispatch = dispatch;                                                                                         // 12988
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 12989
                                                                                                                       // 12990
    chart._options = Object.create({}, {                                                                               // 12991
        // simple options, just get/set the necessary values                                                           // 12992
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 12993
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 12994
        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},                            // 12995
        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},                          // 12996
        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},                            // 12997
        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},                   // 12998
        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},                                     // 12999
        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},                   // 13000
        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},                // 13001
        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},             // 13002
        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},
        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},                       // 13004
                                                                                                                       // 13005
        // deprecated options                                                                                          // 13006
        tooltips:    {get: function(){return tooltip.enabled();}, set: function(_){                                    // 13007
            // deprecated after 1.7.1                                                                                  // 13008
            nv.deprecated('tooltips', 'use chart.tooltip.enabled() instead');                                          // 13009
            tooltip.enabled(!!_);                                                                                      // 13010
        }},                                                                                                            // 13011
        tooltipContent:    {get: function(){return tooltip.contentGenerator();}, set: function(_){                     // 13012
            // deprecated after 1.7.1                                                                                  // 13013
            nv.deprecated('tooltipContent', 'use chart.tooltip.contentGenerator() instead');                           // 13014
            tooltip.contentGenerator(_);                                                                               // 13015
        }},                                                                                                            // 13016
                                                                                                                       // 13017
        // options that require extra logic in the setter                                                              // 13018
        margin: {get: function(){return margin;}, set: function(_){                                                    // 13019
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 13020
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 13021
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 13022
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 13023
        }},                                                                                                            // 13024
        duration: {get: function(){return duration;}, set: function(_){                                                // 13025
            duration = _;                                                                                              // 13026
            renderWatch.reset(duration);                                                                               // 13027
            stacked.duration(duration);                                                                                // 13028
            xAxis.duration(duration);                                                                                  // 13029
            yAxis.duration(duration);                                                                                  // 13030
        }},                                                                                                            // 13031
        color:  {get: function(){return color;}, set: function(_){                                                     // 13032
            color = nv.utils.getColor(_);                                                                              // 13033
            legend.color(color);                                                                                       // 13034
            stacked.color(color);                                                                                      // 13035
        }},                                                                                                            // 13036
        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){                                  // 13037
            rightAlignYAxis = _;                                                                                       // 13038
            yAxis.orient( rightAlignYAxis ? 'right' : 'left');                                                         // 13039
        }},                                                                                                            // 13040
        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){                  // 13041
            useInteractiveGuideline = !!_;                                                                             // 13042
            chart.interactive(!_);                                                                                     // 13043
            chart.useVoronoi(!_);                                                                                      // 13044
            stacked.scatter.interactive(!_);                                                                           // 13045
        }}                                                                                                             // 13046
    });                                                                                                                // 13047
                                                                                                                       // 13048
    nv.utils.inheritOptions(chart, stacked);                                                                           // 13049
    nv.utils.initOptions(chart);                                                                                       // 13050
                                                                                                                       // 13051
    return chart;                                                                                                      // 13052
};                                                                                                                     // 13053
// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad                                                        // 13054
nv.models.sunburst = function() {                                                                                      // 13055
    "use strict";                                                                                                      // 13056
                                                                                                                       // 13057
    //============================================================                                                     // 13058
    // Public Variables with Default Settings                                                                          // 13059
    //------------------------------------------------------------                                                     // 13060
                                                                                                                       // 13061
    var margin = {top: 0, right: 0, bottom: 0, left: 0}                                                                // 13062
        , width = null                                                                                                 // 13063
        , height = null                                                                                                // 13064
        , mode = "count"                                                                                               // 13065
        , modes = {count: function(d) { return 1; }, size: function(d) { return d.size }}                              // 13066
        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one               // 13067
        , container = null                                                                                             // 13068
        , color = nv.utils.defaultColor()                                                                              // 13069
        , duration = 500                                                                                               // 13070
        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd')
        ;                                                                                                              // 13072
                                                                                                                       // 13073
    var x = d3.scale.linear().range([0, 2 * Math.PI]);                                                                 // 13074
    var y = d3.scale.sqrt();                                                                                           // 13075
                                                                                                                       // 13076
    var partition = d3.layout.partition()                                                                              // 13077
        .sort(null)                                                                                                    // 13078
        .value(function(d) { return 1; });                                                                             // 13079
                                                                                                                       // 13080
    var arc = d3.svg.arc()                                                                                             // 13081
        .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })                                // 13082
        .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })                           // 13083
        .innerRadius(function(d) { return Math.max(0, y(d.y)); })                                                      // 13084
        .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });                                              // 13085
                                                                                                                       // 13086
    // Keep track of the current and previous node being displayed as the root.                                        // 13087
    var node, prevNode;                                                                                                // 13088
    // Keep track of the root node                                                                                     // 13089
    var rootNode;                                                                                                      // 13090
                                                                                                                       // 13091
    //============================================================                                                     // 13092
    // chart function                                                                                                  // 13093
    //------------------------------------------------------------                                                     // 13094
                                                                                                                       // 13095
    var renderWatch = nv.utils.renderWatch(dispatch);                                                                  // 13096
                                                                                                                       // 13097
    function chart(selection) {                                                                                        // 13098
        renderWatch.reset();                                                                                           // 13099
        selection.each(function(data) {                                                                                // 13100
            container = d3.select(this);                                                                               // 13101
            var availableWidth = nv.utils.availableWidth(width, container, margin);                                    // 13102
            var availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 13103
            var radius = Math.min(availableWidth, availableHeight) / 2;                                                // 13104
            var path;                                                                                                  // 13105
                                                                                                                       // 13106
            nv.utils.initSVG(container);                                                                               // 13107
                                                                                                                       // 13108
            // Setup containers and skeleton of chart                                                                  // 13109
            var wrap = container.selectAll('.nv-wrap.nv-sunburst').data(data);                                         // 13110
            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id);         // 13111
                                                                                                                       // 13112
            var g = wrapEnter.selectAll('nv-sunburst');                                                                // 13113
                                                                                                                       // 13114
            wrap.attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');               // 13115
                                                                                                                       // 13116
            container.on('click', function (d, i) {                                                                    // 13117
                dispatch.chartClick({                                                                                  // 13118
                    data: d,                                                                                           // 13119
                    index: i,                                                                                          // 13120
                    pos: d3.event,                                                                                     // 13121
                    id: id                                                                                             // 13122
                });                                                                                                    // 13123
            });                                                                                                        // 13124
                                                                                                                       // 13125
            y.range([0, radius]);                                                                                      // 13126
                                                                                                                       // 13127
            node = node || data;                                                                                       // 13128
            rootNode = data[0];                                                                                        // 13129
            partition.value(modes[mode] || modes["count"]);                                                            // 13130
            path = g.data(partition.nodes).enter()                                                                     // 13131
                .append("path")                                                                                        // 13132
                .attr("d", arc)                                                                                        // 13133
                .style("fill", function (d) {                                                                          // 13134
                    return color((d.children ? d : d.parent).name);                                                    // 13135
                })                                                                                                     // 13136
                .style("stroke", "#FFF")                                                                               // 13137
                .on("click", function(d) {                                                                             // 13138
                    if (prevNode !== node && node !== d) prevNode = node;                                              // 13139
                    node = d;                                                                                          // 13140
                    path.transition()                                                                                  // 13141
                        .duration(duration)                                                                            // 13142
                        .attrTween("d", arcTweenZoom(d));                                                              // 13143
                })                                                                                                     // 13144
                .each(stash)                                                                                           // 13145
                .on("dblclick", function(d) {                                                                          // 13146
                    if (prevNode.parent == d) {                                                                        // 13147
                        path.transition()                                                                              // 13148
                            .duration(duration)                                                                        // 13149
                            .attrTween("d", arcTweenZoom(rootNode));                                                   // 13150
                    }                                                                                                  // 13151
                })                                                                                                     // 13152
                .each(stash)                                                                                           // 13153
                .on('mouseover', function(d,i){                                                                        // 13154
                    d3.select(this).classed('hover', true).style('opacity', 0.8);                                      // 13155
                    dispatch.elementMouseover({                                                                        // 13156
                        data: d,                                                                                       // 13157
                        color: d3.select(this).style("fill")                                                           // 13158
                    });                                                                                                // 13159
                })                                                                                                     // 13160
                .on('mouseout', function(d,i){                                                                         // 13161
                    d3.select(this).classed('hover', false).style('opacity', 1);                                       // 13162
                    dispatch.elementMouseout({                                                                         // 13163
                        data: d                                                                                        // 13164
                    });                                                                                                // 13165
                })                                                                                                     // 13166
                .on('mousemove', function(d,i){                                                                        // 13167
                    dispatch.elementMousemove({                                                                        // 13168
                        data: d                                                                                        // 13169
                    });                                                                                                // 13170
                });                                                                                                    // 13171
                                                                                                                       // 13172
                                                                                                                       // 13173
                                                                                                                       // 13174
            // Setup for switching data: stash the old values for transition.                                          // 13175
            function stash(d) {                                                                                        // 13176
                d.x0 = d.x;                                                                                            // 13177
                d.dx0 = d.dx;                                                                                          // 13178
            }                                                                                                          // 13179
                                                                                                                       // 13180
            // When switching data: interpolate the arcs in data space.                                                // 13181
            function arcTweenData(a, i) {                                                                              // 13182
                var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);                                                      // 13183
                                                                                                                       // 13184
                function tween(t) {                                                                                    // 13185
                    var b = oi(t);                                                                                     // 13186
                    a.x0 = b.x;                                                                                        // 13187
                    a.dx0 = b.dx;                                                                                      // 13188
                    return arc(b);                                                                                     // 13189
                }                                                                                                      // 13190
                                                                                                                       // 13191
                if (i == 0) {                                                                                          // 13192
                    // If we are on the first arc, adjust the x domain to match the root node                          // 13193
                    // at the current zoom level. (We only need to do this once.)                                      // 13194
                    var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);                                   // 13195
                    return function (t) {                                                                              // 13196
                        x.domain(xd(t));                                                                               // 13197
                        return tween(t);                                                                               // 13198
                    };                                                                                                 // 13199
                } else {                                                                                               // 13200
                    return tween;                                                                                      // 13201
                }                                                                                                      // 13202
            }                                                                                                          // 13203
                                                                                                                       // 13204
            // When zooming: interpolate the scales.                                                                   // 13205
            function arcTweenZoom(d) {                                                                                 // 13206
                var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),                                                // 13207
                    yd = d3.interpolate(y.domain(), [d.y, 1]),                                                         // 13208
                    yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);                                            // 13209
                return function (d, i) {                                                                               // 13210
                    return i                                                                                           // 13211
                        ? function (t) {                                                                               // 13212
                        return arc(d);                                                                                 // 13213
                    }                                                                                                  // 13214
                        : function (t) {                                                                               // 13215
                        x.domain(xd(t));                                                                               // 13216
                        y.domain(yd(t)).range(yr(t));                                                                  // 13217
                        return arc(d);                                                                                 // 13218
                    };                                                                                                 // 13219
                };                                                                                                     // 13220
            }                                                                                                          // 13221
                                                                                                                       // 13222
        });                                                                                                            // 13223
                                                                                                                       // 13224
        renderWatch.renderEnd('sunburst immediate');                                                                   // 13225
        return chart;                                                                                                  // 13226
    }                                                                                                                  // 13227
                                                                                                                       // 13228
    //============================================================                                                     // 13229
    // Expose Public Variables                                                                                         // 13230
    //------------------------------------------------------------                                                     // 13231
                                                                                                                       // 13232
    chart.dispatch = dispatch;                                                                                         // 13233
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 13234
                                                                                                                       // 13235
    chart._options = Object.create({}, {                                                                               // 13236
        // simple options, just get/set the necessary values                                                           // 13237
        width:      {get: function(){return width;}, set: function(_){width=_;}},                                      // 13238
        height:     {get: function(){return height;}, set: function(_){height=_;}},                                    // 13239
        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},                                        // 13240
        id:         {get: function(){return id;}, set: function(_){id=_;}},                                            // 13241
        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},                                // 13242
                                                                                                                       // 13243
        // options that require extra logic in the setter                                                              // 13244
        margin: {get: function(){return margin;}, set: function(_){                                                    // 13245
            margin.top    = _.top    != undefined ? _.top    : margin.top;                                             // 13246
            margin.right  = _.right  != undefined ? _.right  : margin.right;                                           // 13247
            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;                                          // 13248
            margin.left   = _.left   != undefined ? _.left   : margin.left;                                            // 13249
        }},                                                                                                            // 13250
        color: {get: function(){return color;}, set: function(_){                                                      // 13251
            color=nv.utils.getColor(_);                                                                                // 13252
        }}                                                                                                             // 13253
    });                                                                                                                // 13254
                                                                                                                       // 13255
    nv.utils.initOptions(chart);                                                                                       // 13256
    return chart;                                                                                                      // 13257
};                                                                                                                     // 13258
nv.models.sunburstChart = function() {                                                                                 // 13259
    "use strict";                                                                                                      // 13260
                                                                                                                       // 13261
    //============================================================                                                     // 13262
    // Public Variables with Default Settings                                                                          // 13263
    //------------------------------------------------------------                                                     // 13264
                                                                                                                       // 13265
    var sunburst = nv.models.sunburst();                                                                               // 13266
    var tooltip = nv.models.tooltip();                                                                                 // 13267
                                                                                                                       // 13268
    var margin = {top: 30, right: 20, bottom: 20, left: 20}                                                            // 13269
        , width = null                                                                                                 // 13270
        , height = null                                                                                                // 13271
        , color = nv.utils.defaultColor()                                                                              // 13272
        , id = Math.round(Math.random() * 100000)                                                                      // 13273
        , defaultState = null                                                                                          // 13274
        , noData = null                                                                                                // 13275
        , duration = 250                                                                                               // 13276
        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState','renderEnd')               // 13277
        ;                                                                                                              // 13278
                                                                                                                       // 13279
    //============================================================                                                     // 13280
    // Private Variables                                                                                               // 13281
    //------------------------------------------------------------                                                     // 13282
                                                                                                                       // 13283
    var renderWatch = nv.utils.renderWatch(dispatch);                                                                  // 13284
    tooltip.headerEnabled(false).duration(0).valueFormatter(function(d, i) {                                           // 13285
        return d;                                                                                                      // 13286
    });                                                                                                                // 13287
                                                                                                                       // 13288
    //============================================================                                                     // 13289
    // Chart function                                                                                                  // 13290
    //------------------------------------------------------------                                                     // 13291
                                                                                                                       // 13292
    function chart(selection) {                                                                                        // 13293
        renderWatch.reset();                                                                                           // 13294
        renderWatch.models(sunburst);                                                                                  // 13295
                                                                                                                       // 13296
        selection.each(function(data) {                                                                                // 13297
            var container = d3.select(this);                                                                           // 13298
            nv.utils.initSVG(container);                                                                               // 13299
                                                                                                                       // 13300
            var that = this;                                                                                           // 13301
            var availableWidth = nv.utils.availableWidth(width, container, margin),                                    // 13302
                availableHeight = nv.utils.availableHeight(height, container, margin);                                 // 13303
                                                                                                                       // 13304
            chart.update = function() {                                                                                // 13305
                if (duration === 0)                                                                                    // 13306
                    container.call(chart);                                                                             // 13307
                else                                                                                                   // 13308
                    container.transition().duration(duration).call(chart)                                              // 13309
            };                                                                                                         // 13310
            chart.container = this;                                                                                    // 13311
                                                                                                                       // 13312
            // Display No Data message if there's nothing to show.                                                     // 13313
            if (!data || !data.length) {                                                                               // 13314
                nv.utils.noData(chart, container);                                                                     // 13315
                return chart;                                                                                          // 13316
            } else {                                                                                                   // 13317
                container.selectAll('.nv-noData').remove();                                                            // 13318
            }                                                                                                          // 13319
                                                                                                                       // 13320
            // Setup containers and skeleton of chart                                                                  // 13321
            var wrap = container.selectAll('g.nv-wrap.nv-sunburstChart').data(data);                                   // 13322
            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sunburstChart').append('g');          // 13323
            var g = wrap.select('g');                                                                                  // 13324
                                                                                                                       // 13325
            gEnter.append('g').attr('class', 'nv-sunburstWrap');                                                       // 13326
                                                                                                                       // 13327
            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');                               // 13328
                                                                                                                       // 13329
            // Main Chart Component(s)                                                                                 // 13330
            sunburst.width(availableWidth).height(availableHeight);                                                    // 13331
            var sunWrap = g.select('.nv-sunburstWrap').datum(data);                                                    // 13332
            d3.transition(sunWrap).call(sunburst);                                                                     // 13333
                                                                                                                       // 13334
        });                                                                                                            // 13335
                                                                                                                       // 13336
        renderWatch.renderEnd('sunburstChart immediate');                                                              // 13337
        return chart;                                                                                                  // 13338
    }                                                                                                                  // 13339
                                                                                                                       // 13340
    //============================================================                                                     // 13341
    // Event Handling/Dispatching (out of chart's scope)                                                               // 13342
    //------------------------------------------------------------                                                     // 13343
                                                                                                                       // 13344
    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {                                                   // 13345
        evt['series'] = {                                                                                              // 13346
            key: evt.data.name,                                                                                        // 13347
            value: evt.data.size,                                                                                      // 13348
            color: evt.color                                                                                           // 13349
        };                                                                                                             // 13350
        tooltip.data(evt).hidden(false);                                                                               // 13351
    });                                                                                                                // 13352
                                                                                                                       // 13353
    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {                                                    // 13354
        tooltip.hidden(true);                                                                                          // 13355
    });                                                                                                                // 13356
                                                                                                                       // 13357
    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {                                                   // 13358
        tooltip.position({top: d3.event.pageY, left: d3.event.pageX})();                                               // 13359
    });                                                                                                                // 13360
                                                                                                                       // 13361
    //============================================================                                                     // 13362
    // Expose Public Variables                                                                                         // 13363
    //------------------------------------------------------------                                                     // 13364
                                                                                                                       // 13365
    // expose chart's sub-components                                                                                   // 13366
    chart.dispatch = dispatch;                                                                                         // 13367
    chart.sunburst = sunburst;                                                                                         // 13368
    chart.tooltip = tooltip;                                                                                           // 13369
    chart.options = nv.utils.optionsFunc.bind(chart);                                                                  // 13370
                                                                                                                       // 13371
    // use Object get/set functionality to map between vars and chart functions                                        // 13372
    chart._options = Object.create({}, {                                                                               // 13373
        // simple options, just get/set the necessary values                                                           // 13374
        noData:         {get: function(){return noData;},         set: function(_){noData=_;}},                        // 13375
        defaultState:   {get: function(){return defaultState;},   set: function(_){defaultState=_;}},                  // 13376
                                                                                                                       // 13377
        // options that require extra logic in the setter                                                              // 13378
        color: {get: function(){return color;}, set: function(_){                                                      // 13379
            color = _;                                                                                                 // 13380
            sunburst.color(color);                                                                                     // 13381
        }},                                                                                                            // 13382
        duration: {get: function(){return duration;}, set: function(_){                                                // 13383
            duration = _;                                                                                              // 13384
            renderWatch.reset(duration);                                                                               // 13385
            sunburst.duration(duration);                                                                               // 13386
        }},                                                                                                            // 13387
        margin: {get: function(){return margin;}, set: function(_){                                                    // 13388
            margin.top    = _.top    !== undefined ? _.top    : margin.top;                                            // 13389
            margin.right  = _.right  !== undefined ? _.right  : margin.right;                                          // 13390
            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;                                         // 13391
            margin.left   = _.left   !== undefined ? _.left   : margin.left;                                           // 13392
        }}                                                                                                             // 13393
    });                                                                                                                // 13394
    nv.utils.inheritOptions(chart, sunburst);                                                                          // 13395
    nv.utils.initOptions(chart);                                                                                       // 13396
    return chart;                                                                                                      // 13397
};                                                                                                                     // 13398
                                                                                                                       // 13399
nv.version = "1.8.1-dev";                                                                                              // 13400
})();                                                                                                                  // 13401
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 13411
}).call(this);                                                       // 13412
                                                                     // 13413
///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['nvd3:nvd3'] = {
  nv: nv
};

})();
